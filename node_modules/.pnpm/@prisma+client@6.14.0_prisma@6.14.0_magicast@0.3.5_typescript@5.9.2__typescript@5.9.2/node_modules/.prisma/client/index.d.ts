
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model WorkspaceUnit
 * *
 *  * * System & Administration **
 */
export type WorkspaceUnit = $Result.DefaultSelection<Prisma.$WorkspaceUnitPayload>
/**
 * Model ERPUser
 * 
 */
export type ERPUser = $Result.DefaultSelection<Prisma.$ERPUserPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model UserRole
 * 
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model SodPolicy
 * 
 */
export type SodPolicy = $Result.DefaultSelection<Prisma.$SodPolicyPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model Organization
 * *
 *  * * Master Data **
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model DistributionCenter
 * 
 */
export type DistributionCenter = $Result.DefaultSelection<Prisma.$DistributionCenterPayload>
/**
 * Model ProductSKU
 * 
 */
export type ProductSKU = $Result.DefaultSelection<Prisma.$ProductSKUPayload>
/**
 * Model ClientAccount
 * 
 */
export type ClientAccount = $Result.DefaultSelection<Prisma.$ClientAccountPayload>
/**
 * Model SubscriptionPlan
 * 
 */
export type SubscriptionPlan = $Result.DefaultSelection<Prisma.$SubscriptionPlanPayload>
/**
 * Model ActiveSubscription
 * *
 *  * * Transactions & Operations **
 */
export type ActiveSubscription = $Result.DefaultSelection<Prisma.$ActiveSubscriptionPayload>
/**
 * Model CurrentInventory
 * 
 */
export type CurrentInventory = $Result.DefaultSelection<Prisma.$CurrentInventoryPayload>
/**
 * Model FulfillmentWave
 * 
 */
export type FulfillmentWave = $Result.DefaultSelection<Prisma.$FulfillmentWavePayload>
/**
 * Model ProjectEngagement
 * 
 */
export type ProjectEngagement = $Result.DefaultSelection<Prisma.$ProjectEngagementPayload>
/**
 * Model WorkHoursLog
 * 
 */
export type WorkHoursLog = $Result.DefaultSelection<Prisma.$WorkHoursLogPayload>
/**
 * Model StaffMember
 * 
 */
export type StaffMember = $Result.DefaultSelection<Prisma.$StaffMemberPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more WorkspaceUnits
 * const workspaceUnits = await prisma.workspaceUnit.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more WorkspaceUnits
   * const workspaceUnits = await prisma.workspaceUnit.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.workspaceUnit`: Exposes CRUD operations for the **WorkspaceUnit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkspaceUnits
    * const workspaceUnits = await prisma.workspaceUnit.findMany()
    * ```
    */
  get workspaceUnit(): Prisma.WorkspaceUnitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eRPUser`: Exposes CRUD operations for the **ERPUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ERPUsers
    * const eRPUsers = await prisma.eRPUser.findMany()
    * ```
    */
  get eRPUser(): Prisma.ERPUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sodPolicy`: Exposes CRUD operations for the **SodPolicy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SodPolicies
    * const sodPolicies = await prisma.sodPolicy.findMany()
    * ```
    */
  get sodPolicy(): Prisma.SodPolicyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.distributionCenter`: Exposes CRUD operations for the **DistributionCenter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DistributionCenters
    * const distributionCenters = await prisma.distributionCenter.findMany()
    * ```
    */
  get distributionCenter(): Prisma.DistributionCenterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productSKU`: Exposes CRUD operations for the **ProductSKU** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductSKUS
    * const productSKUS = await prisma.productSKU.findMany()
    * ```
    */
  get productSKU(): Prisma.ProductSKUDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clientAccount`: Exposes CRUD operations for the **ClientAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClientAccounts
    * const clientAccounts = await prisma.clientAccount.findMany()
    * ```
    */
  get clientAccount(): Prisma.ClientAccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscriptionPlan`: Exposes CRUD operations for the **SubscriptionPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubscriptionPlans
    * const subscriptionPlans = await prisma.subscriptionPlan.findMany()
    * ```
    */
  get subscriptionPlan(): Prisma.SubscriptionPlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activeSubscription`: Exposes CRUD operations for the **ActiveSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActiveSubscriptions
    * const activeSubscriptions = await prisma.activeSubscription.findMany()
    * ```
    */
  get activeSubscription(): Prisma.ActiveSubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.currentInventory`: Exposes CRUD operations for the **CurrentInventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CurrentInventories
    * const currentInventories = await prisma.currentInventory.findMany()
    * ```
    */
  get currentInventory(): Prisma.CurrentInventoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fulfillmentWave`: Exposes CRUD operations for the **FulfillmentWave** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FulfillmentWaves
    * const fulfillmentWaves = await prisma.fulfillmentWave.findMany()
    * ```
    */
  get fulfillmentWave(): Prisma.FulfillmentWaveDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.projectEngagement`: Exposes CRUD operations for the **ProjectEngagement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectEngagements
    * const projectEngagements = await prisma.projectEngagement.findMany()
    * ```
    */
  get projectEngagement(): Prisma.ProjectEngagementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workHoursLog`: Exposes CRUD operations for the **WorkHoursLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkHoursLogs
    * const workHoursLogs = await prisma.workHoursLog.findMany()
    * ```
    */
  get workHoursLog(): Prisma.WorkHoursLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staffMember`: Exposes CRUD operations for the **StaffMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffMembers
    * const staffMembers = await prisma.staffMember.findMany()
    * ```
    */
  get staffMember(): Prisma.StaffMemberDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    WorkspaceUnit: 'WorkspaceUnit',
    ERPUser: 'ERPUser',
    Role: 'Role',
    UserRole: 'UserRole',
    SodPolicy: 'SodPolicy',
    AuditLog: 'AuditLog',
    Organization: 'Organization',
    DistributionCenter: 'DistributionCenter',
    ProductSKU: 'ProductSKU',
    ClientAccount: 'ClientAccount',
    SubscriptionPlan: 'SubscriptionPlan',
    ActiveSubscription: 'ActiveSubscription',
    CurrentInventory: 'CurrentInventory',
    FulfillmentWave: 'FulfillmentWave',
    ProjectEngagement: 'ProjectEngagement',
    WorkHoursLog: 'WorkHoursLog',
    StaffMember: 'StaffMember'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "workspaceUnit" | "eRPUser" | "role" | "userRole" | "sodPolicy" | "auditLog" | "organization" | "distributionCenter" | "productSKU" | "clientAccount" | "subscriptionPlan" | "activeSubscription" | "currentInventory" | "fulfillmentWave" | "projectEngagement" | "workHoursLog" | "staffMember"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      WorkspaceUnit: {
        payload: Prisma.$WorkspaceUnitPayload<ExtArgs>
        fields: Prisma.WorkspaceUnitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceUnitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUnitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceUnitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUnitPayload>
          }
          findFirst: {
            args: Prisma.WorkspaceUnitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUnitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceUnitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUnitPayload>
          }
          findMany: {
            args: Prisma.WorkspaceUnitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUnitPayload>[]
          }
          create: {
            args: Prisma.WorkspaceUnitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUnitPayload>
          }
          createMany: {
            args: Prisma.WorkspaceUnitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspaceUnitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUnitPayload>[]
          }
          delete: {
            args: Prisma.WorkspaceUnitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUnitPayload>
          }
          update: {
            args: Prisma.WorkspaceUnitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUnitPayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceUnitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceUnitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkspaceUnitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUnitPayload>[]
          }
          upsert: {
            args: Prisma.WorkspaceUnitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceUnitPayload>
          }
          aggregate: {
            args: Prisma.WorkspaceUnitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspaceUnit>
          }
          groupBy: {
            args: Prisma.WorkspaceUnitGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceUnitGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceUnitCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceUnitCountAggregateOutputType> | number
          }
        }
      }
      ERPUser: {
        payload: Prisma.$ERPUserPayload<ExtArgs>
        fields: Prisma.ERPUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ERPUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ERPUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ERPUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ERPUserPayload>
          }
          findFirst: {
            args: Prisma.ERPUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ERPUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ERPUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ERPUserPayload>
          }
          findMany: {
            args: Prisma.ERPUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ERPUserPayload>[]
          }
          create: {
            args: Prisma.ERPUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ERPUserPayload>
          }
          createMany: {
            args: Prisma.ERPUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ERPUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ERPUserPayload>[]
          }
          delete: {
            args: Prisma.ERPUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ERPUserPayload>
          }
          update: {
            args: Prisma.ERPUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ERPUserPayload>
          }
          deleteMany: {
            args: Prisma.ERPUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ERPUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ERPUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ERPUserPayload>[]
          }
          upsert: {
            args: Prisma.ERPUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ERPUserPayload>
          }
          aggregate: {
            args: Prisma.ERPUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateERPUser>
          }
          groupBy: {
            args: Prisma.ERPUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<ERPUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.ERPUserCountArgs<ExtArgs>
            result: $Utils.Optional<ERPUserCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserRoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      SodPolicy: {
        payload: Prisma.$SodPolicyPayload<ExtArgs>
        fields: Prisma.SodPolicyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SodPolicyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SodPolicyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SodPolicyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SodPolicyPayload>
          }
          findFirst: {
            args: Prisma.SodPolicyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SodPolicyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SodPolicyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SodPolicyPayload>
          }
          findMany: {
            args: Prisma.SodPolicyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SodPolicyPayload>[]
          }
          create: {
            args: Prisma.SodPolicyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SodPolicyPayload>
          }
          createMany: {
            args: Prisma.SodPolicyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SodPolicyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SodPolicyPayload>[]
          }
          delete: {
            args: Prisma.SodPolicyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SodPolicyPayload>
          }
          update: {
            args: Prisma.SodPolicyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SodPolicyPayload>
          }
          deleteMany: {
            args: Prisma.SodPolicyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SodPolicyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SodPolicyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SodPolicyPayload>[]
          }
          upsert: {
            args: Prisma.SodPolicyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SodPolicyPayload>
          }
          aggregate: {
            args: Prisma.SodPolicyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSodPolicy>
          }
          groupBy: {
            args: Prisma.SodPolicyGroupByArgs<ExtArgs>
            result: $Utils.Optional<SodPolicyGroupByOutputType>[]
          }
          count: {
            args: Prisma.SodPolicyCountArgs<ExtArgs>
            result: $Utils.Optional<SodPolicyCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      DistributionCenter: {
        payload: Prisma.$DistributionCenterPayload<ExtArgs>
        fields: Prisma.DistributionCenterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DistributionCenterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionCenterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DistributionCenterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionCenterPayload>
          }
          findFirst: {
            args: Prisma.DistributionCenterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionCenterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DistributionCenterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionCenterPayload>
          }
          findMany: {
            args: Prisma.DistributionCenterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionCenterPayload>[]
          }
          create: {
            args: Prisma.DistributionCenterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionCenterPayload>
          }
          createMany: {
            args: Prisma.DistributionCenterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DistributionCenterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionCenterPayload>[]
          }
          delete: {
            args: Prisma.DistributionCenterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionCenterPayload>
          }
          update: {
            args: Prisma.DistributionCenterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionCenterPayload>
          }
          deleteMany: {
            args: Prisma.DistributionCenterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DistributionCenterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DistributionCenterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionCenterPayload>[]
          }
          upsert: {
            args: Prisma.DistributionCenterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionCenterPayload>
          }
          aggregate: {
            args: Prisma.DistributionCenterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDistributionCenter>
          }
          groupBy: {
            args: Prisma.DistributionCenterGroupByArgs<ExtArgs>
            result: $Utils.Optional<DistributionCenterGroupByOutputType>[]
          }
          count: {
            args: Prisma.DistributionCenterCountArgs<ExtArgs>
            result: $Utils.Optional<DistributionCenterCountAggregateOutputType> | number
          }
        }
      }
      ProductSKU: {
        payload: Prisma.$ProductSKUPayload<ExtArgs>
        fields: Prisma.ProductSKUFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductSKUFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSKUPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductSKUFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSKUPayload>
          }
          findFirst: {
            args: Prisma.ProductSKUFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSKUPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductSKUFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSKUPayload>
          }
          findMany: {
            args: Prisma.ProductSKUFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSKUPayload>[]
          }
          create: {
            args: Prisma.ProductSKUCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSKUPayload>
          }
          createMany: {
            args: Prisma.ProductSKUCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductSKUCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSKUPayload>[]
          }
          delete: {
            args: Prisma.ProductSKUDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSKUPayload>
          }
          update: {
            args: Prisma.ProductSKUUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSKUPayload>
          }
          deleteMany: {
            args: Prisma.ProductSKUDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductSKUUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductSKUUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSKUPayload>[]
          }
          upsert: {
            args: Prisma.ProductSKUUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSKUPayload>
          }
          aggregate: {
            args: Prisma.ProductSKUAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductSKU>
          }
          groupBy: {
            args: Prisma.ProductSKUGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductSKUGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductSKUCountArgs<ExtArgs>
            result: $Utils.Optional<ProductSKUCountAggregateOutputType> | number
          }
        }
      }
      ClientAccount: {
        payload: Prisma.$ClientAccountPayload<ExtArgs>
        fields: Prisma.ClientAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientAccountPayload>
          }
          findFirst: {
            args: Prisma.ClientAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientAccountPayload>
          }
          findMany: {
            args: Prisma.ClientAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientAccountPayload>[]
          }
          create: {
            args: Prisma.ClientAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientAccountPayload>
          }
          createMany: {
            args: Prisma.ClientAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientAccountPayload>[]
          }
          delete: {
            args: Prisma.ClientAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientAccountPayload>
          }
          update: {
            args: Prisma.ClientAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientAccountPayload>
          }
          deleteMany: {
            args: Prisma.ClientAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClientAccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientAccountPayload>[]
          }
          upsert: {
            args: Prisma.ClientAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientAccountPayload>
          }
          aggregate: {
            args: Prisma.ClientAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClientAccount>
          }
          groupBy: {
            args: Prisma.ClientAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientAccountCountArgs<ExtArgs>
            result: $Utils.Optional<ClientAccountCountAggregateOutputType> | number
          }
        }
      }
      SubscriptionPlan: {
        payload: Prisma.$SubscriptionPlanPayload<ExtArgs>
        fields: Prisma.SubscriptionPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          findMany: {
            args: Prisma.SubscriptionPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          create: {
            args: Prisma.SubscriptionPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          createMany: {
            args: Prisma.SubscriptionPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          update: {
            args: Prisma.SubscriptionPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionPlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscriptionPlan>
          }
          groupBy: {
            args: Prisma.SubscriptionPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionPlanCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionPlanCountAggregateOutputType> | number
          }
        }
      }
      ActiveSubscription: {
        payload: Prisma.$ActiveSubscriptionPayload<ExtArgs>
        fields: Prisma.ActiveSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActiveSubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActiveSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActiveSubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActiveSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.ActiveSubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActiveSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActiveSubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActiveSubscriptionPayload>
          }
          findMany: {
            args: Prisma.ActiveSubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActiveSubscriptionPayload>[]
          }
          create: {
            args: Prisma.ActiveSubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActiveSubscriptionPayload>
          }
          createMany: {
            args: Prisma.ActiveSubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActiveSubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActiveSubscriptionPayload>[]
          }
          delete: {
            args: Prisma.ActiveSubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActiveSubscriptionPayload>
          }
          update: {
            args: Prisma.ActiveSubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActiveSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.ActiveSubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActiveSubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActiveSubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActiveSubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.ActiveSubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActiveSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.ActiveSubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActiveSubscription>
          }
          groupBy: {
            args: Prisma.ActiveSubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActiveSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActiveSubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<ActiveSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      CurrentInventory: {
        payload: Prisma.$CurrentInventoryPayload<ExtArgs>
        fields: Prisma.CurrentInventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CurrentInventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrentInventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CurrentInventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrentInventoryPayload>
          }
          findFirst: {
            args: Prisma.CurrentInventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrentInventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CurrentInventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrentInventoryPayload>
          }
          findMany: {
            args: Prisma.CurrentInventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrentInventoryPayload>[]
          }
          create: {
            args: Prisma.CurrentInventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrentInventoryPayload>
          }
          createMany: {
            args: Prisma.CurrentInventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CurrentInventoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrentInventoryPayload>[]
          }
          delete: {
            args: Prisma.CurrentInventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrentInventoryPayload>
          }
          update: {
            args: Prisma.CurrentInventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrentInventoryPayload>
          }
          deleteMany: {
            args: Prisma.CurrentInventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CurrentInventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CurrentInventoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrentInventoryPayload>[]
          }
          upsert: {
            args: Prisma.CurrentInventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CurrentInventoryPayload>
          }
          aggregate: {
            args: Prisma.CurrentInventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCurrentInventory>
          }
          groupBy: {
            args: Prisma.CurrentInventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CurrentInventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CurrentInventoryCountArgs<ExtArgs>
            result: $Utils.Optional<CurrentInventoryCountAggregateOutputType> | number
          }
        }
      }
      FulfillmentWave: {
        payload: Prisma.$FulfillmentWavePayload<ExtArgs>
        fields: Prisma.FulfillmentWaveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FulfillmentWaveFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FulfillmentWavePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FulfillmentWaveFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FulfillmentWavePayload>
          }
          findFirst: {
            args: Prisma.FulfillmentWaveFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FulfillmentWavePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FulfillmentWaveFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FulfillmentWavePayload>
          }
          findMany: {
            args: Prisma.FulfillmentWaveFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FulfillmentWavePayload>[]
          }
          create: {
            args: Prisma.FulfillmentWaveCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FulfillmentWavePayload>
          }
          createMany: {
            args: Prisma.FulfillmentWaveCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FulfillmentWaveCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FulfillmentWavePayload>[]
          }
          delete: {
            args: Prisma.FulfillmentWaveDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FulfillmentWavePayload>
          }
          update: {
            args: Prisma.FulfillmentWaveUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FulfillmentWavePayload>
          }
          deleteMany: {
            args: Prisma.FulfillmentWaveDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FulfillmentWaveUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FulfillmentWaveUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FulfillmentWavePayload>[]
          }
          upsert: {
            args: Prisma.FulfillmentWaveUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FulfillmentWavePayload>
          }
          aggregate: {
            args: Prisma.FulfillmentWaveAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFulfillmentWave>
          }
          groupBy: {
            args: Prisma.FulfillmentWaveGroupByArgs<ExtArgs>
            result: $Utils.Optional<FulfillmentWaveGroupByOutputType>[]
          }
          count: {
            args: Prisma.FulfillmentWaveCountArgs<ExtArgs>
            result: $Utils.Optional<FulfillmentWaveCountAggregateOutputType> | number
          }
        }
      }
      ProjectEngagement: {
        payload: Prisma.$ProjectEngagementPayload<ExtArgs>
        fields: Prisma.ProjectEngagementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectEngagementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectEngagementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectEngagementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectEngagementPayload>
          }
          findFirst: {
            args: Prisma.ProjectEngagementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectEngagementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectEngagementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectEngagementPayload>
          }
          findMany: {
            args: Prisma.ProjectEngagementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectEngagementPayload>[]
          }
          create: {
            args: Prisma.ProjectEngagementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectEngagementPayload>
          }
          createMany: {
            args: Prisma.ProjectEngagementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectEngagementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectEngagementPayload>[]
          }
          delete: {
            args: Prisma.ProjectEngagementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectEngagementPayload>
          }
          update: {
            args: Prisma.ProjectEngagementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectEngagementPayload>
          }
          deleteMany: {
            args: Prisma.ProjectEngagementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectEngagementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectEngagementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectEngagementPayload>[]
          }
          upsert: {
            args: Prisma.ProjectEngagementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectEngagementPayload>
          }
          aggregate: {
            args: Prisma.ProjectEngagementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectEngagement>
          }
          groupBy: {
            args: Prisma.ProjectEngagementGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectEngagementGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectEngagementCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectEngagementCountAggregateOutputType> | number
          }
        }
      }
      WorkHoursLog: {
        payload: Prisma.$WorkHoursLogPayload<ExtArgs>
        fields: Prisma.WorkHoursLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkHoursLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHoursLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkHoursLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHoursLogPayload>
          }
          findFirst: {
            args: Prisma.WorkHoursLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHoursLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkHoursLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHoursLogPayload>
          }
          findMany: {
            args: Prisma.WorkHoursLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHoursLogPayload>[]
          }
          create: {
            args: Prisma.WorkHoursLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHoursLogPayload>
          }
          createMany: {
            args: Prisma.WorkHoursLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkHoursLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHoursLogPayload>[]
          }
          delete: {
            args: Prisma.WorkHoursLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHoursLogPayload>
          }
          update: {
            args: Prisma.WorkHoursLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHoursLogPayload>
          }
          deleteMany: {
            args: Prisma.WorkHoursLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkHoursLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkHoursLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHoursLogPayload>[]
          }
          upsert: {
            args: Prisma.WorkHoursLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkHoursLogPayload>
          }
          aggregate: {
            args: Prisma.WorkHoursLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkHoursLog>
          }
          groupBy: {
            args: Prisma.WorkHoursLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkHoursLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkHoursLogCountArgs<ExtArgs>
            result: $Utils.Optional<WorkHoursLogCountAggregateOutputType> | number
          }
        }
      }
      StaffMember: {
        payload: Prisma.$StaffMemberPayload<ExtArgs>
        fields: Prisma.StaffMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>
          }
          findFirst: {
            args: Prisma.StaffMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>
          }
          findMany: {
            args: Prisma.StaffMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>[]
          }
          create: {
            args: Prisma.StaffMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>
          }
          createMany: {
            args: Prisma.StaffMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>[]
          }
          delete: {
            args: Prisma.StaffMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>
          }
          update: {
            args: Prisma.StaffMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>
          }
          deleteMany: {
            args: Prisma.StaffMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StaffMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>[]
          }
          upsert: {
            args: Prisma.StaffMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>
          }
          aggregate: {
            args: Prisma.StaffMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffMember>
          }
          groupBy: {
            args: Prisma.StaffMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffMemberCountArgs<ExtArgs>
            result: $Utils.Optional<StaffMemberCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    workspaceUnit?: WorkspaceUnitOmit
    eRPUser?: ERPUserOmit
    role?: RoleOmit
    userRole?: UserRoleOmit
    sodPolicy?: SodPolicyOmit
    auditLog?: AuditLogOmit
    organization?: OrganizationOmit
    distributionCenter?: DistributionCenterOmit
    productSKU?: ProductSKUOmit
    clientAccount?: ClientAccountOmit
    subscriptionPlan?: SubscriptionPlanOmit
    activeSubscription?: ActiveSubscriptionOmit
    currentInventory?: CurrentInventoryOmit
    fulfillmentWave?: FulfillmentWaveOmit
    projectEngagement?: ProjectEngagementOmit
    workHoursLog?: WorkHoursLogOmit
    staffMember?: StaffMemberOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DistributionCenterCountOutputType
   */

  export type DistributionCenterCountOutputType = {
    inventory: number
    pickWaves: number
  }

  export type DistributionCenterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | DistributionCenterCountOutputTypeCountInventoryArgs
    pickWaves?: boolean | DistributionCenterCountOutputTypeCountPickWavesArgs
  }

  // Custom InputTypes
  /**
   * DistributionCenterCountOutputType without action
   */
  export type DistributionCenterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenterCountOutputType
     */
    select?: DistributionCenterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DistributionCenterCountOutputType without action
   */
  export type DistributionCenterCountOutputTypeCountInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurrentInventoryWhereInput
  }

  /**
   * DistributionCenterCountOutputType without action
   */
  export type DistributionCenterCountOutputTypeCountPickWavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FulfillmentWaveWhereInput
  }


  /**
   * Count Type ProductSKUCountOutputType
   */

  export type ProductSKUCountOutputType = {
    inventory: number
  }

  export type ProductSKUCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | ProductSKUCountOutputTypeCountInventoryArgs
  }

  // Custom InputTypes
  /**
   * ProductSKUCountOutputType without action
   */
  export type ProductSKUCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKUCountOutputType
     */
    select?: ProductSKUCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductSKUCountOutputType without action
   */
  export type ProductSKUCountOutputTypeCountInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurrentInventoryWhereInput
  }


  /**
   * Count Type ClientAccountCountOutputType
   */

  export type ClientAccountCountOutputType = {
    subscriptions: number
  }

  export type ClientAccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | ClientAccountCountOutputTypeCountSubscriptionsArgs
  }

  // Custom InputTypes
  /**
   * ClientAccountCountOutputType without action
   */
  export type ClientAccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccountCountOutputType
     */
    select?: ClientAccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientAccountCountOutputType without action
   */
  export type ClientAccountCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActiveSubscriptionWhereInput
  }


  /**
   * Count Type SubscriptionPlanCountOutputType
   */

  export type SubscriptionPlanCountOutputType = {
    subscriptions: number
  }

  export type SubscriptionPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | SubscriptionPlanCountOutputTypeCountSubscriptionsArgs
  }

  // Custom InputTypes
  /**
   * SubscriptionPlanCountOutputType without action
   */
  export type SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlanCountOutputType
     */
    select?: SubscriptionPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubscriptionPlanCountOutputType without action
   */
  export type SubscriptionPlanCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActiveSubscriptionWhereInput
  }


  /**
   * Count Type ProjectEngagementCountOutputType
   */

  export type ProjectEngagementCountOutputType = {
    timesheets: number
  }

  export type ProjectEngagementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timesheets?: boolean | ProjectEngagementCountOutputTypeCountTimesheetsArgs
  }

  // Custom InputTypes
  /**
   * ProjectEngagementCountOutputType without action
   */
  export type ProjectEngagementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagementCountOutputType
     */
    select?: ProjectEngagementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectEngagementCountOutputType without action
   */
  export type ProjectEngagementCountOutputTypeCountTimesheetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkHoursLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model WorkspaceUnit
   */

  export type AggregateWorkspaceUnit = {
    _count: WorkspaceUnitCountAggregateOutputType | null
    _min: WorkspaceUnitMinAggregateOutputType | null
    _max: WorkspaceUnitMaxAggregateOutputType | null
  }

  export type WorkspaceUnitMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceUnitMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkspaceUnitCountAggregateOutputType = {
    id: number
    code: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkspaceUnitMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceUnitMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkspaceUnitCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkspaceUnitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceUnit to aggregate.
     */
    where?: WorkspaceUnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceUnits to fetch.
     */
    orderBy?: WorkspaceUnitOrderByWithRelationInput | WorkspaceUnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceUnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceUnits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceUnits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkspaceUnits
    **/
    _count?: true | WorkspaceUnitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceUnitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceUnitMaxAggregateInputType
  }

  export type GetWorkspaceUnitAggregateType<T extends WorkspaceUnitAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspaceUnit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspaceUnit[P]>
      : GetScalarType<T[P], AggregateWorkspaceUnit[P]>
  }




  export type WorkspaceUnitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceUnitWhereInput
    orderBy?: WorkspaceUnitOrderByWithAggregationInput | WorkspaceUnitOrderByWithAggregationInput[]
    by: WorkspaceUnitScalarFieldEnum[] | WorkspaceUnitScalarFieldEnum
    having?: WorkspaceUnitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceUnitCountAggregateInputType | true
    _min?: WorkspaceUnitMinAggregateInputType
    _max?: WorkspaceUnitMaxAggregateInputType
  }

  export type WorkspaceUnitGroupByOutputType = {
    id: string
    code: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: WorkspaceUnitCountAggregateOutputType | null
    _min: WorkspaceUnitMinAggregateOutputType | null
    _max: WorkspaceUnitMaxAggregateOutputType | null
  }

  type GetWorkspaceUnitGroupByPayload<T extends WorkspaceUnitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceUnitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceUnitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceUnitGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceUnitGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceUnitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["workspaceUnit"]>

  export type WorkspaceUnitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["workspaceUnit"]>

  export type WorkspaceUnitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["workspaceUnit"]>

  export type WorkspaceUnitSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkspaceUnitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["workspaceUnit"]>

  export type $WorkspaceUnitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkspaceUnit"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workspaceUnit"]>
    composites: {}
  }

  type WorkspaceUnitGetPayload<S extends boolean | null | undefined | WorkspaceUnitDefaultArgs> = $Result.GetResult<Prisma.$WorkspaceUnitPayload, S>

  type WorkspaceUnitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkspaceUnitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkspaceUnitCountAggregateInputType | true
    }

  export interface WorkspaceUnitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkspaceUnit'], meta: { name: 'WorkspaceUnit' } }
    /**
     * Find zero or one WorkspaceUnit that matches the filter.
     * @param {WorkspaceUnitFindUniqueArgs} args - Arguments to find a WorkspaceUnit
     * @example
     * // Get one WorkspaceUnit
     * const workspaceUnit = await prisma.workspaceUnit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceUnitFindUniqueArgs>(args: SelectSubset<T, WorkspaceUnitFindUniqueArgs<ExtArgs>>): Prisma__WorkspaceUnitClient<$Result.GetResult<Prisma.$WorkspaceUnitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkspaceUnit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspaceUnitFindUniqueOrThrowArgs} args - Arguments to find a WorkspaceUnit
     * @example
     * // Get one WorkspaceUnit
     * const workspaceUnit = await prisma.workspaceUnit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceUnitFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspaceUnitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspaceUnitClient<$Result.GetResult<Prisma.$WorkspaceUnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceUnit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUnitFindFirstArgs} args - Arguments to find a WorkspaceUnit
     * @example
     * // Get one WorkspaceUnit
     * const workspaceUnit = await prisma.workspaceUnit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceUnitFindFirstArgs>(args?: SelectSubset<T, WorkspaceUnitFindFirstArgs<ExtArgs>>): Prisma__WorkspaceUnitClient<$Result.GetResult<Prisma.$WorkspaceUnitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceUnit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUnitFindFirstOrThrowArgs} args - Arguments to find a WorkspaceUnit
     * @example
     * // Get one WorkspaceUnit
     * const workspaceUnit = await prisma.workspaceUnit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceUnitFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspaceUnitFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspaceUnitClient<$Result.GetResult<Prisma.$WorkspaceUnitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkspaceUnits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUnitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkspaceUnits
     * const workspaceUnits = await prisma.workspaceUnit.findMany()
     * 
     * // Get first 10 WorkspaceUnits
     * const workspaceUnits = await prisma.workspaceUnit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspaceUnitWithIdOnly = await prisma.workspaceUnit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkspaceUnitFindManyArgs>(args?: SelectSubset<T, WorkspaceUnitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceUnitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkspaceUnit.
     * @param {WorkspaceUnitCreateArgs} args - Arguments to create a WorkspaceUnit.
     * @example
     * // Create one WorkspaceUnit
     * const WorkspaceUnit = await prisma.workspaceUnit.create({
     *   data: {
     *     // ... data to create a WorkspaceUnit
     *   }
     * })
     * 
     */
    create<T extends WorkspaceUnitCreateArgs>(args: SelectSubset<T, WorkspaceUnitCreateArgs<ExtArgs>>): Prisma__WorkspaceUnitClient<$Result.GetResult<Prisma.$WorkspaceUnitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkspaceUnits.
     * @param {WorkspaceUnitCreateManyArgs} args - Arguments to create many WorkspaceUnits.
     * @example
     * // Create many WorkspaceUnits
     * const workspaceUnit = await prisma.workspaceUnit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspaceUnitCreateManyArgs>(args?: SelectSubset<T, WorkspaceUnitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkspaceUnits and returns the data saved in the database.
     * @param {WorkspaceUnitCreateManyAndReturnArgs} args - Arguments to create many WorkspaceUnits.
     * @example
     * // Create many WorkspaceUnits
     * const workspaceUnit = await prisma.workspaceUnit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkspaceUnits and only return the `id`
     * const workspaceUnitWithIdOnly = await prisma.workspaceUnit.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspaceUnitCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspaceUnitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceUnitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkspaceUnit.
     * @param {WorkspaceUnitDeleteArgs} args - Arguments to delete one WorkspaceUnit.
     * @example
     * // Delete one WorkspaceUnit
     * const WorkspaceUnit = await prisma.workspaceUnit.delete({
     *   where: {
     *     // ... filter to delete one WorkspaceUnit
     *   }
     * })
     * 
     */
    delete<T extends WorkspaceUnitDeleteArgs>(args: SelectSubset<T, WorkspaceUnitDeleteArgs<ExtArgs>>): Prisma__WorkspaceUnitClient<$Result.GetResult<Prisma.$WorkspaceUnitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkspaceUnit.
     * @param {WorkspaceUnitUpdateArgs} args - Arguments to update one WorkspaceUnit.
     * @example
     * // Update one WorkspaceUnit
     * const workspaceUnit = await prisma.workspaceUnit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspaceUnitUpdateArgs>(args: SelectSubset<T, WorkspaceUnitUpdateArgs<ExtArgs>>): Prisma__WorkspaceUnitClient<$Result.GetResult<Prisma.$WorkspaceUnitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkspaceUnits.
     * @param {WorkspaceUnitDeleteManyArgs} args - Arguments to filter WorkspaceUnits to delete.
     * @example
     * // Delete a few WorkspaceUnits
     * const { count } = await prisma.workspaceUnit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspaceUnitDeleteManyArgs>(args?: SelectSubset<T, WorkspaceUnitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceUnits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUnitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkspaceUnits
     * const workspaceUnit = await prisma.workspaceUnit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspaceUnitUpdateManyArgs>(args: SelectSubset<T, WorkspaceUnitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceUnits and returns the data updated in the database.
     * @param {WorkspaceUnitUpdateManyAndReturnArgs} args - Arguments to update many WorkspaceUnits.
     * @example
     * // Update many WorkspaceUnits
     * const workspaceUnit = await prisma.workspaceUnit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkspaceUnits and only return the `id`
     * const workspaceUnitWithIdOnly = await prisma.workspaceUnit.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkspaceUnitUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkspaceUnitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceUnitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkspaceUnit.
     * @param {WorkspaceUnitUpsertArgs} args - Arguments to update or create a WorkspaceUnit.
     * @example
     * // Update or create a WorkspaceUnit
     * const workspaceUnit = await prisma.workspaceUnit.upsert({
     *   create: {
     *     // ... data to create a WorkspaceUnit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkspaceUnit we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceUnitUpsertArgs>(args: SelectSubset<T, WorkspaceUnitUpsertArgs<ExtArgs>>): Prisma__WorkspaceUnitClient<$Result.GetResult<Prisma.$WorkspaceUnitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkspaceUnits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUnitCountArgs} args - Arguments to filter WorkspaceUnits to count.
     * @example
     * // Count the number of WorkspaceUnits
     * const count = await prisma.workspaceUnit.count({
     *   where: {
     *     // ... the filter for the WorkspaceUnits we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceUnitCountArgs>(
      args?: Subset<T, WorkspaceUnitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceUnitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkspaceUnit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUnitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceUnitAggregateArgs>(args: Subset<T, WorkspaceUnitAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceUnitAggregateType<T>>

    /**
     * Group by WorkspaceUnit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUnitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceUnitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceUnitGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceUnitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceUnitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceUnitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkspaceUnit model
   */
  readonly fields: WorkspaceUnitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkspaceUnit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceUnitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkspaceUnit model
   */
  interface WorkspaceUnitFieldRefs {
    readonly id: FieldRef<"WorkspaceUnit", 'String'>
    readonly code: FieldRef<"WorkspaceUnit", 'String'>
    readonly name: FieldRef<"WorkspaceUnit", 'String'>
    readonly createdAt: FieldRef<"WorkspaceUnit", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkspaceUnit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkspaceUnit findUnique
   */
  export type WorkspaceUnitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUnit
     */
    select?: WorkspaceUnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceUnit
     */
    omit?: WorkspaceUnitOmit<ExtArgs> | null
    /**
     * Filter, which WorkspaceUnit to fetch.
     */
    where: WorkspaceUnitWhereUniqueInput
  }

  /**
   * WorkspaceUnit findUniqueOrThrow
   */
  export type WorkspaceUnitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUnit
     */
    select?: WorkspaceUnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceUnit
     */
    omit?: WorkspaceUnitOmit<ExtArgs> | null
    /**
     * Filter, which WorkspaceUnit to fetch.
     */
    where: WorkspaceUnitWhereUniqueInput
  }

  /**
   * WorkspaceUnit findFirst
   */
  export type WorkspaceUnitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUnit
     */
    select?: WorkspaceUnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceUnit
     */
    omit?: WorkspaceUnitOmit<ExtArgs> | null
    /**
     * Filter, which WorkspaceUnit to fetch.
     */
    where?: WorkspaceUnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceUnits to fetch.
     */
    orderBy?: WorkspaceUnitOrderByWithRelationInput | WorkspaceUnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceUnits.
     */
    cursor?: WorkspaceUnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceUnits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceUnits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceUnits.
     */
    distinct?: WorkspaceUnitScalarFieldEnum | WorkspaceUnitScalarFieldEnum[]
  }

  /**
   * WorkspaceUnit findFirstOrThrow
   */
  export type WorkspaceUnitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUnit
     */
    select?: WorkspaceUnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceUnit
     */
    omit?: WorkspaceUnitOmit<ExtArgs> | null
    /**
     * Filter, which WorkspaceUnit to fetch.
     */
    where?: WorkspaceUnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceUnits to fetch.
     */
    orderBy?: WorkspaceUnitOrderByWithRelationInput | WorkspaceUnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceUnits.
     */
    cursor?: WorkspaceUnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceUnits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceUnits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceUnits.
     */
    distinct?: WorkspaceUnitScalarFieldEnum | WorkspaceUnitScalarFieldEnum[]
  }

  /**
   * WorkspaceUnit findMany
   */
  export type WorkspaceUnitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUnit
     */
    select?: WorkspaceUnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceUnit
     */
    omit?: WorkspaceUnitOmit<ExtArgs> | null
    /**
     * Filter, which WorkspaceUnits to fetch.
     */
    where?: WorkspaceUnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceUnits to fetch.
     */
    orderBy?: WorkspaceUnitOrderByWithRelationInput | WorkspaceUnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkspaceUnits.
     */
    cursor?: WorkspaceUnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceUnits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceUnits.
     */
    skip?: number
    distinct?: WorkspaceUnitScalarFieldEnum | WorkspaceUnitScalarFieldEnum[]
  }

  /**
   * WorkspaceUnit create
   */
  export type WorkspaceUnitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUnit
     */
    select?: WorkspaceUnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceUnit
     */
    omit?: WorkspaceUnitOmit<ExtArgs> | null
    /**
     * The data needed to create a WorkspaceUnit.
     */
    data: XOR<WorkspaceUnitCreateInput, WorkspaceUnitUncheckedCreateInput>
  }

  /**
   * WorkspaceUnit createMany
   */
  export type WorkspaceUnitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkspaceUnits.
     */
    data: WorkspaceUnitCreateManyInput | WorkspaceUnitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkspaceUnit createManyAndReturn
   */
  export type WorkspaceUnitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUnit
     */
    select?: WorkspaceUnitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceUnit
     */
    omit?: WorkspaceUnitOmit<ExtArgs> | null
    /**
     * The data used to create many WorkspaceUnits.
     */
    data: WorkspaceUnitCreateManyInput | WorkspaceUnitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkspaceUnit update
   */
  export type WorkspaceUnitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUnit
     */
    select?: WorkspaceUnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceUnit
     */
    omit?: WorkspaceUnitOmit<ExtArgs> | null
    /**
     * The data needed to update a WorkspaceUnit.
     */
    data: XOR<WorkspaceUnitUpdateInput, WorkspaceUnitUncheckedUpdateInput>
    /**
     * Choose, which WorkspaceUnit to update.
     */
    where: WorkspaceUnitWhereUniqueInput
  }

  /**
   * WorkspaceUnit updateMany
   */
  export type WorkspaceUnitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkspaceUnits.
     */
    data: XOR<WorkspaceUnitUpdateManyMutationInput, WorkspaceUnitUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceUnits to update
     */
    where?: WorkspaceUnitWhereInput
    /**
     * Limit how many WorkspaceUnits to update.
     */
    limit?: number
  }

  /**
   * WorkspaceUnit updateManyAndReturn
   */
  export type WorkspaceUnitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUnit
     */
    select?: WorkspaceUnitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceUnit
     */
    omit?: WorkspaceUnitOmit<ExtArgs> | null
    /**
     * The data used to update WorkspaceUnits.
     */
    data: XOR<WorkspaceUnitUpdateManyMutationInput, WorkspaceUnitUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceUnits to update
     */
    where?: WorkspaceUnitWhereInput
    /**
     * Limit how many WorkspaceUnits to update.
     */
    limit?: number
  }

  /**
   * WorkspaceUnit upsert
   */
  export type WorkspaceUnitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUnit
     */
    select?: WorkspaceUnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceUnit
     */
    omit?: WorkspaceUnitOmit<ExtArgs> | null
    /**
     * The filter to search for the WorkspaceUnit to update in case it exists.
     */
    where: WorkspaceUnitWhereUniqueInput
    /**
     * In case the WorkspaceUnit found by the `where` argument doesn't exist, create a new WorkspaceUnit with this data.
     */
    create: XOR<WorkspaceUnitCreateInput, WorkspaceUnitUncheckedCreateInput>
    /**
     * In case the WorkspaceUnit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceUnitUpdateInput, WorkspaceUnitUncheckedUpdateInput>
  }

  /**
   * WorkspaceUnit delete
   */
  export type WorkspaceUnitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUnit
     */
    select?: WorkspaceUnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceUnit
     */
    omit?: WorkspaceUnitOmit<ExtArgs> | null
    /**
     * Filter which WorkspaceUnit to delete.
     */
    where: WorkspaceUnitWhereUniqueInput
  }

  /**
   * WorkspaceUnit deleteMany
   */
  export type WorkspaceUnitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceUnits to delete
     */
    where?: WorkspaceUnitWhereInput
    /**
     * Limit how many WorkspaceUnits to delete.
     */
    limit?: number
  }

  /**
   * WorkspaceUnit without action
   */
  export type WorkspaceUnitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceUnit
     */
    select?: WorkspaceUnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceUnit
     */
    omit?: WorkspaceUnitOmit<ExtArgs> | null
  }


  /**
   * Model ERPUser
   */

  export type AggregateERPUser = {
    _count: ERPUserCountAggregateOutputType | null
    _min: ERPUserMinAggregateOutputType | null
    _max: ERPUserMaxAggregateOutputType | null
  }

  export type ERPUserMinAggregateOutputType = {
    id: string | null
    tenant_id: string | null
    email: string | null
    role: string | null
    passwordHash: string | null
    immutable: boolean | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ERPUserMaxAggregateOutputType = {
    id: string | null
    tenant_id: string | null
    email: string | null
    role: string | null
    passwordHash: string | null
    immutable: boolean | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ERPUserCountAggregateOutputType = {
    id: number
    tenant_id: number
    email: number
    role: number
    passwordHash: number
    immutable: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ERPUserMinAggregateInputType = {
    id?: true
    tenant_id?: true
    email?: true
    role?: true
    passwordHash?: true
    immutable?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ERPUserMaxAggregateInputType = {
    id?: true
    tenant_id?: true
    email?: true
    role?: true
    passwordHash?: true
    immutable?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ERPUserCountAggregateInputType = {
    id?: true
    tenant_id?: true
    email?: true
    role?: true
    passwordHash?: true
    immutable?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ERPUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ERPUser to aggregate.
     */
    where?: ERPUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ERPUsers to fetch.
     */
    orderBy?: ERPUserOrderByWithRelationInput | ERPUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ERPUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ERPUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ERPUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ERPUsers
    **/
    _count?: true | ERPUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ERPUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ERPUserMaxAggregateInputType
  }

  export type GetERPUserAggregateType<T extends ERPUserAggregateArgs> = {
        [P in keyof T & keyof AggregateERPUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateERPUser[P]>
      : GetScalarType<T[P], AggregateERPUser[P]>
  }




  export type ERPUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ERPUserWhereInput
    orderBy?: ERPUserOrderByWithAggregationInput | ERPUserOrderByWithAggregationInput[]
    by: ERPUserScalarFieldEnum[] | ERPUserScalarFieldEnum
    having?: ERPUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ERPUserCountAggregateInputType | true
    _min?: ERPUserMinAggregateInputType
    _max?: ERPUserMaxAggregateInputType
  }

  export type ERPUserGroupByOutputType = {
    id: string
    tenant_id: string
    email: string
    role: string
    passwordHash: string | null
    immutable: boolean
    status: string
    createdAt: Date
    updatedAt: Date
    _count: ERPUserCountAggregateOutputType | null
    _min: ERPUserMinAggregateOutputType | null
    _max: ERPUserMaxAggregateOutputType | null
  }

  type GetERPUserGroupByPayload<T extends ERPUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ERPUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ERPUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ERPUserGroupByOutputType[P]>
            : GetScalarType<T[P], ERPUserGroupByOutputType[P]>
        }
      >
    >


  export type ERPUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenant_id?: boolean
    email?: boolean
    role?: boolean
    passwordHash?: boolean
    immutable?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["eRPUser"]>

  export type ERPUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenant_id?: boolean
    email?: boolean
    role?: boolean
    passwordHash?: boolean
    immutable?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["eRPUser"]>

  export type ERPUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenant_id?: boolean
    email?: boolean
    role?: boolean
    passwordHash?: boolean
    immutable?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["eRPUser"]>

  export type ERPUserSelectScalar = {
    id?: boolean
    tenant_id?: boolean
    email?: boolean
    role?: boolean
    passwordHash?: boolean
    immutable?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ERPUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenant_id" | "email" | "role" | "passwordHash" | "immutable" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["eRPUser"]>

  export type $ERPUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ERPUser"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenant_id: string
      email: string
      role: string
      passwordHash: string | null
      immutable: boolean
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["eRPUser"]>
    composites: {}
  }

  type ERPUserGetPayload<S extends boolean | null | undefined | ERPUserDefaultArgs> = $Result.GetResult<Prisma.$ERPUserPayload, S>

  type ERPUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ERPUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ERPUserCountAggregateInputType | true
    }

  export interface ERPUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ERPUser'], meta: { name: 'ERPUser' } }
    /**
     * Find zero or one ERPUser that matches the filter.
     * @param {ERPUserFindUniqueArgs} args - Arguments to find a ERPUser
     * @example
     * // Get one ERPUser
     * const eRPUser = await prisma.eRPUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ERPUserFindUniqueArgs>(args: SelectSubset<T, ERPUserFindUniqueArgs<ExtArgs>>): Prisma__ERPUserClient<$Result.GetResult<Prisma.$ERPUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ERPUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ERPUserFindUniqueOrThrowArgs} args - Arguments to find a ERPUser
     * @example
     * // Get one ERPUser
     * const eRPUser = await prisma.eRPUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ERPUserFindUniqueOrThrowArgs>(args: SelectSubset<T, ERPUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ERPUserClient<$Result.GetResult<Prisma.$ERPUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ERPUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ERPUserFindFirstArgs} args - Arguments to find a ERPUser
     * @example
     * // Get one ERPUser
     * const eRPUser = await prisma.eRPUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ERPUserFindFirstArgs>(args?: SelectSubset<T, ERPUserFindFirstArgs<ExtArgs>>): Prisma__ERPUserClient<$Result.GetResult<Prisma.$ERPUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ERPUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ERPUserFindFirstOrThrowArgs} args - Arguments to find a ERPUser
     * @example
     * // Get one ERPUser
     * const eRPUser = await prisma.eRPUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ERPUserFindFirstOrThrowArgs>(args?: SelectSubset<T, ERPUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__ERPUserClient<$Result.GetResult<Prisma.$ERPUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ERPUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ERPUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ERPUsers
     * const eRPUsers = await prisma.eRPUser.findMany()
     * 
     * // Get first 10 ERPUsers
     * const eRPUsers = await prisma.eRPUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eRPUserWithIdOnly = await prisma.eRPUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ERPUserFindManyArgs>(args?: SelectSubset<T, ERPUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ERPUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ERPUser.
     * @param {ERPUserCreateArgs} args - Arguments to create a ERPUser.
     * @example
     * // Create one ERPUser
     * const ERPUser = await prisma.eRPUser.create({
     *   data: {
     *     // ... data to create a ERPUser
     *   }
     * })
     * 
     */
    create<T extends ERPUserCreateArgs>(args: SelectSubset<T, ERPUserCreateArgs<ExtArgs>>): Prisma__ERPUserClient<$Result.GetResult<Prisma.$ERPUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ERPUsers.
     * @param {ERPUserCreateManyArgs} args - Arguments to create many ERPUsers.
     * @example
     * // Create many ERPUsers
     * const eRPUser = await prisma.eRPUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ERPUserCreateManyArgs>(args?: SelectSubset<T, ERPUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ERPUsers and returns the data saved in the database.
     * @param {ERPUserCreateManyAndReturnArgs} args - Arguments to create many ERPUsers.
     * @example
     * // Create many ERPUsers
     * const eRPUser = await prisma.eRPUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ERPUsers and only return the `id`
     * const eRPUserWithIdOnly = await prisma.eRPUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ERPUserCreateManyAndReturnArgs>(args?: SelectSubset<T, ERPUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ERPUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ERPUser.
     * @param {ERPUserDeleteArgs} args - Arguments to delete one ERPUser.
     * @example
     * // Delete one ERPUser
     * const ERPUser = await prisma.eRPUser.delete({
     *   where: {
     *     // ... filter to delete one ERPUser
     *   }
     * })
     * 
     */
    delete<T extends ERPUserDeleteArgs>(args: SelectSubset<T, ERPUserDeleteArgs<ExtArgs>>): Prisma__ERPUserClient<$Result.GetResult<Prisma.$ERPUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ERPUser.
     * @param {ERPUserUpdateArgs} args - Arguments to update one ERPUser.
     * @example
     * // Update one ERPUser
     * const eRPUser = await prisma.eRPUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ERPUserUpdateArgs>(args: SelectSubset<T, ERPUserUpdateArgs<ExtArgs>>): Prisma__ERPUserClient<$Result.GetResult<Prisma.$ERPUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ERPUsers.
     * @param {ERPUserDeleteManyArgs} args - Arguments to filter ERPUsers to delete.
     * @example
     * // Delete a few ERPUsers
     * const { count } = await prisma.eRPUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ERPUserDeleteManyArgs>(args?: SelectSubset<T, ERPUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ERPUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ERPUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ERPUsers
     * const eRPUser = await prisma.eRPUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ERPUserUpdateManyArgs>(args: SelectSubset<T, ERPUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ERPUsers and returns the data updated in the database.
     * @param {ERPUserUpdateManyAndReturnArgs} args - Arguments to update many ERPUsers.
     * @example
     * // Update many ERPUsers
     * const eRPUser = await prisma.eRPUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ERPUsers and only return the `id`
     * const eRPUserWithIdOnly = await prisma.eRPUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ERPUserUpdateManyAndReturnArgs>(args: SelectSubset<T, ERPUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ERPUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ERPUser.
     * @param {ERPUserUpsertArgs} args - Arguments to update or create a ERPUser.
     * @example
     * // Update or create a ERPUser
     * const eRPUser = await prisma.eRPUser.upsert({
     *   create: {
     *     // ... data to create a ERPUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ERPUser we want to update
     *   }
     * })
     */
    upsert<T extends ERPUserUpsertArgs>(args: SelectSubset<T, ERPUserUpsertArgs<ExtArgs>>): Prisma__ERPUserClient<$Result.GetResult<Prisma.$ERPUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ERPUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ERPUserCountArgs} args - Arguments to filter ERPUsers to count.
     * @example
     * // Count the number of ERPUsers
     * const count = await prisma.eRPUser.count({
     *   where: {
     *     // ... the filter for the ERPUsers we want to count
     *   }
     * })
    **/
    count<T extends ERPUserCountArgs>(
      args?: Subset<T, ERPUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ERPUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ERPUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ERPUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ERPUserAggregateArgs>(args: Subset<T, ERPUserAggregateArgs>): Prisma.PrismaPromise<GetERPUserAggregateType<T>>

    /**
     * Group by ERPUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ERPUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ERPUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ERPUserGroupByArgs['orderBy'] }
        : { orderBy?: ERPUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ERPUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetERPUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ERPUser model
   */
  readonly fields: ERPUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ERPUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ERPUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ERPUser model
   */
  interface ERPUserFieldRefs {
    readonly id: FieldRef<"ERPUser", 'String'>
    readonly tenant_id: FieldRef<"ERPUser", 'String'>
    readonly email: FieldRef<"ERPUser", 'String'>
    readonly role: FieldRef<"ERPUser", 'String'>
    readonly passwordHash: FieldRef<"ERPUser", 'String'>
    readonly immutable: FieldRef<"ERPUser", 'Boolean'>
    readonly status: FieldRef<"ERPUser", 'String'>
    readonly createdAt: FieldRef<"ERPUser", 'DateTime'>
    readonly updatedAt: FieldRef<"ERPUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ERPUser findUnique
   */
  export type ERPUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ERPUser
     */
    select?: ERPUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ERPUser
     */
    omit?: ERPUserOmit<ExtArgs> | null
    /**
     * Filter, which ERPUser to fetch.
     */
    where: ERPUserWhereUniqueInput
  }

  /**
   * ERPUser findUniqueOrThrow
   */
  export type ERPUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ERPUser
     */
    select?: ERPUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ERPUser
     */
    omit?: ERPUserOmit<ExtArgs> | null
    /**
     * Filter, which ERPUser to fetch.
     */
    where: ERPUserWhereUniqueInput
  }

  /**
   * ERPUser findFirst
   */
  export type ERPUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ERPUser
     */
    select?: ERPUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ERPUser
     */
    omit?: ERPUserOmit<ExtArgs> | null
    /**
     * Filter, which ERPUser to fetch.
     */
    where?: ERPUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ERPUsers to fetch.
     */
    orderBy?: ERPUserOrderByWithRelationInput | ERPUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ERPUsers.
     */
    cursor?: ERPUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ERPUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ERPUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ERPUsers.
     */
    distinct?: ERPUserScalarFieldEnum | ERPUserScalarFieldEnum[]
  }

  /**
   * ERPUser findFirstOrThrow
   */
  export type ERPUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ERPUser
     */
    select?: ERPUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ERPUser
     */
    omit?: ERPUserOmit<ExtArgs> | null
    /**
     * Filter, which ERPUser to fetch.
     */
    where?: ERPUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ERPUsers to fetch.
     */
    orderBy?: ERPUserOrderByWithRelationInput | ERPUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ERPUsers.
     */
    cursor?: ERPUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ERPUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ERPUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ERPUsers.
     */
    distinct?: ERPUserScalarFieldEnum | ERPUserScalarFieldEnum[]
  }

  /**
   * ERPUser findMany
   */
  export type ERPUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ERPUser
     */
    select?: ERPUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ERPUser
     */
    omit?: ERPUserOmit<ExtArgs> | null
    /**
     * Filter, which ERPUsers to fetch.
     */
    where?: ERPUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ERPUsers to fetch.
     */
    orderBy?: ERPUserOrderByWithRelationInput | ERPUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ERPUsers.
     */
    cursor?: ERPUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ERPUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ERPUsers.
     */
    skip?: number
    distinct?: ERPUserScalarFieldEnum | ERPUserScalarFieldEnum[]
  }

  /**
   * ERPUser create
   */
  export type ERPUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ERPUser
     */
    select?: ERPUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ERPUser
     */
    omit?: ERPUserOmit<ExtArgs> | null
    /**
     * The data needed to create a ERPUser.
     */
    data: XOR<ERPUserCreateInput, ERPUserUncheckedCreateInput>
  }

  /**
   * ERPUser createMany
   */
  export type ERPUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ERPUsers.
     */
    data: ERPUserCreateManyInput | ERPUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ERPUser createManyAndReturn
   */
  export type ERPUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ERPUser
     */
    select?: ERPUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ERPUser
     */
    omit?: ERPUserOmit<ExtArgs> | null
    /**
     * The data used to create many ERPUsers.
     */
    data: ERPUserCreateManyInput | ERPUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ERPUser update
   */
  export type ERPUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ERPUser
     */
    select?: ERPUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ERPUser
     */
    omit?: ERPUserOmit<ExtArgs> | null
    /**
     * The data needed to update a ERPUser.
     */
    data: XOR<ERPUserUpdateInput, ERPUserUncheckedUpdateInput>
    /**
     * Choose, which ERPUser to update.
     */
    where: ERPUserWhereUniqueInput
  }

  /**
   * ERPUser updateMany
   */
  export type ERPUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ERPUsers.
     */
    data: XOR<ERPUserUpdateManyMutationInput, ERPUserUncheckedUpdateManyInput>
    /**
     * Filter which ERPUsers to update
     */
    where?: ERPUserWhereInput
    /**
     * Limit how many ERPUsers to update.
     */
    limit?: number
  }

  /**
   * ERPUser updateManyAndReturn
   */
  export type ERPUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ERPUser
     */
    select?: ERPUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ERPUser
     */
    omit?: ERPUserOmit<ExtArgs> | null
    /**
     * The data used to update ERPUsers.
     */
    data: XOR<ERPUserUpdateManyMutationInput, ERPUserUncheckedUpdateManyInput>
    /**
     * Filter which ERPUsers to update
     */
    where?: ERPUserWhereInput
    /**
     * Limit how many ERPUsers to update.
     */
    limit?: number
  }

  /**
   * ERPUser upsert
   */
  export type ERPUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ERPUser
     */
    select?: ERPUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ERPUser
     */
    omit?: ERPUserOmit<ExtArgs> | null
    /**
     * The filter to search for the ERPUser to update in case it exists.
     */
    where: ERPUserWhereUniqueInput
    /**
     * In case the ERPUser found by the `where` argument doesn't exist, create a new ERPUser with this data.
     */
    create: XOR<ERPUserCreateInput, ERPUserUncheckedCreateInput>
    /**
     * In case the ERPUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ERPUserUpdateInput, ERPUserUncheckedUpdateInput>
  }

  /**
   * ERPUser delete
   */
  export type ERPUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ERPUser
     */
    select?: ERPUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ERPUser
     */
    omit?: ERPUserOmit<ExtArgs> | null
    /**
     * Filter which ERPUser to delete.
     */
    where: ERPUserWhereUniqueInput
  }

  /**
   * ERPUser deleteMany
   */
  export type ERPUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ERPUsers to delete
     */
    where?: ERPUserWhereInput
    /**
     * Limit how many ERPUsers to delete.
     */
    limit?: number
  }

  /**
   * ERPUser without action
   */
  export type ERPUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ERPUser
     */
    select?: ERPUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ERPUser
     */
    omit?: ERPUserOmit<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    key: string | null
    name: string | null
    system: boolean | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    key: string | null
    name: string | null
    system: boolean | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    key: number
    name: number
    system: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    key?: true
    name?: true
    system?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    key?: true
    name?: true
    system?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    key?: true
    name?: true
    system?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    key: string
    name: string
    system: boolean
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    system?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    system?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    system?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    key?: boolean
    name?: boolean
    system?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "name" | "system", ExtArgs["result"]["role"]>

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      key: string
      name: string
      system: boolean
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'Int'>
    readonly key: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly system: FieldRef<"Role", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role updateManyAndReturn
   */
  export type RoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleAvgAggregateOutputType = {
    roleId: number | null
  }

  export type UserRoleSumAggregateOutputType = {
    roleId: number | null
  }

  export type UserRoleMinAggregateOutputType = {
    userId: string | null
    roleId: number | null
    tenantId: string | null
  }

  export type UserRoleMaxAggregateOutputType = {
    userId: string | null
    roleId: number | null
    tenantId: string | null
  }

  export type UserRoleCountAggregateOutputType = {
    userId: number
    roleId: number
    tenantId: number
    _all: number
  }


  export type UserRoleAvgAggregateInputType = {
    roleId?: true
  }

  export type UserRoleSumAggregateInputType = {
    roleId?: true
  }

  export type UserRoleMinAggregateInputType = {
    userId?: true
    roleId?: true
    tenantId?: true
  }

  export type UserRoleMaxAggregateInputType = {
    userId?: true
    roleId?: true
    tenantId?: true
  }

  export type UserRoleCountAggregateInputType = {
    userId?: true
    roleId?: true
    tenantId?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _avg?: UserRoleAvgAggregateInputType
    _sum?: UserRoleSumAggregateInputType
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    userId: string
    roleId: number
    tenantId: string | null
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    roleId?: boolean
    tenantId?: boolean
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    roleId?: boolean
    tenantId?: boolean
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    roleId?: boolean
    tenantId?: boolean
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectScalar = {
    userId?: boolean
    roleId?: boolean
    tenantId?: boolean
  }

  export type UserRoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "roleId" | "tenantId", ExtArgs["result"]["userRole"]>

  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      roleId: number
      tenantId: string | null
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }

  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleFindUniqueArgs>(args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserRole that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleFindFirstArgs>(args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userRoleWithUserIdOnly = await prisma.userRole.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserRoleFindManyArgs>(args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
     */
    create<T extends UserRoleCreateArgs>(args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserRoles.
     * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleCreateManyArgs>(args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRoles and returns the data saved in the database.
     * @param {UserRoleCreateManyAndReturnArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRoles and only return the `userId`
     * const userRoleWithUserIdOnly = await prisma.userRole.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
     */
    delete<T extends UserRoleDeleteArgs>(args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleUpdateArgs>(args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleDeleteManyArgs>(args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleUpdateManyArgs>(args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles and returns the data updated in the database.
     * @param {UserRoleUpdateManyAndReturnArgs} args - Arguments to update many UserRoles.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserRoles and only return the `userId`
     * const userRoleWithUserIdOnly = await prisma.userRole.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserRoleUpdateManyAndReturnArgs>(args: SelectSubset<T, UserRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleUpsertArgs>(args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRole model
   */
  interface UserRoleFieldRefs {
    readonly userId: FieldRef<"UserRole", 'String'>
    readonly roleId: FieldRef<"UserRole", 'Int'>
    readonly tenantId: FieldRef<"UserRole", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole createManyAndReturn
   */
  export type UserRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
  }

  /**
   * UserRole updateManyAndReturn
   */
  export type UserRoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to delete.
     */
    limit?: number
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
  }


  /**
   * Model SodPolicy
   */

  export type AggregateSodPolicy = {
    _count: SodPolicyCountAggregateOutputType | null
    _avg: SodPolicyAvgAggregateOutputType | null
    _sum: SodPolicySumAggregateOutputType | null
    _min: SodPolicyMinAggregateOutputType | null
    _max: SodPolicyMaxAggregateOutputType | null
  }

  export type SodPolicyAvgAggregateOutputType = {
    id: number | null
  }

  export type SodPolicySumAggregateOutputType = {
    id: number | null
  }

  export type SodPolicyMinAggregateOutputType = {
    id: number | null
    key: string | null
    description: string | null
    active: boolean | null
  }

  export type SodPolicyMaxAggregateOutputType = {
    id: number | null
    key: string | null
    description: string | null
    active: boolean | null
  }

  export type SodPolicyCountAggregateOutputType = {
    id: number
    key: number
    description: number
    active: number
    _all: number
  }


  export type SodPolicyAvgAggregateInputType = {
    id?: true
  }

  export type SodPolicySumAggregateInputType = {
    id?: true
  }

  export type SodPolicyMinAggregateInputType = {
    id?: true
    key?: true
    description?: true
    active?: true
  }

  export type SodPolicyMaxAggregateInputType = {
    id?: true
    key?: true
    description?: true
    active?: true
  }

  export type SodPolicyCountAggregateInputType = {
    id?: true
    key?: true
    description?: true
    active?: true
    _all?: true
  }

  export type SodPolicyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SodPolicy to aggregate.
     */
    where?: SodPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SodPolicies to fetch.
     */
    orderBy?: SodPolicyOrderByWithRelationInput | SodPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SodPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SodPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SodPolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SodPolicies
    **/
    _count?: true | SodPolicyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SodPolicyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SodPolicySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SodPolicyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SodPolicyMaxAggregateInputType
  }

  export type GetSodPolicyAggregateType<T extends SodPolicyAggregateArgs> = {
        [P in keyof T & keyof AggregateSodPolicy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSodPolicy[P]>
      : GetScalarType<T[P], AggregateSodPolicy[P]>
  }




  export type SodPolicyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SodPolicyWhereInput
    orderBy?: SodPolicyOrderByWithAggregationInput | SodPolicyOrderByWithAggregationInput[]
    by: SodPolicyScalarFieldEnum[] | SodPolicyScalarFieldEnum
    having?: SodPolicyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SodPolicyCountAggregateInputType | true
    _avg?: SodPolicyAvgAggregateInputType
    _sum?: SodPolicySumAggregateInputType
    _min?: SodPolicyMinAggregateInputType
    _max?: SodPolicyMaxAggregateInputType
  }

  export type SodPolicyGroupByOutputType = {
    id: number
    key: string
    description: string | null
    active: boolean
    _count: SodPolicyCountAggregateOutputType | null
    _avg: SodPolicyAvgAggregateOutputType | null
    _sum: SodPolicySumAggregateOutputType | null
    _min: SodPolicyMinAggregateOutputType | null
    _max: SodPolicyMaxAggregateOutputType | null
  }

  type GetSodPolicyGroupByPayload<T extends SodPolicyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SodPolicyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SodPolicyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SodPolicyGroupByOutputType[P]>
            : GetScalarType<T[P], SodPolicyGroupByOutputType[P]>
        }
      >
    >


  export type SodPolicySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    description?: boolean
    active?: boolean
  }, ExtArgs["result"]["sodPolicy"]>

  export type SodPolicySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    description?: boolean
    active?: boolean
  }, ExtArgs["result"]["sodPolicy"]>

  export type SodPolicySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    description?: boolean
    active?: boolean
  }, ExtArgs["result"]["sodPolicy"]>

  export type SodPolicySelectScalar = {
    id?: boolean
    key?: boolean
    description?: boolean
    active?: boolean
  }

  export type SodPolicyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "description" | "active", ExtArgs["result"]["sodPolicy"]>

  export type $SodPolicyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SodPolicy"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      key: string
      description: string | null
      active: boolean
    }, ExtArgs["result"]["sodPolicy"]>
    composites: {}
  }

  type SodPolicyGetPayload<S extends boolean | null | undefined | SodPolicyDefaultArgs> = $Result.GetResult<Prisma.$SodPolicyPayload, S>

  type SodPolicyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SodPolicyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SodPolicyCountAggregateInputType | true
    }

  export interface SodPolicyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SodPolicy'], meta: { name: 'SodPolicy' } }
    /**
     * Find zero or one SodPolicy that matches the filter.
     * @param {SodPolicyFindUniqueArgs} args - Arguments to find a SodPolicy
     * @example
     * // Get one SodPolicy
     * const sodPolicy = await prisma.sodPolicy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SodPolicyFindUniqueArgs>(args: SelectSubset<T, SodPolicyFindUniqueArgs<ExtArgs>>): Prisma__SodPolicyClient<$Result.GetResult<Prisma.$SodPolicyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SodPolicy that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SodPolicyFindUniqueOrThrowArgs} args - Arguments to find a SodPolicy
     * @example
     * // Get one SodPolicy
     * const sodPolicy = await prisma.sodPolicy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SodPolicyFindUniqueOrThrowArgs>(args: SelectSubset<T, SodPolicyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SodPolicyClient<$Result.GetResult<Prisma.$SodPolicyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SodPolicy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SodPolicyFindFirstArgs} args - Arguments to find a SodPolicy
     * @example
     * // Get one SodPolicy
     * const sodPolicy = await prisma.sodPolicy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SodPolicyFindFirstArgs>(args?: SelectSubset<T, SodPolicyFindFirstArgs<ExtArgs>>): Prisma__SodPolicyClient<$Result.GetResult<Prisma.$SodPolicyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SodPolicy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SodPolicyFindFirstOrThrowArgs} args - Arguments to find a SodPolicy
     * @example
     * // Get one SodPolicy
     * const sodPolicy = await prisma.sodPolicy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SodPolicyFindFirstOrThrowArgs>(args?: SelectSubset<T, SodPolicyFindFirstOrThrowArgs<ExtArgs>>): Prisma__SodPolicyClient<$Result.GetResult<Prisma.$SodPolicyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SodPolicies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SodPolicyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SodPolicies
     * const sodPolicies = await prisma.sodPolicy.findMany()
     * 
     * // Get first 10 SodPolicies
     * const sodPolicies = await prisma.sodPolicy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sodPolicyWithIdOnly = await prisma.sodPolicy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SodPolicyFindManyArgs>(args?: SelectSubset<T, SodPolicyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SodPolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SodPolicy.
     * @param {SodPolicyCreateArgs} args - Arguments to create a SodPolicy.
     * @example
     * // Create one SodPolicy
     * const SodPolicy = await prisma.sodPolicy.create({
     *   data: {
     *     // ... data to create a SodPolicy
     *   }
     * })
     * 
     */
    create<T extends SodPolicyCreateArgs>(args: SelectSubset<T, SodPolicyCreateArgs<ExtArgs>>): Prisma__SodPolicyClient<$Result.GetResult<Prisma.$SodPolicyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SodPolicies.
     * @param {SodPolicyCreateManyArgs} args - Arguments to create many SodPolicies.
     * @example
     * // Create many SodPolicies
     * const sodPolicy = await prisma.sodPolicy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SodPolicyCreateManyArgs>(args?: SelectSubset<T, SodPolicyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SodPolicies and returns the data saved in the database.
     * @param {SodPolicyCreateManyAndReturnArgs} args - Arguments to create many SodPolicies.
     * @example
     * // Create many SodPolicies
     * const sodPolicy = await prisma.sodPolicy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SodPolicies and only return the `id`
     * const sodPolicyWithIdOnly = await prisma.sodPolicy.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SodPolicyCreateManyAndReturnArgs>(args?: SelectSubset<T, SodPolicyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SodPolicyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SodPolicy.
     * @param {SodPolicyDeleteArgs} args - Arguments to delete one SodPolicy.
     * @example
     * // Delete one SodPolicy
     * const SodPolicy = await prisma.sodPolicy.delete({
     *   where: {
     *     // ... filter to delete one SodPolicy
     *   }
     * })
     * 
     */
    delete<T extends SodPolicyDeleteArgs>(args: SelectSubset<T, SodPolicyDeleteArgs<ExtArgs>>): Prisma__SodPolicyClient<$Result.GetResult<Prisma.$SodPolicyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SodPolicy.
     * @param {SodPolicyUpdateArgs} args - Arguments to update one SodPolicy.
     * @example
     * // Update one SodPolicy
     * const sodPolicy = await prisma.sodPolicy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SodPolicyUpdateArgs>(args: SelectSubset<T, SodPolicyUpdateArgs<ExtArgs>>): Prisma__SodPolicyClient<$Result.GetResult<Prisma.$SodPolicyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SodPolicies.
     * @param {SodPolicyDeleteManyArgs} args - Arguments to filter SodPolicies to delete.
     * @example
     * // Delete a few SodPolicies
     * const { count } = await prisma.sodPolicy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SodPolicyDeleteManyArgs>(args?: SelectSubset<T, SodPolicyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SodPolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SodPolicyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SodPolicies
     * const sodPolicy = await prisma.sodPolicy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SodPolicyUpdateManyArgs>(args: SelectSubset<T, SodPolicyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SodPolicies and returns the data updated in the database.
     * @param {SodPolicyUpdateManyAndReturnArgs} args - Arguments to update many SodPolicies.
     * @example
     * // Update many SodPolicies
     * const sodPolicy = await prisma.sodPolicy.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SodPolicies and only return the `id`
     * const sodPolicyWithIdOnly = await prisma.sodPolicy.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SodPolicyUpdateManyAndReturnArgs>(args: SelectSubset<T, SodPolicyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SodPolicyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SodPolicy.
     * @param {SodPolicyUpsertArgs} args - Arguments to update or create a SodPolicy.
     * @example
     * // Update or create a SodPolicy
     * const sodPolicy = await prisma.sodPolicy.upsert({
     *   create: {
     *     // ... data to create a SodPolicy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SodPolicy we want to update
     *   }
     * })
     */
    upsert<T extends SodPolicyUpsertArgs>(args: SelectSubset<T, SodPolicyUpsertArgs<ExtArgs>>): Prisma__SodPolicyClient<$Result.GetResult<Prisma.$SodPolicyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SodPolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SodPolicyCountArgs} args - Arguments to filter SodPolicies to count.
     * @example
     * // Count the number of SodPolicies
     * const count = await prisma.sodPolicy.count({
     *   where: {
     *     // ... the filter for the SodPolicies we want to count
     *   }
     * })
    **/
    count<T extends SodPolicyCountArgs>(
      args?: Subset<T, SodPolicyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SodPolicyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SodPolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SodPolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SodPolicyAggregateArgs>(args: Subset<T, SodPolicyAggregateArgs>): Prisma.PrismaPromise<GetSodPolicyAggregateType<T>>

    /**
     * Group by SodPolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SodPolicyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SodPolicyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SodPolicyGroupByArgs['orderBy'] }
        : { orderBy?: SodPolicyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SodPolicyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSodPolicyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SodPolicy model
   */
  readonly fields: SodPolicyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SodPolicy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SodPolicyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SodPolicy model
   */
  interface SodPolicyFieldRefs {
    readonly id: FieldRef<"SodPolicy", 'Int'>
    readonly key: FieldRef<"SodPolicy", 'String'>
    readonly description: FieldRef<"SodPolicy", 'String'>
    readonly active: FieldRef<"SodPolicy", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * SodPolicy findUnique
   */
  export type SodPolicyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SodPolicy
     */
    select?: SodPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SodPolicy
     */
    omit?: SodPolicyOmit<ExtArgs> | null
    /**
     * Filter, which SodPolicy to fetch.
     */
    where: SodPolicyWhereUniqueInput
  }

  /**
   * SodPolicy findUniqueOrThrow
   */
  export type SodPolicyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SodPolicy
     */
    select?: SodPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SodPolicy
     */
    omit?: SodPolicyOmit<ExtArgs> | null
    /**
     * Filter, which SodPolicy to fetch.
     */
    where: SodPolicyWhereUniqueInput
  }

  /**
   * SodPolicy findFirst
   */
  export type SodPolicyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SodPolicy
     */
    select?: SodPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SodPolicy
     */
    omit?: SodPolicyOmit<ExtArgs> | null
    /**
     * Filter, which SodPolicy to fetch.
     */
    where?: SodPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SodPolicies to fetch.
     */
    orderBy?: SodPolicyOrderByWithRelationInput | SodPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SodPolicies.
     */
    cursor?: SodPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SodPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SodPolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SodPolicies.
     */
    distinct?: SodPolicyScalarFieldEnum | SodPolicyScalarFieldEnum[]
  }

  /**
   * SodPolicy findFirstOrThrow
   */
  export type SodPolicyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SodPolicy
     */
    select?: SodPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SodPolicy
     */
    omit?: SodPolicyOmit<ExtArgs> | null
    /**
     * Filter, which SodPolicy to fetch.
     */
    where?: SodPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SodPolicies to fetch.
     */
    orderBy?: SodPolicyOrderByWithRelationInput | SodPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SodPolicies.
     */
    cursor?: SodPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SodPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SodPolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SodPolicies.
     */
    distinct?: SodPolicyScalarFieldEnum | SodPolicyScalarFieldEnum[]
  }

  /**
   * SodPolicy findMany
   */
  export type SodPolicyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SodPolicy
     */
    select?: SodPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SodPolicy
     */
    omit?: SodPolicyOmit<ExtArgs> | null
    /**
     * Filter, which SodPolicies to fetch.
     */
    where?: SodPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SodPolicies to fetch.
     */
    orderBy?: SodPolicyOrderByWithRelationInput | SodPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SodPolicies.
     */
    cursor?: SodPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SodPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SodPolicies.
     */
    skip?: number
    distinct?: SodPolicyScalarFieldEnum | SodPolicyScalarFieldEnum[]
  }

  /**
   * SodPolicy create
   */
  export type SodPolicyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SodPolicy
     */
    select?: SodPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SodPolicy
     */
    omit?: SodPolicyOmit<ExtArgs> | null
    /**
     * The data needed to create a SodPolicy.
     */
    data: XOR<SodPolicyCreateInput, SodPolicyUncheckedCreateInput>
  }

  /**
   * SodPolicy createMany
   */
  export type SodPolicyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SodPolicies.
     */
    data: SodPolicyCreateManyInput | SodPolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SodPolicy createManyAndReturn
   */
  export type SodPolicyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SodPolicy
     */
    select?: SodPolicySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SodPolicy
     */
    omit?: SodPolicyOmit<ExtArgs> | null
    /**
     * The data used to create many SodPolicies.
     */
    data: SodPolicyCreateManyInput | SodPolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SodPolicy update
   */
  export type SodPolicyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SodPolicy
     */
    select?: SodPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SodPolicy
     */
    omit?: SodPolicyOmit<ExtArgs> | null
    /**
     * The data needed to update a SodPolicy.
     */
    data: XOR<SodPolicyUpdateInput, SodPolicyUncheckedUpdateInput>
    /**
     * Choose, which SodPolicy to update.
     */
    where: SodPolicyWhereUniqueInput
  }

  /**
   * SodPolicy updateMany
   */
  export type SodPolicyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SodPolicies.
     */
    data: XOR<SodPolicyUpdateManyMutationInput, SodPolicyUncheckedUpdateManyInput>
    /**
     * Filter which SodPolicies to update
     */
    where?: SodPolicyWhereInput
    /**
     * Limit how many SodPolicies to update.
     */
    limit?: number
  }

  /**
   * SodPolicy updateManyAndReturn
   */
  export type SodPolicyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SodPolicy
     */
    select?: SodPolicySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SodPolicy
     */
    omit?: SodPolicyOmit<ExtArgs> | null
    /**
     * The data used to update SodPolicies.
     */
    data: XOR<SodPolicyUpdateManyMutationInput, SodPolicyUncheckedUpdateManyInput>
    /**
     * Filter which SodPolicies to update
     */
    where?: SodPolicyWhereInput
    /**
     * Limit how many SodPolicies to update.
     */
    limit?: number
  }

  /**
   * SodPolicy upsert
   */
  export type SodPolicyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SodPolicy
     */
    select?: SodPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SodPolicy
     */
    omit?: SodPolicyOmit<ExtArgs> | null
    /**
     * The filter to search for the SodPolicy to update in case it exists.
     */
    where: SodPolicyWhereUniqueInput
    /**
     * In case the SodPolicy found by the `where` argument doesn't exist, create a new SodPolicy with this data.
     */
    create: XOR<SodPolicyCreateInput, SodPolicyUncheckedCreateInput>
    /**
     * In case the SodPolicy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SodPolicyUpdateInput, SodPolicyUncheckedUpdateInput>
  }

  /**
   * SodPolicy delete
   */
  export type SodPolicyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SodPolicy
     */
    select?: SodPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SodPolicy
     */
    omit?: SodPolicyOmit<ExtArgs> | null
    /**
     * Filter which SodPolicy to delete.
     */
    where: SodPolicyWhereUniqueInput
  }

  /**
   * SodPolicy deleteMany
   */
  export type SodPolicyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SodPolicies to delete
     */
    where?: SodPolicyWhereInput
    /**
     * Limit how many SodPolicies to delete.
     */
    limit?: number
  }

  /**
   * SodPolicy without action
   */
  export type SodPolicyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SodPolicy
     */
    select?: SodPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SodPolicy
     */
    omit?: SodPolicyOmit<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogAvgAggregateOutputType = {
    id: number | null
  }

  export type AuditLogSumAggregateOutputType = {
    id: number | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: number | null
    actorEmail: string | null
    role: string | null
    action: string | null
    details: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: number | null
    actorEmail: string | null
    role: string | null
    action: string | null
    details: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    actorEmail: number
    role: number
    action: number
    details: number
    createdAt: number
    _all: number
  }


  export type AuditLogAvgAggregateInputType = {
    id?: true
  }

  export type AuditLogSumAggregateInputType = {
    id?: true
  }

  export type AuditLogMinAggregateInputType = {
    id?: true
    actorEmail?: true
    role?: true
    action?: true
    details?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    actorEmail?: true
    role?: true
    action?: true
    details?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    actorEmail?: true
    role?: true
    action?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _avg?: AuditLogAvgAggregateInputType
    _sum?: AuditLogSumAggregateInputType
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: number
    actorEmail: string
    role: string | null
    action: string
    details: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorEmail?: boolean
    role?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorEmail?: boolean
    role?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorEmail?: boolean
    role?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    actorEmail?: boolean
    role?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "actorEmail" | "role" | "action" | "details" | "createdAt", ExtArgs["result"]["auditLog"]>

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      actorEmail: string
      role: string | null
      action: string
      details: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'Int'>
    readonly actorEmail: FieldRef<"AuditLog", 'String'>
    readonly role: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
  }


  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    id: number | null
  }

  export type OrganizationSumAggregateOutputType = {
    id: number | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    baseCurrency: string | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    baseCurrency: string | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    code: number
    name: number
    baseCurrency: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    id?: true
  }

  export type OrganizationSumAggregateInputType = {
    id?: true
  }

  export type OrganizationMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    baseCurrency?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    baseCurrency?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    baseCurrency?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: number
    code: string
    name: string
    baseCurrency: string
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    baseCurrency?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    baseCurrency?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    baseCurrency?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    baseCurrency?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "baseCurrency", ExtArgs["result"]["organization"]>

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
      baseCurrency: string
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations and returns the data updated in the database.
     * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'Int'>
    readonly code: FieldRef<"Organization", 'String'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly baseCurrency: FieldRef<"Organization", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization updateManyAndReturn
   */
  export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
  }


  /**
   * Model DistributionCenter
   */

  export type AggregateDistributionCenter = {
    _count: DistributionCenterCountAggregateOutputType | null
    _avg: DistributionCenterAvgAggregateOutputType | null
    _sum: DistributionCenterSumAggregateOutputType | null
    _min: DistributionCenterMinAggregateOutputType | null
    _max: DistributionCenterMaxAggregateOutputType | null
  }

  export type DistributionCenterAvgAggregateOutputType = {
    id: number | null
  }

  export type DistributionCenterSumAggregateOutputType = {
    id: number | null
  }

  export type DistributionCenterMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
  }

  export type DistributionCenterMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
  }

  export type DistributionCenterCountAggregateOutputType = {
    id: number
    code: number
    name: number
    _all: number
  }


  export type DistributionCenterAvgAggregateInputType = {
    id?: true
  }

  export type DistributionCenterSumAggregateInputType = {
    id?: true
  }

  export type DistributionCenterMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
  }

  export type DistributionCenterMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
  }

  export type DistributionCenterCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    _all?: true
  }

  export type DistributionCenterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DistributionCenter to aggregate.
     */
    where?: DistributionCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionCenters to fetch.
     */
    orderBy?: DistributionCenterOrderByWithRelationInput | DistributionCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DistributionCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DistributionCenters
    **/
    _count?: true | DistributionCenterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DistributionCenterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DistributionCenterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DistributionCenterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DistributionCenterMaxAggregateInputType
  }

  export type GetDistributionCenterAggregateType<T extends DistributionCenterAggregateArgs> = {
        [P in keyof T & keyof AggregateDistributionCenter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDistributionCenter[P]>
      : GetScalarType<T[P], AggregateDistributionCenter[P]>
  }




  export type DistributionCenterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistributionCenterWhereInput
    orderBy?: DistributionCenterOrderByWithAggregationInput | DistributionCenterOrderByWithAggregationInput[]
    by: DistributionCenterScalarFieldEnum[] | DistributionCenterScalarFieldEnum
    having?: DistributionCenterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DistributionCenterCountAggregateInputType | true
    _avg?: DistributionCenterAvgAggregateInputType
    _sum?: DistributionCenterSumAggregateInputType
    _min?: DistributionCenterMinAggregateInputType
    _max?: DistributionCenterMaxAggregateInputType
  }

  export type DistributionCenterGroupByOutputType = {
    id: number
    code: string
    name: string
    _count: DistributionCenterCountAggregateOutputType | null
    _avg: DistributionCenterAvgAggregateOutputType | null
    _sum: DistributionCenterSumAggregateOutputType | null
    _min: DistributionCenterMinAggregateOutputType | null
    _max: DistributionCenterMaxAggregateOutputType | null
  }

  type GetDistributionCenterGroupByPayload<T extends DistributionCenterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DistributionCenterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DistributionCenterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DistributionCenterGroupByOutputType[P]>
            : GetScalarType<T[P], DistributionCenterGroupByOutputType[P]>
        }
      >
    >


  export type DistributionCenterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    inventory?: boolean | DistributionCenter$inventoryArgs<ExtArgs>
    pickWaves?: boolean | DistributionCenter$pickWavesArgs<ExtArgs>
    _count?: boolean | DistributionCenterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["distributionCenter"]>

  export type DistributionCenterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
  }, ExtArgs["result"]["distributionCenter"]>

  export type DistributionCenterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
  }, ExtArgs["result"]["distributionCenter"]>

  export type DistributionCenterSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
  }

  export type DistributionCenterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name", ExtArgs["result"]["distributionCenter"]>
  export type DistributionCenterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | DistributionCenter$inventoryArgs<ExtArgs>
    pickWaves?: boolean | DistributionCenter$pickWavesArgs<ExtArgs>
    _count?: boolean | DistributionCenterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DistributionCenterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DistributionCenterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DistributionCenterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DistributionCenter"
    objects: {
      inventory: Prisma.$CurrentInventoryPayload<ExtArgs>[]
      pickWaves: Prisma.$FulfillmentWavePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
    }, ExtArgs["result"]["distributionCenter"]>
    composites: {}
  }

  type DistributionCenterGetPayload<S extends boolean | null | undefined | DistributionCenterDefaultArgs> = $Result.GetResult<Prisma.$DistributionCenterPayload, S>

  type DistributionCenterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DistributionCenterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DistributionCenterCountAggregateInputType | true
    }

  export interface DistributionCenterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DistributionCenter'], meta: { name: 'DistributionCenter' } }
    /**
     * Find zero or one DistributionCenter that matches the filter.
     * @param {DistributionCenterFindUniqueArgs} args - Arguments to find a DistributionCenter
     * @example
     * // Get one DistributionCenter
     * const distributionCenter = await prisma.distributionCenter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DistributionCenterFindUniqueArgs>(args: SelectSubset<T, DistributionCenterFindUniqueArgs<ExtArgs>>): Prisma__DistributionCenterClient<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DistributionCenter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DistributionCenterFindUniqueOrThrowArgs} args - Arguments to find a DistributionCenter
     * @example
     * // Get one DistributionCenter
     * const distributionCenter = await prisma.distributionCenter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DistributionCenterFindUniqueOrThrowArgs>(args: SelectSubset<T, DistributionCenterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DistributionCenterClient<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DistributionCenter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionCenterFindFirstArgs} args - Arguments to find a DistributionCenter
     * @example
     * // Get one DistributionCenter
     * const distributionCenter = await prisma.distributionCenter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DistributionCenterFindFirstArgs>(args?: SelectSubset<T, DistributionCenterFindFirstArgs<ExtArgs>>): Prisma__DistributionCenterClient<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DistributionCenter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionCenterFindFirstOrThrowArgs} args - Arguments to find a DistributionCenter
     * @example
     * // Get one DistributionCenter
     * const distributionCenter = await prisma.distributionCenter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DistributionCenterFindFirstOrThrowArgs>(args?: SelectSubset<T, DistributionCenterFindFirstOrThrowArgs<ExtArgs>>): Prisma__DistributionCenterClient<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DistributionCenters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionCenterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DistributionCenters
     * const distributionCenters = await prisma.distributionCenter.findMany()
     * 
     * // Get first 10 DistributionCenters
     * const distributionCenters = await prisma.distributionCenter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const distributionCenterWithIdOnly = await prisma.distributionCenter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DistributionCenterFindManyArgs>(args?: SelectSubset<T, DistributionCenterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DistributionCenter.
     * @param {DistributionCenterCreateArgs} args - Arguments to create a DistributionCenter.
     * @example
     * // Create one DistributionCenter
     * const DistributionCenter = await prisma.distributionCenter.create({
     *   data: {
     *     // ... data to create a DistributionCenter
     *   }
     * })
     * 
     */
    create<T extends DistributionCenterCreateArgs>(args: SelectSubset<T, DistributionCenterCreateArgs<ExtArgs>>): Prisma__DistributionCenterClient<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DistributionCenters.
     * @param {DistributionCenterCreateManyArgs} args - Arguments to create many DistributionCenters.
     * @example
     * // Create many DistributionCenters
     * const distributionCenter = await prisma.distributionCenter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DistributionCenterCreateManyArgs>(args?: SelectSubset<T, DistributionCenterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DistributionCenters and returns the data saved in the database.
     * @param {DistributionCenterCreateManyAndReturnArgs} args - Arguments to create many DistributionCenters.
     * @example
     * // Create many DistributionCenters
     * const distributionCenter = await prisma.distributionCenter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DistributionCenters and only return the `id`
     * const distributionCenterWithIdOnly = await prisma.distributionCenter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DistributionCenterCreateManyAndReturnArgs>(args?: SelectSubset<T, DistributionCenterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DistributionCenter.
     * @param {DistributionCenterDeleteArgs} args - Arguments to delete one DistributionCenter.
     * @example
     * // Delete one DistributionCenter
     * const DistributionCenter = await prisma.distributionCenter.delete({
     *   where: {
     *     // ... filter to delete one DistributionCenter
     *   }
     * })
     * 
     */
    delete<T extends DistributionCenterDeleteArgs>(args: SelectSubset<T, DistributionCenterDeleteArgs<ExtArgs>>): Prisma__DistributionCenterClient<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DistributionCenter.
     * @param {DistributionCenterUpdateArgs} args - Arguments to update one DistributionCenter.
     * @example
     * // Update one DistributionCenter
     * const distributionCenter = await prisma.distributionCenter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DistributionCenterUpdateArgs>(args: SelectSubset<T, DistributionCenterUpdateArgs<ExtArgs>>): Prisma__DistributionCenterClient<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DistributionCenters.
     * @param {DistributionCenterDeleteManyArgs} args - Arguments to filter DistributionCenters to delete.
     * @example
     * // Delete a few DistributionCenters
     * const { count } = await prisma.distributionCenter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DistributionCenterDeleteManyArgs>(args?: SelectSubset<T, DistributionCenterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DistributionCenters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionCenterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DistributionCenters
     * const distributionCenter = await prisma.distributionCenter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DistributionCenterUpdateManyArgs>(args: SelectSubset<T, DistributionCenterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DistributionCenters and returns the data updated in the database.
     * @param {DistributionCenterUpdateManyAndReturnArgs} args - Arguments to update many DistributionCenters.
     * @example
     * // Update many DistributionCenters
     * const distributionCenter = await prisma.distributionCenter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DistributionCenters and only return the `id`
     * const distributionCenterWithIdOnly = await prisma.distributionCenter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DistributionCenterUpdateManyAndReturnArgs>(args: SelectSubset<T, DistributionCenterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DistributionCenter.
     * @param {DistributionCenterUpsertArgs} args - Arguments to update or create a DistributionCenter.
     * @example
     * // Update or create a DistributionCenter
     * const distributionCenter = await prisma.distributionCenter.upsert({
     *   create: {
     *     // ... data to create a DistributionCenter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DistributionCenter we want to update
     *   }
     * })
     */
    upsert<T extends DistributionCenterUpsertArgs>(args: SelectSubset<T, DistributionCenterUpsertArgs<ExtArgs>>): Prisma__DistributionCenterClient<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DistributionCenters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionCenterCountArgs} args - Arguments to filter DistributionCenters to count.
     * @example
     * // Count the number of DistributionCenters
     * const count = await prisma.distributionCenter.count({
     *   where: {
     *     // ... the filter for the DistributionCenters we want to count
     *   }
     * })
    **/
    count<T extends DistributionCenterCountArgs>(
      args?: Subset<T, DistributionCenterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DistributionCenterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DistributionCenter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionCenterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DistributionCenterAggregateArgs>(args: Subset<T, DistributionCenterAggregateArgs>): Prisma.PrismaPromise<GetDistributionCenterAggregateType<T>>

    /**
     * Group by DistributionCenter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionCenterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DistributionCenterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DistributionCenterGroupByArgs['orderBy'] }
        : { orderBy?: DistributionCenterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DistributionCenterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDistributionCenterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DistributionCenter model
   */
  readonly fields: DistributionCenterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DistributionCenter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DistributionCenterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends DistributionCenter$inventoryArgs<ExtArgs> = {}>(args?: Subset<T, DistributionCenter$inventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pickWaves<T extends DistributionCenter$pickWavesArgs<ExtArgs> = {}>(args?: Subset<T, DistributionCenter$pickWavesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FulfillmentWavePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DistributionCenter model
   */
  interface DistributionCenterFieldRefs {
    readonly id: FieldRef<"DistributionCenter", 'Int'>
    readonly code: FieldRef<"DistributionCenter", 'String'>
    readonly name: FieldRef<"DistributionCenter", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DistributionCenter findUnique
   */
  export type DistributionCenterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenter
     */
    select?: DistributionCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionCenter
     */
    omit?: DistributionCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionCenterInclude<ExtArgs> | null
    /**
     * Filter, which DistributionCenter to fetch.
     */
    where: DistributionCenterWhereUniqueInput
  }

  /**
   * DistributionCenter findUniqueOrThrow
   */
  export type DistributionCenterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenter
     */
    select?: DistributionCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionCenter
     */
    omit?: DistributionCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionCenterInclude<ExtArgs> | null
    /**
     * Filter, which DistributionCenter to fetch.
     */
    where: DistributionCenterWhereUniqueInput
  }

  /**
   * DistributionCenter findFirst
   */
  export type DistributionCenterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenter
     */
    select?: DistributionCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionCenter
     */
    omit?: DistributionCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionCenterInclude<ExtArgs> | null
    /**
     * Filter, which DistributionCenter to fetch.
     */
    where?: DistributionCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionCenters to fetch.
     */
    orderBy?: DistributionCenterOrderByWithRelationInput | DistributionCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistributionCenters.
     */
    cursor?: DistributionCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistributionCenters.
     */
    distinct?: DistributionCenterScalarFieldEnum | DistributionCenterScalarFieldEnum[]
  }

  /**
   * DistributionCenter findFirstOrThrow
   */
  export type DistributionCenterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenter
     */
    select?: DistributionCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionCenter
     */
    omit?: DistributionCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionCenterInclude<ExtArgs> | null
    /**
     * Filter, which DistributionCenter to fetch.
     */
    where?: DistributionCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionCenters to fetch.
     */
    orderBy?: DistributionCenterOrderByWithRelationInput | DistributionCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistributionCenters.
     */
    cursor?: DistributionCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionCenters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistributionCenters.
     */
    distinct?: DistributionCenterScalarFieldEnum | DistributionCenterScalarFieldEnum[]
  }

  /**
   * DistributionCenter findMany
   */
  export type DistributionCenterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenter
     */
    select?: DistributionCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionCenter
     */
    omit?: DistributionCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionCenterInclude<ExtArgs> | null
    /**
     * Filter, which DistributionCenters to fetch.
     */
    where?: DistributionCenterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionCenters to fetch.
     */
    orderBy?: DistributionCenterOrderByWithRelationInput | DistributionCenterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DistributionCenters.
     */
    cursor?: DistributionCenterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionCenters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionCenters.
     */
    skip?: number
    distinct?: DistributionCenterScalarFieldEnum | DistributionCenterScalarFieldEnum[]
  }

  /**
   * DistributionCenter create
   */
  export type DistributionCenterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenter
     */
    select?: DistributionCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionCenter
     */
    omit?: DistributionCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionCenterInclude<ExtArgs> | null
    /**
     * The data needed to create a DistributionCenter.
     */
    data: XOR<DistributionCenterCreateInput, DistributionCenterUncheckedCreateInput>
  }

  /**
   * DistributionCenter createMany
   */
  export type DistributionCenterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DistributionCenters.
     */
    data: DistributionCenterCreateManyInput | DistributionCenterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DistributionCenter createManyAndReturn
   */
  export type DistributionCenterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenter
     */
    select?: DistributionCenterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionCenter
     */
    omit?: DistributionCenterOmit<ExtArgs> | null
    /**
     * The data used to create many DistributionCenters.
     */
    data: DistributionCenterCreateManyInput | DistributionCenterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DistributionCenter update
   */
  export type DistributionCenterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenter
     */
    select?: DistributionCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionCenter
     */
    omit?: DistributionCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionCenterInclude<ExtArgs> | null
    /**
     * The data needed to update a DistributionCenter.
     */
    data: XOR<DistributionCenterUpdateInput, DistributionCenterUncheckedUpdateInput>
    /**
     * Choose, which DistributionCenter to update.
     */
    where: DistributionCenterWhereUniqueInput
  }

  /**
   * DistributionCenter updateMany
   */
  export type DistributionCenterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DistributionCenters.
     */
    data: XOR<DistributionCenterUpdateManyMutationInput, DistributionCenterUncheckedUpdateManyInput>
    /**
     * Filter which DistributionCenters to update
     */
    where?: DistributionCenterWhereInput
    /**
     * Limit how many DistributionCenters to update.
     */
    limit?: number
  }

  /**
   * DistributionCenter updateManyAndReturn
   */
  export type DistributionCenterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenter
     */
    select?: DistributionCenterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionCenter
     */
    omit?: DistributionCenterOmit<ExtArgs> | null
    /**
     * The data used to update DistributionCenters.
     */
    data: XOR<DistributionCenterUpdateManyMutationInput, DistributionCenterUncheckedUpdateManyInput>
    /**
     * Filter which DistributionCenters to update
     */
    where?: DistributionCenterWhereInput
    /**
     * Limit how many DistributionCenters to update.
     */
    limit?: number
  }

  /**
   * DistributionCenter upsert
   */
  export type DistributionCenterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenter
     */
    select?: DistributionCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionCenter
     */
    omit?: DistributionCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionCenterInclude<ExtArgs> | null
    /**
     * The filter to search for the DistributionCenter to update in case it exists.
     */
    where: DistributionCenterWhereUniqueInput
    /**
     * In case the DistributionCenter found by the `where` argument doesn't exist, create a new DistributionCenter with this data.
     */
    create: XOR<DistributionCenterCreateInput, DistributionCenterUncheckedCreateInput>
    /**
     * In case the DistributionCenter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DistributionCenterUpdateInput, DistributionCenterUncheckedUpdateInput>
  }

  /**
   * DistributionCenter delete
   */
  export type DistributionCenterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenter
     */
    select?: DistributionCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionCenter
     */
    omit?: DistributionCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionCenterInclude<ExtArgs> | null
    /**
     * Filter which DistributionCenter to delete.
     */
    where: DistributionCenterWhereUniqueInput
  }

  /**
   * DistributionCenter deleteMany
   */
  export type DistributionCenterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DistributionCenters to delete
     */
    where?: DistributionCenterWhereInput
    /**
     * Limit how many DistributionCenters to delete.
     */
    limit?: number
  }

  /**
   * DistributionCenter.inventory
   */
  export type DistributionCenter$inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryInclude<ExtArgs> | null
    where?: CurrentInventoryWhereInput
    orderBy?: CurrentInventoryOrderByWithRelationInput | CurrentInventoryOrderByWithRelationInput[]
    cursor?: CurrentInventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CurrentInventoryScalarFieldEnum | CurrentInventoryScalarFieldEnum[]
  }

  /**
   * DistributionCenter.pickWaves
   */
  export type DistributionCenter$pickWavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveInclude<ExtArgs> | null
    where?: FulfillmentWaveWhereInput
    orderBy?: FulfillmentWaveOrderByWithRelationInput | FulfillmentWaveOrderByWithRelationInput[]
    cursor?: FulfillmentWaveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FulfillmentWaveScalarFieldEnum | FulfillmentWaveScalarFieldEnum[]
  }

  /**
   * DistributionCenter without action
   */
  export type DistributionCenterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionCenter
     */
    select?: DistributionCenterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionCenter
     */
    omit?: DistributionCenterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributionCenterInclude<ExtArgs> | null
  }


  /**
   * Model ProductSKU
   */

  export type AggregateProductSKU = {
    _count: ProductSKUCountAggregateOutputType | null
    _avg: ProductSKUAvgAggregateOutputType | null
    _sum: ProductSKUSumAggregateOutputType | null
    _min: ProductSKUMinAggregateOutputType | null
    _max: ProductSKUMaxAggregateOutputType | null
  }

  export type ProductSKUAvgAggregateOutputType = {
    id: number | null
  }

  export type ProductSKUSumAggregateOutputType = {
    id: number | null
  }

  export type ProductSKUMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    uom: string | null
  }

  export type ProductSKUMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    uom: string | null
  }

  export type ProductSKUCountAggregateOutputType = {
    id: number
    code: number
    name: number
    uom: number
    _all: number
  }


  export type ProductSKUAvgAggregateInputType = {
    id?: true
  }

  export type ProductSKUSumAggregateInputType = {
    id?: true
  }

  export type ProductSKUMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    uom?: true
  }

  export type ProductSKUMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    uom?: true
  }

  export type ProductSKUCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    uom?: true
    _all?: true
  }

  export type ProductSKUAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductSKU to aggregate.
     */
    where?: ProductSKUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSKUS to fetch.
     */
    orderBy?: ProductSKUOrderByWithRelationInput | ProductSKUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductSKUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSKUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSKUS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductSKUS
    **/
    _count?: true | ProductSKUCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductSKUAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSKUSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductSKUMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductSKUMaxAggregateInputType
  }

  export type GetProductSKUAggregateType<T extends ProductSKUAggregateArgs> = {
        [P in keyof T & keyof AggregateProductSKU]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductSKU[P]>
      : GetScalarType<T[P], AggregateProductSKU[P]>
  }




  export type ProductSKUGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductSKUWhereInput
    orderBy?: ProductSKUOrderByWithAggregationInput | ProductSKUOrderByWithAggregationInput[]
    by: ProductSKUScalarFieldEnum[] | ProductSKUScalarFieldEnum
    having?: ProductSKUScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductSKUCountAggregateInputType | true
    _avg?: ProductSKUAvgAggregateInputType
    _sum?: ProductSKUSumAggregateInputType
    _min?: ProductSKUMinAggregateInputType
    _max?: ProductSKUMaxAggregateInputType
  }

  export type ProductSKUGroupByOutputType = {
    id: number
    code: string
    name: string
    uom: string
    _count: ProductSKUCountAggregateOutputType | null
    _avg: ProductSKUAvgAggregateOutputType | null
    _sum: ProductSKUSumAggregateOutputType | null
    _min: ProductSKUMinAggregateOutputType | null
    _max: ProductSKUMaxAggregateOutputType | null
  }

  type GetProductSKUGroupByPayload<T extends ProductSKUGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductSKUGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductSKUGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductSKUGroupByOutputType[P]>
            : GetScalarType<T[P], ProductSKUGroupByOutputType[P]>
        }
      >
    >


  export type ProductSKUSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    uom?: boolean
    inventory?: boolean | ProductSKU$inventoryArgs<ExtArgs>
    _count?: boolean | ProductSKUCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productSKU"]>

  export type ProductSKUSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    uom?: boolean
  }, ExtArgs["result"]["productSKU"]>

  export type ProductSKUSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    uom?: boolean
  }, ExtArgs["result"]["productSKU"]>

  export type ProductSKUSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    uom?: boolean
  }

  export type ProductSKUOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "uom", ExtArgs["result"]["productSKU"]>
  export type ProductSKUInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | ProductSKU$inventoryArgs<ExtArgs>
    _count?: boolean | ProductSKUCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductSKUIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProductSKUIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProductSKUPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductSKU"
    objects: {
      inventory: Prisma.$CurrentInventoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
      uom: string
    }, ExtArgs["result"]["productSKU"]>
    composites: {}
  }

  type ProductSKUGetPayload<S extends boolean | null | undefined | ProductSKUDefaultArgs> = $Result.GetResult<Prisma.$ProductSKUPayload, S>

  type ProductSKUCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductSKUFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductSKUCountAggregateInputType | true
    }

  export interface ProductSKUDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductSKU'], meta: { name: 'ProductSKU' } }
    /**
     * Find zero or one ProductSKU that matches the filter.
     * @param {ProductSKUFindUniqueArgs} args - Arguments to find a ProductSKU
     * @example
     * // Get one ProductSKU
     * const productSKU = await prisma.productSKU.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductSKUFindUniqueArgs>(args: SelectSubset<T, ProductSKUFindUniqueArgs<ExtArgs>>): Prisma__ProductSKUClient<$Result.GetResult<Prisma.$ProductSKUPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductSKU that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductSKUFindUniqueOrThrowArgs} args - Arguments to find a ProductSKU
     * @example
     * // Get one ProductSKU
     * const productSKU = await prisma.productSKU.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductSKUFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductSKUFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductSKUClient<$Result.GetResult<Prisma.$ProductSKUPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductSKU that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSKUFindFirstArgs} args - Arguments to find a ProductSKU
     * @example
     * // Get one ProductSKU
     * const productSKU = await prisma.productSKU.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductSKUFindFirstArgs>(args?: SelectSubset<T, ProductSKUFindFirstArgs<ExtArgs>>): Prisma__ProductSKUClient<$Result.GetResult<Prisma.$ProductSKUPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductSKU that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSKUFindFirstOrThrowArgs} args - Arguments to find a ProductSKU
     * @example
     * // Get one ProductSKU
     * const productSKU = await prisma.productSKU.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductSKUFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductSKUFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductSKUClient<$Result.GetResult<Prisma.$ProductSKUPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductSKUS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSKUFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductSKUS
     * const productSKUS = await prisma.productSKU.findMany()
     * 
     * // Get first 10 ProductSKUS
     * const productSKUS = await prisma.productSKU.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productSKUWithIdOnly = await prisma.productSKU.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductSKUFindManyArgs>(args?: SelectSubset<T, ProductSKUFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSKUPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductSKU.
     * @param {ProductSKUCreateArgs} args - Arguments to create a ProductSKU.
     * @example
     * // Create one ProductSKU
     * const ProductSKU = await prisma.productSKU.create({
     *   data: {
     *     // ... data to create a ProductSKU
     *   }
     * })
     * 
     */
    create<T extends ProductSKUCreateArgs>(args: SelectSubset<T, ProductSKUCreateArgs<ExtArgs>>): Prisma__ProductSKUClient<$Result.GetResult<Prisma.$ProductSKUPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductSKUS.
     * @param {ProductSKUCreateManyArgs} args - Arguments to create many ProductSKUS.
     * @example
     * // Create many ProductSKUS
     * const productSKU = await prisma.productSKU.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductSKUCreateManyArgs>(args?: SelectSubset<T, ProductSKUCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductSKUS and returns the data saved in the database.
     * @param {ProductSKUCreateManyAndReturnArgs} args - Arguments to create many ProductSKUS.
     * @example
     * // Create many ProductSKUS
     * const productSKU = await prisma.productSKU.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductSKUS and only return the `id`
     * const productSKUWithIdOnly = await prisma.productSKU.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductSKUCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductSKUCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSKUPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductSKU.
     * @param {ProductSKUDeleteArgs} args - Arguments to delete one ProductSKU.
     * @example
     * // Delete one ProductSKU
     * const ProductSKU = await prisma.productSKU.delete({
     *   where: {
     *     // ... filter to delete one ProductSKU
     *   }
     * })
     * 
     */
    delete<T extends ProductSKUDeleteArgs>(args: SelectSubset<T, ProductSKUDeleteArgs<ExtArgs>>): Prisma__ProductSKUClient<$Result.GetResult<Prisma.$ProductSKUPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductSKU.
     * @param {ProductSKUUpdateArgs} args - Arguments to update one ProductSKU.
     * @example
     * // Update one ProductSKU
     * const productSKU = await prisma.productSKU.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductSKUUpdateArgs>(args: SelectSubset<T, ProductSKUUpdateArgs<ExtArgs>>): Prisma__ProductSKUClient<$Result.GetResult<Prisma.$ProductSKUPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductSKUS.
     * @param {ProductSKUDeleteManyArgs} args - Arguments to filter ProductSKUS to delete.
     * @example
     * // Delete a few ProductSKUS
     * const { count } = await prisma.productSKU.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductSKUDeleteManyArgs>(args?: SelectSubset<T, ProductSKUDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductSKUS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSKUUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductSKUS
     * const productSKU = await prisma.productSKU.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductSKUUpdateManyArgs>(args: SelectSubset<T, ProductSKUUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductSKUS and returns the data updated in the database.
     * @param {ProductSKUUpdateManyAndReturnArgs} args - Arguments to update many ProductSKUS.
     * @example
     * // Update many ProductSKUS
     * const productSKU = await prisma.productSKU.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductSKUS and only return the `id`
     * const productSKUWithIdOnly = await prisma.productSKU.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductSKUUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductSKUUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSKUPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductSKU.
     * @param {ProductSKUUpsertArgs} args - Arguments to update or create a ProductSKU.
     * @example
     * // Update or create a ProductSKU
     * const productSKU = await prisma.productSKU.upsert({
     *   create: {
     *     // ... data to create a ProductSKU
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductSKU we want to update
     *   }
     * })
     */
    upsert<T extends ProductSKUUpsertArgs>(args: SelectSubset<T, ProductSKUUpsertArgs<ExtArgs>>): Prisma__ProductSKUClient<$Result.GetResult<Prisma.$ProductSKUPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductSKUS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSKUCountArgs} args - Arguments to filter ProductSKUS to count.
     * @example
     * // Count the number of ProductSKUS
     * const count = await prisma.productSKU.count({
     *   where: {
     *     // ... the filter for the ProductSKUS we want to count
     *   }
     * })
    **/
    count<T extends ProductSKUCountArgs>(
      args?: Subset<T, ProductSKUCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductSKUCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductSKU.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSKUAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductSKUAggregateArgs>(args: Subset<T, ProductSKUAggregateArgs>): Prisma.PrismaPromise<GetProductSKUAggregateType<T>>

    /**
     * Group by ProductSKU.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSKUGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductSKUGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductSKUGroupByArgs['orderBy'] }
        : { orderBy?: ProductSKUGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductSKUGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductSKUGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductSKU model
   */
  readonly fields: ProductSKUFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductSKU.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductSKUClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends ProductSKU$inventoryArgs<ExtArgs> = {}>(args?: Subset<T, ProductSKU$inventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductSKU model
   */
  interface ProductSKUFieldRefs {
    readonly id: FieldRef<"ProductSKU", 'Int'>
    readonly code: FieldRef<"ProductSKU", 'String'>
    readonly name: FieldRef<"ProductSKU", 'String'>
    readonly uom: FieldRef<"ProductSKU", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductSKU findUnique
   */
  export type ProductSKUFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKU
     */
    select?: ProductSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSKU
     */
    omit?: ProductSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSKUInclude<ExtArgs> | null
    /**
     * Filter, which ProductSKU to fetch.
     */
    where: ProductSKUWhereUniqueInput
  }

  /**
   * ProductSKU findUniqueOrThrow
   */
  export type ProductSKUFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKU
     */
    select?: ProductSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSKU
     */
    omit?: ProductSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSKUInclude<ExtArgs> | null
    /**
     * Filter, which ProductSKU to fetch.
     */
    where: ProductSKUWhereUniqueInput
  }

  /**
   * ProductSKU findFirst
   */
  export type ProductSKUFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKU
     */
    select?: ProductSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSKU
     */
    omit?: ProductSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSKUInclude<ExtArgs> | null
    /**
     * Filter, which ProductSKU to fetch.
     */
    where?: ProductSKUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSKUS to fetch.
     */
    orderBy?: ProductSKUOrderByWithRelationInput | ProductSKUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductSKUS.
     */
    cursor?: ProductSKUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSKUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSKUS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductSKUS.
     */
    distinct?: ProductSKUScalarFieldEnum | ProductSKUScalarFieldEnum[]
  }

  /**
   * ProductSKU findFirstOrThrow
   */
  export type ProductSKUFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKU
     */
    select?: ProductSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSKU
     */
    omit?: ProductSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSKUInclude<ExtArgs> | null
    /**
     * Filter, which ProductSKU to fetch.
     */
    where?: ProductSKUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSKUS to fetch.
     */
    orderBy?: ProductSKUOrderByWithRelationInput | ProductSKUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductSKUS.
     */
    cursor?: ProductSKUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSKUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSKUS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductSKUS.
     */
    distinct?: ProductSKUScalarFieldEnum | ProductSKUScalarFieldEnum[]
  }

  /**
   * ProductSKU findMany
   */
  export type ProductSKUFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKU
     */
    select?: ProductSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSKU
     */
    omit?: ProductSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSKUInclude<ExtArgs> | null
    /**
     * Filter, which ProductSKUS to fetch.
     */
    where?: ProductSKUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSKUS to fetch.
     */
    orderBy?: ProductSKUOrderByWithRelationInput | ProductSKUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductSKUS.
     */
    cursor?: ProductSKUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSKUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSKUS.
     */
    skip?: number
    distinct?: ProductSKUScalarFieldEnum | ProductSKUScalarFieldEnum[]
  }

  /**
   * ProductSKU create
   */
  export type ProductSKUCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKU
     */
    select?: ProductSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSKU
     */
    omit?: ProductSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSKUInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductSKU.
     */
    data: XOR<ProductSKUCreateInput, ProductSKUUncheckedCreateInput>
  }

  /**
   * ProductSKU createMany
   */
  export type ProductSKUCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductSKUS.
     */
    data: ProductSKUCreateManyInput | ProductSKUCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductSKU createManyAndReturn
   */
  export type ProductSKUCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKU
     */
    select?: ProductSKUSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSKU
     */
    omit?: ProductSKUOmit<ExtArgs> | null
    /**
     * The data used to create many ProductSKUS.
     */
    data: ProductSKUCreateManyInput | ProductSKUCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductSKU update
   */
  export type ProductSKUUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKU
     */
    select?: ProductSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSKU
     */
    omit?: ProductSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSKUInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductSKU.
     */
    data: XOR<ProductSKUUpdateInput, ProductSKUUncheckedUpdateInput>
    /**
     * Choose, which ProductSKU to update.
     */
    where: ProductSKUWhereUniqueInput
  }

  /**
   * ProductSKU updateMany
   */
  export type ProductSKUUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductSKUS.
     */
    data: XOR<ProductSKUUpdateManyMutationInput, ProductSKUUncheckedUpdateManyInput>
    /**
     * Filter which ProductSKUS to update
     */
    where?: ProductSKUWhereInput
    /**
     * Limit how many ProductSKUS to update.
     */
    limit?: number
  }

  /**
   * ProductSKU updateManyAndReturn
   */
  export type ProductSKUUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKU
     */
    select?: ProductSKUSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSKU
     */
    omit?: ProductSKUOmit<ExtArgs> | null
    /**
     * The data used to update ProductSKUS.
     */
    data: XOR<ProductSKUUpdateManyMutationInput, ProductSKUUncheckedUpdateManyInput>
    /**
     * Filter which ProductSKUS to update
     */
    where?: ProductSKUWhereInput
    /**
     * Limit how many ProductSKUS to update.
     */
    limit?: number
  }

  /**
   * ProductSKU upsert
   */
  export type ProductSKUUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKU
     */
    select?: ProductSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSKU
     */
    omit?: ProductSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSKUInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductSKU to update in case it exists.
     */
    where: ProductSKUWhereUniqueInput
    /**
     * In case the ProductSKU found by the `where` argument doesn't exist, create a new ProductSKU with this data.
     */
    create: XOR<ProductSKUCreateInput, ProductSKUUncheckedCreateInput>
    /**
     * In case the ProductSKU was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductSKUUpdateInput, ProductSKUUncheckedUpdateInput>
  }

  /**
   * ProductSKU delete
   */
  export type ProductSKUDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKU
     */
    select?: ProductSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSKU
     */
    omit?: ProductSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSKUInclude<ExtArgs> | null
    /**
     * Filter which ProductSKU to delete.
     */
    where: ProductSKUWhereUniqueInput
  }

  /**
   * ProductSKU deleteMany
   */
  export type ProductSKUDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductSKUS to delete
     */
    where?: ProductSKUWhereInput
    /**
     * Limit how many ProductSKUS to delete.
     */
    limit?: number
  }

  /**
   * ProductSKU.inventory
   */
  export type ProductSKU$inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryInclude<ExtArgs> | null
    where?: CurrentInventoryWhereInput
    orderBy?: CurrentInventoryOrderByWithRelationInput | CurrentInventoryOrderByWithRelationInput[]
    cursor?: CurrentInventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CurrentInventoryScalarFieldEnum | CurrentInventoryScalarFieldEnum[]
  }

  /**
   * ProductSKU without action
   */
  export type ProductSKUDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSKU
     */
    select?: ProductSKUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSKU
     */
    omit?: ProductSKUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSKUInclude<ExtArgs> | null
  }


  /**
   * Model ClientAccount
   */

  export type AggregateClientAccount = {
    _count: ClientAccountCountAggregateOutputType | null
    _avg: ClientAccountAvgAggregateOutputType | null
    _sum: ClientAccountSumAggregateOutputType | null
    _min: ClientAccountMinAggregateOutputType | null
    _max: ClientAccountMaxAggregateOutputType | null
  }

  export type ClientAccountAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientAccountSumAggregateOutputType = {
    id: number | null
  }

  export type ClientAccountMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
  }

  export type ClientAccountMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
  }

  export type ClientAccountCountAggregateOutputType = {
    id: number
    name: number
    email: number
    _all: number
  }


  export type ClientAccountAvgAggregateInputType = {
    id?: true
  }

  export type ClientAccountSumAggregateInputType = {
    id?: true
  }

  export type ClientAccountMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
  }

  export type ClientAccountMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
  }

  export type ClientAccountCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    _all?: true
  }

  export type ClientAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientAccount to aggregate.
     */
    where?: ClientAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientAccounts to fetch.
     */
    orderBy?: ClientAccountOrderByWithRelationInput | ClientAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClientAccounts
    **/
    _count?: true | ClientAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientAccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientAccountMaxAggregateInputType
  }

  export type GetClientAccountAggregateType<T extends ClientAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateClientAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientAccount[P]>
      : GetScalarType<T[P], AggregateClientAccount[P]>
  }




  export type ClientAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientAccountWhereInput
    orderBy?: ClientAccountOrderByWithAggregationInput | ClientAccountOrderByWithAggregationInput[]
    by: ClientAccountScalarFieldEnum[] | ClientAccountScalarFieldEnum
    having?: ClientAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientAccountCountAggregateInputType | true
    _avg?: ClientAccountAvgAggregateInputType
    _sum?: ClientAccountSumAggregateInputType
    _min?: ClientAccountMinAggregateInputType
    _max?: ClientAccountMaxAggregateInputType
  }

  export type ClientAccountGroupByOutputType = {
    id: number
    name: string
    email: string
    _count: ClientAccountCountAggregateOutputType | null
    _avg: ClientAccountAvgAggregateOutputType | null
    _sum: ClientAccountSumAggregateOutputType | null
    _min: ClientAccountMinAggregateOutputType | null
    _max: ClientAccountMaxAggregateOutputType | null
  }

  type GetClientAccountGroupByPayload<T extends ClientAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientAccountGroupByOutputType[P]>
            : GetScalarType<T[P], ClientAccountGroupByOutputType[P]>
        }
      >
    >


  export type ClientAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    subscriptions?: boolean | ClientAccount$subscriptionsArgs<ExtArgs>
    _count?: boolean | ClientAccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clientAccount"]>

  export type ClientAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
  }, ExtArgs["result"]["clientAccount"]>

  export type ClientAccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
  }, ExtArgs["result"]["clientAccount"]>

  export type ClientAccountSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
  }

  export type ClientAccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email", ExtArgs["result"]["clientAccount"]>
  export type ClientAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | ClientAccount$subscriptionsArgs<ExtArgs>
    _count?: boolean | ClientAccountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClientAccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClientAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClientAccount"
    objects: {
      subscriptions: Prisma.$ActiveSubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
    }, ExtArgs["result"]["clientAccount"]>
    composites: {}
  }

  type ClientAccountGetPayload<S extends boolean | null | undefined | ClientAccountDefaultArgs> = $Result.GetResult<Prisma.$ClientAccountPayload, S>

  type ClientAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientAccountCountAggregateInputType | true
    }

  export interface ClientAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClientAccount'], meta: { name: 'ClientAccount' } }
    /**
     * Find zero or one ClientAccount that matches the filter.
     * @param {ClientAccountFindUniqueArgs} args - Arguments to find a ClientAccount
     * @example
     * // Get one ClientAccount
     * const clientAccount = await prisma.clientAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientAccountFindUniqueArgs>(args: SelectSubset<T, ClientAccountFindUniqueArgs<ExtArgs>>): Prisma__ClientAccountClient<$Result.GetResult<Prisma.$ClientAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClientAccount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientAccountFindUniqueOrThrowArgs} args - Arguments to find a ClientAccount
     * @example
     * // Get one ClientAccount
     * const clientAccount = await prisma.clientAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientAccountClient<$Result.GetResult<Prisma.$ClientAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClientAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccountFindFirstArgs} args - Arguments to find a ClientAccount
     * @example
     * // Get one ClientAccount
     * const clientAccount = await prisma.clientAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientAccountFindFirstArgs>(args?: SelectSubset<T, ClientAccountFindFirstArgs<ExtArgs>>): Prisma__ClientAccountClient<$Result.GetResult<Prisma.$ClientAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClientAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccountFindFirstOrThrowArgs} args - Arguments to find a ClientAccount
     * @example
     * // Get one ClientAccount
     * const clientAccount = await prisma.clientAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientAccountClient<$Result.GetResult<Prisma.$ClientAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClientAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClientAccounts
     * const clientAccounts = await prisma.clientAccount.findMany()
     * 
     * // Get first 10 ClientAccounts
     * const clientAccounts = await prisma.clientAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientAccountWithIdOnly = await prisma.clientAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientAccountFindManyArgs>(args?: SelectSubset<T, ClientAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClientAccount.
     * @param {ClientAccountCreateArgs} args - Arguments to create a ClientAccount.
     * @example
     * // Create one ClientAccount
     * const ClientAccount = await prisma.clientAccount.create({
     *   data: {
     *     // ... data to create a ClientAccount
     *   }
     * })
     * 
     */
    create<T extends ClientAccountCreateArgs>(args: SelectSubset<T, ClientAccountCreateArgs<ExtArgs>>): Prisma__ClientAccountClient<$Result.GetResult<Prisma.$ClientAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClientAccounts.
     * @param {ClientAccountCreateManyArgs} args - Arguments to create many ClientAccounts.
     * @example
     * // Create many ClientAccounts
     * const clientAccount = await prisma.clientAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientAccountCreateManyArgs>(args?: SelectSubset<T, ClientAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClientAccounts and returns the data saved in the database.
     * @param {ClientAccountCreateManyAndReturnArgs} args - Arguments to create many ClientAccounts.
     * @example
     * // Create many ClientAccounts
     * const clientAccount = await prisma.clientAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClientAccounts and only return the `id`
     * const clientAccountWithIdOnly = await prisma.clientAccount.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientAccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClientAccount.
     * @param {ClientAccountDeleteArgs} args - Arguments to delete one ClientAccount.
     * @example
     * // Delete one ClientAccount
     * const ClientAccount = await prisma.clientAccount.delete({
     *   where: {
     *     // ... filter to delete one ClientAccount
     *   }
     * })
     * 
     */
    delete<T extends ClientAccountDeleteArgs>(args: SelectSubset<T, ClientAccountDeleteArgs<ExtArgs>>): Prisma__ClientAccountClient<$Result.GetResult<Prisma.$ClientAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClientAccount.
     * @param {ClientAccountUpdateArgs} args - Arguments to update one ClientAccount.
     * @example
     * // Update one ClientAccount
     * const clientAccount = await prisma.clientAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientAccountUpdateArgs>(args: SelectSubset<T, ClientAccountUpdateArgs<ExtArgs>>): Prisma__ClientAccountClient<$Result.GetResult<Prisma.$ClientAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClientAccounts.
     * @param {ClientAccountDeleteManyArgs} args - Arguments to filter ClientAccounts to delete.
     * @example
     * // Delete a few ClientAccounts
     * const { count } = await prisma.clientAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientAccountDeleteManyArgs>(args?: SelectSubset<T, ClientAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClientAccounts
     * const clientAccount = await prisma.clientAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientAccountUpdateManyArgs>(args: SelectSubset<T, ClientAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientAccounts and returns the data updated in the database.
     * @param {ClientAccountUpdateManyAndReturnArgs} args - Arguments to update many ClientAccounts.
     * @example
     * // Update many ClientAccounts
     * const clientAccount = await prisma.clientAccount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClientAccounts and only return the `id`
     * const clientAccountWithIdOnly = await prisma.clientAccount.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClientAccountUpdateManyAndReturnArgs>(args: SelectSubset<T, ClientAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientAccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClientAccount.
     * @param {ClientAccountUpsertArgs} args - Arguments to update or create a ClientAccount.
     * @example
     * // Update or create a ClientAccount
     * const clientAccount = await prisma.clientAccount.upsert({
     *   create: {
     *     // ... data to create a ClientAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClientAccount we want to update
     *   }
     * })
     */
    upsert<T extends ClientAccountUpsertArgs>(args: SelectSubset<T, ClientAccountUpsertArgs<ExtArgs>>): Prisma__ClientAccountClient<$Result.GetResult<Prisma.$ClientAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClientAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccountCountArgs} args - Arguments to filter ClientAccounts to count.
     * @example
     * // Count the number of ClientAccounts
     * const count = await prisma.clientAccount.count({
     *   where: {
     *     // ... the filter for the ClientAccounts we want to count
     *   }
     * })
    **/
    count<T extends ClientAccountCountArgs>(
      args?: Subset<T, ClientAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClientAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAccountAggregateArgs>(args: Subset<T, ClientAccountAggregateArgs>): Prisma.PrismaPromise<GetClientAccountAggregateType<T>>

    /**
     * Group by ClientAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientAccountGroupByArgs['orderBy'] }
        : { orderBy?: ClientAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClientAccount model
   */
  readonly fields: ClientAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClientAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscriptions<T extends ClientAccount$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, ClientAccount$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClientAccount model
   */
  interface ClientAccountFieldRefs {
    readonly id: FieldRef<"ClientAccount", 'Int'>
    readonly name: FieldRef<"ClientAccount", 'String'>
    readonly email: FieldRef<"ClientAccount", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ClientAccount findUnique
   */
  export type ClientAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccount
     */
    select?: ClientAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientAccount
     */
    omit?: ClientAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientAccountInclude<ExtArgs> | null
    /**
     * Filter, which ClientAccount to fetch.
     */
    where: ClientAccountWhereUniqueInput
  }

  /**
   * ClientAccount findUniqueOrThrow
   */
  export type ClientAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccount
     */
    select?: ClientAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientAccount
     */
    omit?: ClientAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientAccountInclude<ExtArgs> | null
    /**
     * Filter, which ClientAccount to fetch.
     */
    where: ClientAccountWhereUniqueInput
  }

  /**
   * ClientAccount findFirst
   */
  export type ClientAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccount
     */
    select?: ClientAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientAccount
     */
    omit?: ClientAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientAccountInclude<ExtArgs> | null
    /**
     * Filter, which ClientAccount to fetch.
     */
    where?: ClientAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientAccounts to fetch.
     */
    orderBy?: ClientAccountOrderByWithRelationInput | ClientAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientAccounts.
     */
    cursor?: ClientAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientAccounts.
     */
    distinct?: ClientAccountScalarFieldEnum | ClientAccountScalarFieldEnum[]
  }

  /**
   * ClientAccount findFirstOrThrow
   */
  export type ClientAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccount
     */
    select?: ClientAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientAccount
     */
    omit?: ClientAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientAccountInclude<ExtArgs> | null
    /**
     * Filter, which ClientAccount to fetch.
     */
    where?: ClientAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientAccounts to fetch.
     */
    orderBy?: ClientAccountOrderByWithRelationInput | ClientAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientAccounts.
     */
    cursor?: ClientAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientAccounts.
     */
    distinct?: ClientAccountScalarFieldEnum | ClientAccountScalarFieldEnum[]
  }

  /**
   * ClientAccount findMany
   */
  export type ClientAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccount
     */
    select?: ClientAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientAccount
     */
    omit?: ClientAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientAccountInclude<ExtArgs> | null
    /**
     * Filter, which ClientAccounts to fetch.
     */
    where?: ClientAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientAccounts to fetch.
     */
    orderBy?: ClientAccountOrderByWithRelationInput | ClientAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClientAccounts.
     */
    cursor?: ClientAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientAccounts.
     */
    skip?: number
    distinct?: ClientAccountScalarFieldEnum | ClientAccountScalarFieldEnum[]
  }

  /**
   * ClientAccount create
   */
  export type ClientAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccount
     */
    select?: ClientAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientAccount
     */
    omit?: ClientAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a ClientAccount.
     */
    data: XOR<ClientAccountCreateInput, ClientAccountUncheckedCreateInput>
  }

  /**
   * ClientAccount createMany
   */
  export type ClientAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClientAccounts.
     */
    data: ClientAccountCreateManyInput | ClientAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClientAccount createManyAndReturn
   */
  export type ClientAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccount
     */
    select?: ClientAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClientAccount
     */
    omit?: ClientAccountOmit<ExtArgs> | null
    /**
     * The data used to create many ClientAccounts.
     */
    data: ClientAccountCreateManyInput | ClientAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClientAccount update
   */
  export type ClientAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccount
     */
    select?: ClientAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientAccount
     */
    omit?: ClientAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a ClientAccount.
     */
    data: XOR<ClientAccountUpdateInput, ClientAccountUncheckedUpdateInput>
    /**
     * Choose, which ClientAccount to update.
     */
    where: ClientAccountWhereUniqueInput
  }

  /**
   * ClientAccount updateMany
   */
  export type ClientAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClientAccounts.
     */
    data: XOR<ClientAccountUpdateManyMutationInput, ClientAccountUncheckedUpdateManyInput>
    /**
     * Filter which ClientAccounts to update
     */
    where?: ClientAccountWhereInput
    /**
     * Limit how many ClientAccounts to update.
     */
    limit?: number
  }

  /**
   * ClientAccount updateManyAndReturn
   */
  export type ClientAccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccount
     */
    select?: ClientAccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClientAccount
     */
    omit?: ClientAccountOmit<ExtArgs> | null
    /**
     * The data used to update ClientAccounts.
     */
    data: XOR<ClientAccountUpdateManyMutationInput, ClientAccountUncheckedUpdateManyInput>
    /**
     * Filter which ClientAccounts to update
     */
    where?: ClientAccountWhereInput
    /**
     * Limit how many ClientAccounts to update.
     */
    limit?: number
  }

  /**
   * ClientAccount upsert
   */
  export type ClientAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccount
     */
    select?: ClientAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientAccount
     */
    omit?: ClientAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the ClientAccount to update in case it exists.
     */
    where: ClientAccountWhereUniqueInput
    /**
     * In case the ClientAccount found by the `where` argument doesn't exist, create a new ClientAccount with this data.
     */
    create: XOR<ClientAccountCreateInput, ClientAccountUncheckedCreateInput>
    /**
     * In case the ClientAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientAccountUpdateInput, ClientAccountUncheckedUpdateInput>
  }

  /**
   * ClientAccount delete
   */
  export type ClientAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccount
     */
    select?: ClientAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientAccount
     */
    omit?: ClientAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientAccountInclude<ExtArgs> | null
    /**
     * Filter which ClientAccount to delete.
     */
    where: ClientAccountWhereUniqueInput
  }

  /**
   * ClientAccount deleteMany
   */
  export type ClientAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientAccounts to delete
     */
    where?: ClientAccountWhereInput
    /**
     * Limit how many ClientAccounts to delete.
     */
    limit?: number
  }

  /**
   * ClientAccount.subscriptions
   */
  export type ClientAccount$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionInclude<ExtArgs> | null
    where?: ActiveSubscriptionWhereInput
    orderBy?: ActiveSubscriptionOrderByWithRelationInput | ActiveSubscriptionOrderByWithRelationInput[]
    cursor?: ActiveSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActiveSubscriptionScalarFieldEnum | ActiveSubscriptionScalarFieldEnum[]
  }

  /**
   * ClientAccount without action
   */
  export type ClientAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientAccount
     */
    select?: ClientAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientAccount
     */
    omit?: ClientAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientAccountInclude<ExtArgs> | null
  }


  /**
   * Model SubscriptionPlan
   */

  export type AggregateSubscriptionPlan = {
    _count: SubscriptionPlanCountAggregateOutputType | null
    _avg: SubscriptionPlanAvgAggregateOutputType | null
    _sum: SubscriptionPlanSumAggregateOutputType | null
    _min: SubscriptionPlanMinAggregateOutputType | null
    _max: SubscriptionPlanMaxAggregateOutputType | null
  }

  export type SubscriptionPlanAvgAggregateOutputType = {
    id: number | null
    priceMonthly: number | null
  }

  export type SubscriptionPlanSumAggregateOutputType = {
    id: number | null
    priceMonthly: number | null
  }

  export type SubscriptionPlanMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    priceMonthly: number | null
    currency: string | null
  }

  export type SubscriptionPlanMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    priceMonthly: number | null
    currency: string | null
  }

  export type SubscriptionPlanCountAggregateOutputType = {
    id: number
    code: number
    name: number
    priceMonthly: number
    currency: number
    _all: number
  }


  export type SubscriptionPlanAvgAggregateInputType = {
    id?: true
    priceMonthly?: true
  }

  export type SubscriptionPlanSumAggregateInputType = {
    id?: true
    priceMonthly?: true
  }

  export type SubscriptionPlanMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    priceMonthly?: true
    currency?: true
  }

  export type SubscriptionPlanMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    priceMonthly?: true
    currency?: true
  }

  export type SubscriptionPlanCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    priceMonthly?: true
    currency?: true
    _all?: true
  }

  export type SubscriptionPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionPlan to aggregate.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubscriptionPlans
    **/
    _count?: true | SubscriptionPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubscriptionPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubscriptionPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionPlanMaxAggregateInputType
  }

  export type GetSubscriptionPlanAggregateType<T extends SubscriptionPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscriptionPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscriptionPlan[P]>
      : GetScalarType<T[P], AggregateSubscriptionPlan[P]>
  }




  export type SubscriptionPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionPlanWhereInput
    orderBy?: SubscriptionPlanOrderByWithAggregationInput | SubscriptionPlanOrderByWithAggregationInput[]
    by: SubscriptionPlanScalarFieldEnum[] | SubscriptionPlanScalarFieldEnum
    having?: SubscriptionPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionPlanCountAggregateInputType | true
    _avg?: SubscriptionPlanAvgAggregateInputType
    _sum?: SubscriptionPlanSumAggregateInputType
    _min?: SubscriptionPlanMinAggregateInputType
    _max?: SubscriptionPlanMaxAggregateInputType
  }

  export type SubscriptionPlanGroupByOutputType = {
    id: number
    code: string
    name: string
    priceMonthly: number
    currency: string
    _count: SubscriptionPlanCountAggregateOutputType | null
    _avg: SubscriptionPlanAvgAggregateOutputType | null
    _sum: SubscriptionPlanSumAggregateOutputType | null
    _min: SubscriptionPlanMinAggregateOutputType | null
    _max: SubscriptionPlanMaxAggregateOutputType | null
  }

  type GetSubscriptionPlanGroupByPayload<T extends SubscriptionPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionPlanGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionPlanGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    priceMonthly?: boolean
    currency?: boolean
    subscriptions?: boolean | SubscriptionPlan$subscriptionsArgs<ExtArgs>
    _count?: boolean | SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    priceMonthly?: boolean
    currency?: boolean
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    priceMonthly?: boolean
    currency?: boolean
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    priceMonthly?: boolean
    currency?: boolean
  }

  export type SubscriptionPlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "priceMonthly" | "currency", ExtArgs["result"]["subscriptionPlan"]>
  export type SubscriptionPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | SubscriptionPlan$subscriptionsArgs<ExtArgs>
    _count?: boolean | SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubscriptionPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SubscriptionPlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SubscriptionPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubscriptionPlan"
    objects: {
      subscriptions: Prisma.$ActiveSubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
      priceMonthly: number
      currency: string
    }, ExtArgs["result"]["subscriptionPlan"]>
    composites: {}
  }

  type SubscriptionPlanGetPayload<S extends boolean | null | undefined | SubscriptionPlanDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPlanPayload, S>

  type SubscriptionPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionPlanCountAggregateInputType | true
    }

  export interface SubscriptionPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubscriptionPlan'], meta: { name: 'SubscriptionPlan' } }
    /**
     * Find zero or one SubscriptionPlan that matches the filter.
     * @param {SubscriptionPlanFindUniqueArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionPlanFindUniqueArgs>(args: SelectSubset<T, SubscriptionPlanFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubscriptionPlan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionPlanFindUniqueOrThrowArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubscriptionPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindFirstArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionPlanFindFirstArgs>(args?: SelectSubset<T, SubscriptionPlanFindFirstArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubscriptionPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindFirstOrThrowArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubscriptionPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubscriptionPlans
     * const subscriptionPlans = await prisma.subscriptionPlan.findMany()
     * 
     * // Get first 10 SubscriptionPlans
     * const subscriptionPlans = await prisma.subscriptionPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionPlanFindManyArgs>(args?: SelectSubset<T, SubscriptionPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubscriptionPlan.
     * @param {SubscriptionPlanCreateArgs} args - Arguments to create a SubscriptionPlan.
     * @example
     * // Create one SubscriptionPlan
     * const SubscriptionPlan = await prisma.subscriptionPlan.create({
     *   data: {
     *     // ... data to create a SubscriptionPlan
     *   }
     * })
     * 
     */
    create<T extends SubscriptionPlanCreateArgs>(args: SelectSubset<T, SubscriptionPlanCreateArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubscriptionPlans.
     * @param {SubscriptionPlanCreateManyArgs} args - Arguments to create many SubscriptionPlans.
     * @example
     * // Create many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionPlanCreateManyArgs>(args?: SelectSubset<T, SubscriptionPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubscriptionPlans and returns the data saved in the database.
     * @param {SubscriptionPlanCreateManyAndReturnArgs} args - Arguments to create many SubscriptionPlans.
     * @example
     * // Create many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubscriptionPlans and only return the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SubscriptionPlan.
     * @param {SubscriptionPlanDeleteArgs} args - Arguments to delete one SubscriptionPlan.
     * @example
     * // Delete one SubscriptionPlan
     * const SubscriptionPlan = await prisma.subscriptionPlan.delete({
     *   where: {
     *     // ... filter to delete one SubscriptionPlan
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionPlanDeleteArgs>(args: SelectSubset<T, SubscriptionPlanDeleteArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubscriptionPlan.
     * @param {SubscriptionPlanUpdateArgs} args - Arguments to update one SubscriptionPlan.
     * @example
     * // Update one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionPlanUpdateArgs>(args: SelectSubset<T, SubscriptionPlanUpdateArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubscriptionPlans.
     * @param {SubscriptionPlanDeleteManyArgs} args - Arguments to filter SubscriptionPlans to delete.
     * @example
     * // Delete a few SubscriptionPlans
     * const { count } = await prisma.subscriptionPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionPlanDeleteManyArgs>(args?: SelectSubset<T, SubscriptionPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionPlanUpdateManyArgs>(args: SelectSubset<T, SubscriptionPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionPlans and returns the data updated in the database.
     * @param {SubscriptionPlanUpdateManyAndReturnArgs} args - Arguments to update many SubscriptionPlans.
     * @example
     * // Update many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SubscriptionPlans and only return the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionPlanUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SubscriptionPlan.
     * @param {SubscriptionPlanUpsertArgs} args - Arguments to update or create a SubscriptionPlan.
     * @example
     * // Update or create a SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.upsert({
     *   create: {
     *     // ... data to create a SubscriptionPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubscriptionPlan we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionPlanUpsertArgs>(args: SelectSubset<T, SubscriptionPlanUpsertArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubscriptionPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanCountArgs} args - Arguments to filter SubscriptionPlans to count.
     * @example
     * // Count the number of SubscriptionPlans
     * const count = await prisma.subscriptionPlan.count({
     *   where: {
     *     // ... the filter for the SubscriptionPlans we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionPlanCountArgs>(
      args?: Subset<T, SubscriptionPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubscriptionPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionPlanAggregateArgs>(args: Subset<T, SubscriptionPlanAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionPlanAggregateType<T>>

    /**
     * Group by SubscriptionPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionPlanGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubscriptionPlan model
   */
  readonly fields: SubscriptionPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubscriptionPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscriptions<T extends SubscriptionPlan$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionPlan$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubscriptionPlan model
   */
  interface SubscriptionPlanFieldRefs {
    readonly id: FieldRef<"SubscriptionPlan", 'Int'>
    readonly code: FieldRef<"SubscriptionPlan", 'String'>
    readonly name: FieldRef<"SubscriptionPlan", 'String'>
    readonly priceMonthly: FieldRef<"SubscriptionPlan", 'Int'>
    readonly currency: FieldRef<"SubscriptionPlan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SubscriptionPlan findUnique
   */
  export type SubscriptionPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan findUniqueOrThrow
   */
  export type SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan findFirst
   */
  export type SubscriptionPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionPlans.
     */
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan findFirstOrThrow
   */
  export type SubscriptionPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionPlans.
     */
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan findMany
   */
  export type SubscriptionPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlans to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan create
   */
  export type SubscriptionPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a SubscriptionPlan.
     */
    data: XOR<SubscriptionPlanCreateInput, SubscriptionPlanUncheckedCreateInput>
  }

  /**
   * SubscriptionPlan createMany
   */
  export type SubscriptionPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubscriptionPlans.
     */
    data: SubscriptionPlanCreateManyInput | SubscriptionPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubscriptionPlan createManyAndReturn
   */
  export type SubscriptionPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * The data used to create many SubscriptionPlans.
     */
    data: SubscriptionPlanCreateManyInput | SubscriptionPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubscriptionPlan update
   */
  export type SubscriptionPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a SubscriptionPlan.
     */
    data: XOR<SubscriptionPlanUpdateInput, SubscriptionPlanUncheckedUpdateInput>
    /**
     * Choose, which SubscriptionPlan to update.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan updateMany
   */
  export type SubscriptionPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubscriptionPlans.
     */
    data: XOR<SubscriptionPlanUpdateManyMutationInput, SubscriptionPlanUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionPlans to update
     */
    where?: SubscriptionPlanWhereInput
    /**
     * Limit how many SubscriptionPlans to update.
     */
    limit?: number
  }

  /**
   * SubscriptionPlan updateManyAndReturn
   */
  export type SubscriptionPlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * The data used to update SubscriptionPlans.
     */
    data: XOR<SubscriptionPlanUpdateManyMutationInput, SubscriptionPlanUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionPlans to update
     */
    where?: SubscriptionPlanWhereInput
    /**
     * Limit how many SubscriptionPlans to update.
     */
    limit?: number
  }

  /**
   * SubscriptionPlan upsert
   */
  export type SubscriptionPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the SubscriptionPlan to update in case it exists.
     */
    where: SubscriptionPlanWhereUniqueInput
    /**
     * In case the SubscriptionPlan found by the `where` argument doesn't exist, create a new SubscriptionPlan with this data.
     */
    create: XOR<SubscriptionPlanCreateInput, SubscriptionPlanUncheckedCreateInput>
    /**
     * In case the SubscriptionPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionPlanUpdateInput, SubscriptionPlanUncheckedUpdateInput>
  }

  /**
   * SubscriptionPlan delete
   */
  export type SubscriptionPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter which SubscriptionPlan to delete.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan deleteMany
   */
  export type SubscriptionPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionPlans to delete
     */
    where?: SubscriptionPlanWhereInput
    /**
     * Limit how many SubscriptionPlans to delete.
     */
    limit?: number
  }

  /**
   * SubscriptionPlan.subscriptions
   */
  export type SubscriptionPlan$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionInclude<ExtArgs> | null
    where?: ActiveSubscriptionWhereInput
    orderBy?: ActiveSubscriptionOrderByWithRelationInput | ActiveSubscriptionOrderByWithRelationInput[]
    cursor?: ActiveSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActiveSubscriptionScalarFieldEnum | ActiveSubscriptionScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan without action
   */
  export type SubscriptionPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
  }


  /**
   * Model ActiveSubscription
   */

  export type AggregateActiveSubscription = {
    _count: ActiveSubscriptionCountAggregateOutputType | null
    _avg: ActiveSubscriptionAvgAggregateOutputType | null
    _sum: ActiveSubscriptionSumAggregateOutputType | null
    _min: ActiveSubscriptionMinAggregateOutputType | null
    _max: ActiveSubscriptionMaxAggregateOutputType | null
  }

  export type ActiveSubscriptionAvgAggregateOutputType = {
    id: number | null
    customerId: number | null
    planId: number | null
  }

  export type ActiveSubscriptionSumAggregateOutputType = {
    id: number | null
    customerId: number | null
    planId: number | null
  }

  export type ActiveSubscriptionMinAggregateOutputType = {
    id: number | null
    customerId: number | null
    planId: number | null
    status: string | null
    startDate: Date | null
  }

  export type ActiveSubscriptionMaxAggregateOutputType = {
    id: number | null
    customerId: number | null
    planId: number | null
    status: string | null
    startDate: Date | null
  }

  export type ActiveSubscriptionCountAggregateOutputType = {
    id: number
    customerId: number
    planId: number
    status: number
    startDate: number
    _all: number
  }


  export type ActiveSubscriptionAvgAggregateInputType = {
    id?: true
    customerId?: true
    planId?: true
  }

  export type ActiveSubscriptionSumAggregateInputType = {
    id?: true
    customerId?: true
    planId?: true
  }

  export type ActiveSubscriptionMinAggregateInputType = {
    id?: true
    customerId?: true
    planId?: true
    status?: true
    startDate?: true
  }

  export type ActiveSubscriptionMaxAggregateInputType = {
    id?: true
    customerId?: true
    planId?: true
    status?: true
    startDate?: true
  }

  export type ActiveSubscriptionCountAggregateInputType = {
    id?: true
    customerId?: true
    planId?: true
    status?: true
    startDate?: true
    _all?: true
  }

  export type ActiveSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActiveSubscription to aggregate.
     */
    where?: ActiveSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActiveSubscriptions to fetch.
     */
    orderBy?: ActiveSubscriptionOrderByWithRelationInput | ActiveSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActiveSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActiveSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActiveSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActiveSubscriptions
    **/
    _count?: true | ActiveSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActiveSubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActiveSubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActiveSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActiveSubscriptionMaxAggregateInputType
  }

  export type GetActiveSubscriptionAggregateType<T extends ActiveSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateActiveSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActiveSubscription[P]>
      : GetScalarType<T[P], AggregateActiveSubscription[P]>
  }




  export type ActiveSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActiveSubscriptionWhereInput
    orderBy?: ActiveSubscriptionOrderByWithAggregationInput | ActiveSubscriptionOrderByWithAggregationInput[]
    by: ActiveSubscriptionScalarFieldEnum[] | ActiveSubscriptionScalarFieldEnum
    having?: ActiveSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActiveSubscriptionCountAggregateInputType | true
    _avg?: ActiveSubscriptionAvgAggregateInputType
    _sum?: ActiveSubscriptionSumAggregateInputType
    _min?: ActiveSubscriptionMinAggregateInputType
    _max?: ActiveSubscriptionMaxAggregateInputType
  }

  export type ActiveSubscriptionGroupByOutputType = {
    id: number
    customerId: number
    planId: number
    status: string
    startDate: Date
    _count: ActiveSubscriptionCountAggregateOutputType | null
    _avg: ActiveSubscriptionAvgAggregateOutputType | null
    _sum: ActiveSubscriptionSumAggregateOutputType | null
    _min: ActiveSubscriptionMinAggregateOutputType | null
    _max: ActiveSubscriptionMaxAggregateOutputType | null
  }

  type GetActiveSubscriptionGroupByPayload<T extends ActiveSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActiveSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActiveSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActiveSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], ActiveSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type ActiveSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    planId?: boolean
    status?: boolean
    startDate?: boolean
    customer?: boolean | ClientAccountDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activeSubscription"]>

  export type ActiveSubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    planId?: boolean
    status?: boolean
    startDate?: boolean
    customer?: boolean | ClientAccountDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activeSubscription"]>

  export type ActiveSubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    planId?: boolean
    status?: boolean
    startDate?: boolean
    customer?: boolean | ClientAccountDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activeSubscription"]>

  export type ActiveSubscriptionSelectScalar = {
    id?: boolean
    customerId?: boolean
    planId?: boolean
    status?: boolean
    startDate?: boolean
  }

  export type ActiveSubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "planId" | "status" | "startDate", ExtArgs["result"]["activeSubscription"]>
  export type ActiveSubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | ClientAccountDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }
  export type ActiveSubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | ClientAccountDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }
  export type ActiveSubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | ClientAccountDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }

  export type $ActiveSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActiveSubscription"
    objects: {
      customer: Prisma.$ClientAccountPayload<ExtArgs>
      plan: Prisma.$SubscriptionPlanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      customerId: number
      planId: number
      status: string
      startDate: Date
    }, ExtArgs["result"]["activeSubscription"]>
    composites: {}
  }

  type ActiveSubscriptionGetPayload<S extends boolean | null | undefined | ActiveSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$ActiveSubscriptionPayload, S>

  type ActiveSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActiveSubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActiveSubscriptionCountAggregateInputType | true
    }

  export interface ActiveSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActiveSubscription'], meta: { name: 'ActiveSubscription' } }
    /**
     * Find zero or one ActiveSubscription that matches the filter.
     * @param {ActiveSubscriptionFindUniqueArgs} args - Arguments to find a ActiveSubscription
     * @example
     * // Get one ActiveSubscription
     * const activeSubscription = await prisma.activeSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActiveSubscriptionFindUniqueArgs>(args: SelectSubset<T, ActiveSubscriptionFindUniqueArgs<ExtArgs>>): Prisma__ActiveSubscriptionClient<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActiveSubscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActiveSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a ActiveSubscription
     * @example
     * // Get one ActiveSubscription
     * const activeSubscription = await prisma.activeSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActiveSubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, ActiveSubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActiveSubscriptionClient<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActiveSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActiveSubscriptionFindFirstArgs} args - Arguments to find a ActiveSubscription
     * @example
     * // Get one ActiveSubscription
     * const activeSubscription = await prisma.activeSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActiveSubscriptionFindFirstArgs>(args?: SelectSubset<T, ActiveSubscriptionFindFirstArgs<ExtArgs>>): Prisma__ActiveSubscriptionClient<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActiveSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActiveSubscriptionFindFirstOrThrowArgs} args - Arguments to find a ActiveSubscription
     * @example
     * // Get one ActiveSubscription
     * const activeSubscription = await prisma.activeSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActiveSubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, ActiveSubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActiveSubscriptionClient<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActiveSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActiveSubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActiveSubscriptions
     * const activeSubscriptions = await prisma.activeSubscription.findMany()
     * 
     * // Get first 10 ActiveSubscriptions
     * const activeSubscriptions = await prisma.activeSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activeSubscriptionWithIdOnly = await prisma.activeSubscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActiveSubscriptionFindManyArgs>(args?: SelectSubset<T, ActiveSubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActiveSubscription.
     * @param {ActiveSubscriptionCreateArgs} args - Arguments to create a ActiveSubscription.
     * @example
     * // Create one ActiveSubscription
     * const ActiveSubscription = await prisma.activeSubscription.create({
     *   data: {
     *     // ... data to create a ActiveSubscription
     *   }
     * })
     * 
     */
    create<T extends ActiveSubscriptionCreateArgs>(args: SelectSubset<T, ActiveSubscriptionCreateArgs<ExtArgs>>): Prisma__ActiveSubscriptionClient<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActiveSubscriptions.
     * @param {ActiveSubscriptionCreateManyArgs} args - Arguments to create many ActiveSubscriptions.
     * @example
     * // Create many ActiveSubscriptions
     * const activeSubscription = await prisma.activeSubscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActiveSubscriptionCreateManyArgs>(args?: SelectSubset<T, ActiveSubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActiveSubscriptions and returns the data saved in the database.
     * @param {ActiveSubscriptionCreateManyAndReturnArgs} args - Arguments to create many ActiveSubscriptions.
     * @example
     * // Create many ActiveSubscriptions
     * const activeSubscription = await prisma.activeSubscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActiveSubscriptions and only return the `id`
     * const activeSubscriptionWithIdOnly = await prisma.activeSubscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActiveSubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, ActiveSubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActiveSubscription.
     * @param {ActiveSubscriptionDeleteArgs} args - Arguments to delete one ActiveSubscription.
     * @example
     * // Delete one ActiveSubscription
     * const ActiveSubscription = await prisma.activeSubscription.delete({
     *   where: {
     *     // ... filter to delete one ActiveSubscription
     *   }
     * })
     * 
     */
    delete<T extends ActiveSubscriptionDeleteArgs>(args: SelectSubset<T, ActiveSubscriptionDeleteArgs<ExtArgs>>): Prisma__ActiveSubscriptionClient<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActiveSubscription.
     * @param {ActiveSubscriptionUpdateArgs} args - Arguments to update one ActiveSubscription.
     * @example
     * // Update one ActiveSubscription
     * const activeSubscription = await prisma.activeSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActiveSubscriptionUpdateArgs>(args: SelectSubset<T, ActiveSubscriptionUpdateArgs<ExtArgs>>): Prisma__ActiveSubscriptionClient<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActiveSubscriptions.
     * @param {ActiveSubscriptionDeleteManyArgs} args - Arguments to filter ActiveSubscriptions to delete.
     * @example
     * // Delete a few ActiveSubscriptions
     * const { count } = await prisma.activeSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActiveSubscriptionDeleteManyArgs>(args?: SelectSubset<T, ActiveSubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActiveSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActiveSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActiveSubscriptions
     * const activeSubscription = await prisma.activeSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActiveSubscriptionUpdateManyArgs>(args: SelectSubset<T, ActiveSubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActiveSubscriptions and returns the data updated in the database.
     * @param {ActiveSubscriptionUpdateManyAndReturnArgs} args - Arguments to update many ActiveSubscriptions.
     * @example
     * // Update many ActiveSubscriptions
     * const activeSubscription = await prisma.activeSubscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActiveSubscriptions and only return the `id`
     * const activeSubscriptionWithIdOnly = await prisma.activeSubscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActiveSubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, ActiveSubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActiveSubscription.
     * @param {ActiveSubscriptionUpsertArgs} args - Arguments to update or create a ActiveSubscription.
     * @example
     * // Update or create a ActiveSubscription
     * const activeSubscription = await prisma.activeSubscription.upsert({
     *   create: {
     *     // ... data to create a ActiveSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActiveSubscription we want to update
     *   }
     * })
     */
    upsert<T extends ActiveSubscriptionUpsertArgs>(args: SelectSubset<T, ActiveSubscriptionUpsertArgs<ExtArgs>>): Prisma__ActiveSubscriptionClient<$Result.GetResult<Prisma.$ActiveSubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActiveSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActiveSubscriptionCountArgs} args - Arguments to filter ActiveSubscriptions to count.
     * @example
     * // Count the number of ActiveSubscriptions
     * const count = await prisma.activeSubscription.count({
     *   where: {
     *     // ... the filter for the ActiveSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends ActiveSubscriptionCountArgs>(
      args?: Subset<T, ActiveSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActiveSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActiveSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActiveSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActiveSubscriptionAggregateArgs>(args: Subset<T, ActiveSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetActiveSubscriptionAggregateType<T>>

    /**
     * Group by ActiveSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActiveSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActiveSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActiveSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: ActiveSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActiveSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActiveSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActiveSubscription model
   */
  readonly fields: ActiveSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActiveSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActiveSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends ClientAccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientAccountDefaultArgs<ExtArgs>>): Prisma__ClientAccountClient<$Result.GetResult<Prisma.$ClientAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    plan<T extends SubscriptionPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionPlanDefaultArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActiveSubscription model
   */
  interface ActiveSubscriptionFieldRefs {
    readonly id: FieldRef<"ActiveSubscription", 'Int'>
    readonly customerId: FieldRef<"ActiveSubscription", 'Int'>
    readonly planId: FieldRef<"ActiveSubscription", 'Int'>
    readonly status: FieldRef<"ActiveSubscription", 'String'>
    readonly startDate: FieldRef<"ActiveSubscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActiveSubscription findUnique
   */
  export type ActiveSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ActiveSubscription to fetch.
     */
    where: ActiveSubscriptionWhereUniqueInput
  }

  /**
   * ActiveSubscription findUniqueOrThrow
   */
  export type ActiveSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ActiveSubscription to fetch.
     */
    where: ActiveSubscriptionWhereUniqueInput
  }

  /**
   * ActiveSubscription findFirst
   */
  export type ActiveSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ActiveSubscription to fetch.
     */
    where?: ActiveSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActiveSubscriptions to fetch.
     */
    orderBy?: ActiveSubscriptionOrderByWithRelationInput | ActiveSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActiveSubscriptions.
     */
    cursor?: ActiveSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActiveSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActiveSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActiveSubscriptions.
     */
    distinct?: ActiveSubscriptionScalarFieldEnum | ActiveSubscriptionScalarFieldEnum[]
  }

  /**
   * ActiveSubscription findFirstOrThrow
   */
  export type ActiveSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ActiveSubscription to fetch.
     */
    where?: ActiveSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActiveSubscriptions to fetch.
     */
    orderBy?: ActiveSubscriptionOrderByWithRelationInput | ActiveSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActiveSubscriptions.
     */
    cursor?: ActiveSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActiveSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActiveSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActiveSubscriptions.
     */
    distinct?: ActiveSubscriptionScalarFieldEnum | ActiveSubscriptionScalarFieldEnum[]
  }

  /**
   * ActiveSubscription findMany
   */
  export type ActiveSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ActiveSubscriptions to fetch.
     */
    where?: ActiveSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActiveSubscriptions to fetch.
     */
    orderBy?: ActiveSubscriptionOrderByWithRelationInput | ActiveSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActiveSubscriptions.
     */
    cursor?: ActiveSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActiveSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActiveSubscriptions.
     */
    skip?: number
    distinct?: ActiveSubscriptionScalarFieldEnum | ActiveSubscriptionScalarFieldEnum[]
  }

  /**
   * ActiveSubscription create
   */
  export type ActiveSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a ActiveSubscription.
     */
    data: XOR<ActiveSubscriptionCreateInput, ActiveSubscriptionUncheckedCreateInput>
  }

  /**
   * ActiveSubscription createMany
   */
  export type ActiveSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActiveSubscriptions.
     */
    data: ActiveSubscriptionCreateManyInput | ActiveSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActiveSubscription createManyAndReturn
   */
  export type ActiveSubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many ActiveSubscriptions.
     */
    data: ActiveSubscriptionCreateManyInput | ActiveSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActiveSubscription update
   */
  export type ActiveSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a ActiveSubscription.
     */
    data: XOR<ActiveSubscriptionUpdateInput, ActiveSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which ActiveSubscription to update.
     */
    where: ActiveSubscriptionWhereUniqueInput
  }

  /**
   * ActiveSubscription updateMany
   */
  export type ActiveSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActiveSubscriptions.
     */
    data: XOR<ActiveSubscriptionUpdateManyMutationInput, ActiveSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which ActiveSubscriptions to update
     */
    where?: ActiveSubscriptionWhereInput
    /**
     * Limit how many ActiveSubscriptions to update.
     */
    limit?: number
  }

  /**
   * ActiveSubscription updateManyAndReturn
   */
  export type ActiveSubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update ActiveSubscriptions.
     */
    data: XOR<ActiveSubscriptionUpdateManyMutationInput, ActiveSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which ActiveSubscriptions to update
     */
    where?: ActiveSubscriptionWhereInput
    /**
     * Limit how many ActiveSubscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActiveSubscription upsert
   */
  export type ActiveSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the ActiveSubscription to update in case it exists.
     */
    where: ActiveSubscriptionWhereUniqueInput
    /**
     * In case the ActiveSubscription found by the `where` argument doesn't exist, create a new ActiveSubscription with this data.
     */
    create: XOR<ActiveSubscriptionCreateInput, ActiveSubscriptionUncheckedCreateInput>
    /**
     * In case the ActiveSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActiveSubscriptionUpdateInput, ActiveSubscriptionUncheckedUpdateInput>
  }

  /**
   * ActiveSubscription delete
   */
  export type ActiveSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which ActiveSubscription to delete.
     */
    where: ActiveSubscriptionWhereUniqueInput
  }

  /**
   * ActiveSubscription deleteMany
   */
  export type ActiveSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActiveSubscriptions to delete
     */
    where?: ActiveSubscriptionWhereInput
    /**
     * Limit how many ActiveSubscriptions to delete.
     */
    limit?: number
  }

  /**
   * ActiveSubscription without action
   */
  export type ActiveSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActiveSubscription
     */
    select?: ActiveSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActiveSubscription
     */
    omit?: ActiveSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActiveSubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model CurrentInventory
   */

  export type AggregateCurrentInventory = {
    _count: CurrentInventoryCountAggregateOutputType | null
    _avg: CurrentInventoryAvgAggregateOutputType | null
    _sum: CurrentInventorySumAggregateOutputType | null
    _min: CurrentInventoryMinAggregateOutputType | null
    _max: CurrentInventoryMaxAggregateOutputType | null
  }

  export type CurrentInventoryAvgAggregateOutputType = {
    id: number | null
    distributionCenterId: number | null
    productSKUId: number | null
    quantity: number | null
  }

  export type CurrentInventorySumAggregateOutputType = {
    id: number | null
    distributionCenterId: number | null
    productSKUId: number | null
    quantity: number | null
  }

  export type CurrentInventoryMinAggregateOutputType = {
    id: number | null
    distributionCenterId: number | null
    productSKUId: number | null
    quantity: number | null
  }

  export type CurrentInventoryMaxAggregateOutputType = {
    id: number | null
    distributionCenterId: number | null
    productSKUId: number | null
    quantity: number | null
  }

  export type CurrentInventoryCountAggregateOutputType = {
    id: number
    distributionCenterId: number
    productSKUId: number
    quantity: number
    _all: number
  }


  export type CurrentInventoryAvgAggregateInputType = {
    id?: true
    distributionCenterId?: true
    productSKUId?: true
    quantity?: true
  }

  export type CurrentInventorySumAggregateInputType = {
    id?: true
    distributionCenterId?: true
    productSKUId?: true
    quantity?: true
  }

  export type CurrentInventoryMinAggregateInputType = {
    id?: true
    distributionCenterId?: true
    productSKUId?: true
    quantity?: true
  }

  export type CurrentInventoryMaxAggregateInputType = {
    id?: true
    distributionCenterId?: true
    productSKUId?: true
    quantity?: true
  }

  export type CurrentInventoryCountAggregateInputType = {
    id?: true
    distributionCenterId?: true
    productSKUId?: true
    quantity?: true
    _all?: true
  }

  export type CurrentInventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CurrentInventory to aggregate.
     */
    where?: CurrentInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CurrentInventories to fetch.
     */
    orderBy?: CurrentInventoryOrderByWithRelationInput | CurrentInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CurrentInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CurrentInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CurrentInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CurrentInventories
    **/
    _count?: true | CurrentInventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CurrentInventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CurrentInventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CurrentInventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CurrentInventoryMaxAggregateInputType
  }

  export type GetCurrentInventoryAggregateType<T extends CurrentInventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCurrentInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurrentInventory[P]>
      : GetScalarType<T[P], AggregateCurrentInventory[P]>
  }




  export type CurrentInventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CurrentInventoryWhereInput
    orderBy?: CurrentInventoryOrderByWithAggregationInput | CurrentInventoryOrderByWithAggregationInput[]
    by: CurrentInventoryScalarFieldEnum[] | CurrentInventoryScalarFieldEnum
    having?: CurrentInventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CurrentInventoryCountAggregateInputType | true
    _avg?: CurrentInventoryAvgAggregateInputType
    _sum?: CurrentInventorySumAggregateInputType
    _min?: CurrentInventoryMinAggregateInputType
    _max?: CurrentInventoryMaxAggregateInputType
  }

  export type CurrentInventoryGroupByOutputType = {
    id: number
    distributionCenterId: number
    productSKUId: number
    quantity: number
    _count: CurrentInventoryCountAggregateOutputType | null
    _avg: CurrentInventoryAvgAggregateOutputType | null
    _sum: CurrentInventorySumAggregateOutputType | null
    _min: CurrentInventoryMinAggregateOutputType | null
    _max: CurrentInventoryMaxAggregateOutputType | null
  }

  type GetCurrentInventoryGroupByPayload<T extends CurrentInventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CurrentInventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CurrentInventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CurrentInventoryGroupByOutputType[P]>
            : GetScalarType<T[P], CurrentInventoryGroupByOutputType[P]>
        }
      >
    >


  export type CurrentInventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    distributionCenterId?: boolean
    productSKUId?: boolean
    quantity?: boolean
    distributionCenter?: boolean | DistributionCenterDefaultArgs<ExtArgs>
    productSKU?: boolean | ProductSKUDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["currentInventory"]>

  export type CurrentInventorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    distributionCenterId?: boolean
    productSKUId?: boolean
    quantity?: boolean
    distributionCenter?: boolean | DistributionCenterDefaultArgs<ExtArgs>
    productSKU?: boolean | ProductSKUDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["currentInventory"]>

  export type CurrentInventorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    distributionCenterId?: boolean
    productSKUId?: boolean
    quantity?: boolean
    distributionCenter?: boolean | DistributionCenterDefaultArgs<ExtArgs>
    productSKU?: boolean | ProductSKUDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["currentInventory"]>

  export type CurrentInventorySelectScalar = {
    id?: boolean
    distributionCenterId?: boolean
    productSKUId?: boolean
    quantity?: boolean
  }

  export type CurrentInventoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "distributionCenterId" | "productSKUId" | "quantity", ExtArgs["result"]["currentInventory"]>
  export type CurrentInventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionCenter?: boolean | DistributionCenterDefaultArgs<ExtArgs>
    productSKU?: boolean | ProductSKUDefaultArgs<ExtArgs>
  }
  export type CurrentInventoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionCenter?: boolean | DistributionCenterDefaultArgs<ExtArgs>
    productSKU?: boolean | ProductSKUDefaultArgs<ExtArgs>
  }
  export type CurrentInventoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionCenter?: boolean | DistributionCenterDefaultArgs<ExtArgs>
    productSKU?: boolean | ProductSKUDefaultArgs<ExtArgs>
  }

  export type $CurrentInventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CurrentInventory"
    objects: {
      distributionCenter: Prisma.$DistributionCenterPayload<ExtArgs>
      productSKU: Prisma.$ProductSKUPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      distributionCenterId: number
      productSKUId: number
      quantity: number
    }, ExtArgs["result"]["currentInventory"]>
    composites: {}
  }

  type CurrentInventoryGetPayload<S extends boolean | null | undefined | CurrentInventoryDefaultArgs> = $Result.GetResult<Prisma.$CurrentInventoryPayload, S>

  type CurrentInventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CurrentInventoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CurrentInventoryCountAggregateInputType | true
    }

  export interface CurrentInventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CurrentInventory'], meta: { name: 'CurrentInventory' } }
    /**
     * Find zero or one CurrentInventory that matches the filter.
     * @param {CurrentInventoryFindUniqueArgs} args - Arguments to find a CurrentInventory
     * @example
     * // Get one CurrentInventory
     * const currentInventory = await prisma.currentInventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CurrentInventoryFindUniqueArgs>(args: SelectSubset<T, CurrentInventoryFindUniqueArgs<ExtArgs>>): Prisma__CurrentInventoryClient<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CurrentInventory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CurrentInventoryFindUniqueOrThrowArgs} args - Arguments to find a CurrentInventory
     * @example
     * // Get one CurrentInventory
     * const currentInventory = await prisma.currentInventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CurrentInventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CurrentInventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CurrentInventoryClient<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CurrentInventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrentInventoryFindFirstArgs} args - Arguments to find a CurrentInventory
     * @example
     * // Get one CurrentInventory
     * const currentInventory = await prisma.currentInventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CurrentInventoryFindFirstArgs>(args?: SelectSubset<T, CurrentInventoryFindFirstArgs<ExtArgs>>): Prisma__CurrentInventoryClient<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CurrentInventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrentInventoryFindFirstOrThrowArgs} args - Arguments to find a CurrentInventory
     * @example
     * // Get one CurrentInventory
     * const currentInventory = await prisma.currentInventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CurrentInventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CurrentInventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CurrentInventoryClient<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CurrentInventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrentInventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CurrentInventories
     * const currentInventories = await prisma.currentInventory.findMany()
     * 
     * // Get first 10 CurrentInventories
     * const currentInventories = await prisma.currentInventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const currentInventoryWithIdOnly = await prisma.currentInventory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CurrentInventoryFindManyArgs>(args?: SelectSubset<T, CurrentInventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CurrentInventory.
     * @param {CurrentInventoryCreateArgs} args - Arguments to create a CurrentInventory.
     * @example
     * // Create one CurrentInventory
     * const CurrentInventory = await prisma.currentInventory.create({
     *   data: {
     *     // ... data to create a CurrentInventory
     *   }
     * })
     * 
     */
    create<T extends CurrentInventoryCreateArgs>(args: SelectSubset<T, CurrentInventoryCreateArgs<ExtArgs>>): Prisma__CurrentInventoryClient<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CurrentInventories.
     * @param {CurrentInventoryCreateManyArgs} args - Arguments to create many CurrentInventories.
     * @example
     * // Create many CurrentInventories
     * const currentInventory = await prisma.currentInventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CurrentInventoryCreateManyArgs>(args?: SelectSubset<T, CurrentInventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CurrentInventories and returns the data saved in the database.
     * @param {CurrentInventoryCreateManyAndReturnArgs} args - Arguments to create many CurrentInventories.
     * @example
     * // Create many CurrentInventories
     * const currentInventory = await prisma.currentInventory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CurrentInventories and only return the `id`
     * const currentInventoryWithIdOnly = await prisma.currentInventory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CurrentInventoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CurrentInventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CurrentInventory.
     * @param {CurrentInventoryDeleteArgs} args - Arguments to delete one CurrentInventory.
     * @example
     * // Delete one CurrentInventory
     * const CurrentInventory = await prisma.currentInventory.delete({
     *   where: {
     *     // ... filter to delete one CurrentInventory
     *   }
     * })
     * 
     */
    delete<T extends CurrentInventoryDeleteArgs>(args: SelectSubset<T, CurrentInventoryDeleteArgs<ExtArgs>>): Prisma__CurrentInventoryClient<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CurrentInventory.
     * @param {CurrentInventoryUpdateArgs} args - Arguments to update one CurrentInventory.
     * @example
     * // Update one CurrentInventory
     * const currentInventory = await prisma.currentInventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CurrentInventoryUpdateArgs>(args: SelectSubset<T, CurrentInventoryUpdateArgs<ExtArgs>>): Prisma__CurrentInventoryClient<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CurrentInventories.
     * @param {CurrentInventoryDeleteManyArgs} args - Arguments to filter CurrentInventories to delete.
     * @example
     * // Delete a few CurrentInventories
     * const { count } = await prisma.currentInventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CurrentInventoryDeleteManyArgs>(args?: SelectSubset<T, CurrentInventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CurrentInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrentInventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CurrentInventories
     * const currentInventory = await prisma.currentInventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CurrentInventoryUpdateManyArgs>(args: SelectSubset<T, CurrentInventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CurrentInventories and returns the data updated in the database.
     * @param {CurrentInventoryUpdateManyAndReturnArgs} args - Arguments to update many CurrentInventories.
     * @example
     * // Update many CurrentInventories
     * const currentInventory = await prisma.currentInventory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CurrentInventories and only return the `id`
     * const currentInventoryWithIdOnly = await prisma.currentInventory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CurrentInventoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CurrentInventoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CurrentInventory.
     * @param {CurrentInventoryUpsertArgs} args - Arguments to update or create a CurrentInventory.
     * @example
     * // Update or create a CurrentInventory
     * const currentInventory = await prisma.currentInventory.upsert({
     *   create: {
     *     // ... data to create a CurrentInventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CurrentInventory we want to update
     *   }
     * })
     */
    upsert<T extends CurrentInventoryUpsertArgs>(args: SelectSubset<T, CurrentInventoryUpsertArgs<ExtArgs>>): Prisma__CurrentInventoryClient<$Result.GetResult<Prisma.$CurrentInventoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CurrentInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrentInventoryCountArgs} args - Arguments to filter CurrentInventories to count.
     * @example
     * // Count the number of CurrentInventories
     * const count = await prisma.currentInventory.count({
     *   where: {
     *     // ... the filter for the CurrentInventories we want to count
     *   }
     * })
    **/
    count<T extends CurrentInventoryCountArgs>(
      args?: Subset<T, CurrentInventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CurrentInventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CurrentInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrentInventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CurrentInventoryAggregateArgs>(args: Subset<T, CurrentInventoryAggregateArgs>): Prisma.PrismaPromise<GetCurrentInventoryAggregateType<T>>

    /**
     * Group by CurrentInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CurrentInventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CurrentInventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CurrentInventoryGroupByArgs['orderBy'] }
        : { orderBy?: CurrentInventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CurrentInventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCurrentInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CurrentInventory model
   */
  readonly fields: CurrentInventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CurrentInventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CurrentInventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    distributionCenter<T extends DistributionCenterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DistributionCenterDefaultArgs<ExtArgs>>): Prisma__DistributionCenterClient<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    productSKU<T extends ProductSKUDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductSKUDefaultArgs<ExtArgs>>): Prisma__ProductSKUClient<$Result.GetResult<Prisma.$ProductSKUPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CurrentInventory model
   */
  interface CurrentInventoryFieldRefs {
    readonly id: FieldRef<"CurrentInventory", 'Int'>
    readonly distributionCenterId: FieldRef<"CurrentInventory", 'Int'>
    readonly productSKUId: FieldRef<"CurrentInventory", 'Int'>
    readonly quantity: FieldRef<"CurrentInventory", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CurrentInventory findUnique
   */
  export type CurrentInventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryInclude<ExtArgs> | null
    /**
     * Filter, which CurrentInventory to fetch.
     */
    where: CurrentInventoryWhereUniqueInput
  }

  /**
   * CurrentInventory findUniqueOrThrow
   */
  export type CurrentInventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryInclude<ExtArgs> | null
    /**
     * Filter, which CurrentInventory to fetch.
     */
    where: CurrentInventoryWhereUniqueInput
  }

  /**
   * CurrentInventory findFirst
   */
  export type CurrentInventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryInclude<ExtArgs> | null
    /**
     * Filter, which CurrentInventory to fetch.
     */
    where?: CurrentInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CurrentInventories to fetch.
     */
    orderBy?: CurrentInventoryOrderByWithRelationInput | CurrentInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CurrentInventories.
     */
    cursor?: CurrentInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CurrentInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CurrentInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CurrentInventories.
     */
    distinct?: CurrentInventoryScalarFieldEnum | CurrentInventoryScalarFieldEnum[]
  }

  /**
   * CurrentInventory findFirstOrThrow
   */
  export type CurrentInventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryInclude<ExtArgs> | null
    /**
     * Filter, which CurrentInventory to fetch.
     */
    where?: CurrentInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CurrentInventories to fetch.
     */
    orderBy?: CurrentInventoryOrderByWithRelationInput | CurrentInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CurrentInventories.
     */
    cursor?: CurrentInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CurrentInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CurrentInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CurrentInventories.
     */
    distinct?: CurrentInventoryScalarFieldEnum | CurrentInventoryScalarFieldEnum[]
  }

  /**
   * CurrentInventory findMany
   */
  export type CurrentInventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryInclude<ExtArgs> | null
    /**
     * Filter, which CurrentInventories to fetch.
     */
    where?: CurrentInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CurrentInventories to fetch.
     */
    orderBy?: CurrentInventoryOrderByWithRelationInput | CurrentInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CurrentInventories.
     */
    cursor?: CurrentInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CurrentInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CurrentInventories.
     */
    skip?: number
    distinct?: CurrentInventoryScalarFieldEnum | CurrentInventoryScalarFieldEnum[]
  }

  /**
   * CurrentInventory create
   */
  export type CurrentInventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a CurrentInventory.
     */
    data: XOR<CurrentInventoryCreateInput, CurrentInventoryUncheckedCreateInput>
  }

  /**
   * CurrentInventory createMany
   */
  export type CurrentInventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CurrentInventories.
     */
    data: CurrentInventoryCreateManyInput | CurrentInventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CurrentInventory createManyAndReturn
   */
  export type CurrentInventoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * The data used to create many CurrentInventories.
     */
    data: CurrentInventoryCreateManyInput | CurrentInventoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CurrentInventory update
   */
  export type CurrentInventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a CurrentInventory.
     */
    data: XOR<CurrentInventoryUpdateInput, CurrentInventoryUncheckedUpdateInput>
    /**
     * Choose, which CurrentInventory to update.
     */
    where: CurrentInventoryWhereUniqueInput
  }

  /**
   * CurrentInventory updateMany
   */
  export type CurrentInventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CurrentInventories.
     */
    data: XOR<CurrentInventoryUpdateManyMutationInput, CurrentInventoryUncheckedUpdateManyInput>
    /**
     * Filter which CurrentInventories to update
     */
    where?: CurrentInventoryWhereInput
    /**
     * Limit how many CurrentInventories to update.
     */
    limit?: number
  }

  /**
   * CurrentInventory updateManyAndReturn
   */
  export type CurrentInventoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * The data used to update CurrentInventories.
     */
    data: XOR<CurrentInventoryUpdateManyMutationInput, CurrentInventoryUncheckedUpdateManyInput>
    /**
     * Filter which CurrentInventories to update
     */
    where?: CurrentInventoryWhereInput
    /**
     * Limit how many CurrentInventories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CurrentInventory upsert
   */
  export type CurrentInventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the CurrentInventory to update in case it exists.
     */
    where: CurrentInventoryWhereUniqueInput
    /**
     * In case the CurrentInventory found by the `where` argument doesn't exist, create a new CurrentInventory with this data.
     */
    create: XOR<CurrentInventoryCreateInput, CurrentInventoryUncheckedCreateInput>
    /**
     * In case the CurrentInventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CurrentInventoryUpdateInput, CurrentInventoryUncheckedUpdateInput>
  }

  /**
   * CurrentInventory delete
   */
  export type CurrentInventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryInclude<ExtArgs> | null
    /**
     * Filter which CurrentInventory to delete.
     */
    where: CurrentInventoryWhereUniqueInput
  }

  /**
   * CurrentInventory deleteMany
   */
  export type CurrentInventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CurrentInventories to delete
     */
    where?: CurrentInventoryWhereInput
    /**
     * Limit how many CurrentInventories to delete.
     */
    limit?: number
  }

  /**
   * CurrentInventory without action
   */
  export type CurrentInventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CurrentInventory
     */
    select?: CurrentInventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CurrentInventory
     */
    omit?: CurrentInventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CurrentInventoryInclude<ExtArgs> | null
  }


  /**
   * Model FulfillmentWave
   */

  export type AggregateFulfillmentWave = {
    _count: FulfillmentWaveCountAggregateOutputType | null
    _avg: FulfillmentWaveAvgAggregateOutputType | null
    _sum: FulfillmentWaveSumAggregateOutputType | null
    _min: FulfillmentWaveMinAggregateOutputType | null
    _max: FulfillmentWaveMaxAggregateOutputType | null
  }

  export type FulfillmentWaveAvgAggregateOutputType = {
    id: number | null
    distributionCenterId: number | null
  }

  export type FulfillmentWaveSumAggregateOutputType = {
    id: number | null
    distributionCenterId: number | null
  }

  export type FulfillmentWaveMinAggregateOutputType = {
    id: number | null
    distributionCenterId: number | null
    waveCode: string | null
  }

  export type FulfillmentWaveMaxAggregateOutputType = {
    id: number | null
    distributionCenterId: number | null
    waveCode: string | null
  }

  export type FulfillmentWaveCountAggregateOutputType = {
    id: number
    distributionCenterId: number
    waveCode: number
    _all: number
  }


  export type FulfillmentWaveAvgAggregateInputType = {
    id?: true
    distributionCenterId?: true
  }

  export type FulfillmentWaveSumAggregateInputType = {
    id?: true
    distributionCenterId?: true
  }

  export type FulfillmentWaveMinAggregateInputType = {
    id?: true
    distributionCenterId?: true
    waveCode?: true
  }

  export type FulfillmentWaveMaxAggregateInputType = {
    id?: true
    distributionCenterId?: true
    waveCode?: true
  }

  export type FulfillmentWaveCountAggregateInputType = {
    id?: true
    distributionCenterId?: true
    waveCode?: true
    _all?: true
  }

  export type FulfillmentWaveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FulfillmentWave to aggregate.
     */
    where?: FulfillmentWaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FulfillmentWaves to fetch.
     */
    orderBy?: FulfillmentWaveOrderByWithRelationInput | FulfillmentWaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FulfillmentWaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FulfillmentWaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FulfillmentWaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FulfillmentWaves
    **/
    _count?: true | FulfillmentWaveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FulfillmentWaveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FulfillmentWaveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FulfillmentWaveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FulfillmentWaveMaxAggregateInputType
  }

  export type GetFulfillmentWaveAggregateType<T extends FulfillmentWaveAggregateArgs> = {
        [P in keyof T & keyof AggregateFulfillmentWave]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFulfillmentWave[P]>
      : GetScalarType<T[P], AggregateFulfillmentWave[P]>
  }




  export type FulfillmentWaveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FulfillmentWaveWhereInput
    orderBy?: FulfillmentWaveOrderByWithAggregationInput | FulfillmentWaveOrderByWithAggregationInput[]
    by: FulfillmentWaveScalarFieldEnum[] | FulfillmentWaveScalarFieldEnum
    having?: FulfillmentWaveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FulfillmentWaveCountAggregateInputType | true
    _avg?: FulfillmentWaveAvgAggregateInputType
    _sum?: FulfillmentWaveSumAggregateInputType
    _min?: FulfillmentWaveMinAggregateInputType
    _max?: FulfillmentWaveMaxAggregateInputType
  }

  export type FulfillmentWaveGroupByOutputType = {
    id: number
    distributionCenterId: number
    waveCode: string
    _count: FulfillmentWaveCountAggregateOutputType | null
    _avg: FulfillmentWaveAvgAggregateOutputType | null
    _sum: FulfillmentWaveSumAggregateOutputType | null
    _min: FulfillmentWaveMinAggregateOutputType | null
    _max: FulfillmentWaveMaxAggregateOutputType | null
  }

  type GetFulfillmentWaveGroupByPayload<T extends FulfillmentWaveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FulfillmentWaveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FulfillmentWaveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FulfillmentWaveGroupByOutputType[P]>
            : GetScalarType<T[P], FulfillmentWaveGroupByOutputType[P]>
        }
      >
    >


  export type FulfillmentWaveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    distributionCenterId?: boolean
    waveCode?: boolean
    distributionCenter?: boolean | DistributionCenterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fulfillmentWave"]>

  export type FulfillmentWaveSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    distributionCenterId?: boolean
    waveCode?: boolean
    distributionCenter?: boolean | DistributionCenterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fulfillmentWave"]>

  export type FulfillmentWaveSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    distributionCenterId?: boolean
    waveCode?: boolean
    distributionCenter?: boolean | DistributionCenterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fulfillmentWave"]>

  export type FulfillmentWaveSelectScalar = {
    id?: boolean
    distributionCenterId?: boolean
    waveCode?: boolean
  }

  export type FulfillmentWaveOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "distributionCenterId" | "waveCode", ExtArgs["result"]["fulfillmentWave"]>
  export type FulfillmentWaveInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionCenter?: boolean | DistributionCenterDefaultArgs<ExtArgs>
  }
  export type FulfillmentWaveIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionCenter?: boolean | DistributionCenterDefaultArgs<ExtArgs>
  }
  export type FulfillmentWaveIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributionCenter?: boolean | DistributionCenterDefaultArgs<ExtArgs>
  }

  export type $FulfillmentWavePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FulfillmentWave"
    objects: {
      distributionCenter: Prisma.$DistributionCenterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      distributionCenterId: number
      waveCode: string
    }, ExtArgs["result"]["fulfillmentWave"]>
    composites: {}
  }

  type FulfillmentWaveGetPayload<S extends boolean | null | undefined | FulfillmentWaveDefaultArgs> = $Result.GetResult<Prisma.$FulfillmentWavePayload, S>

  type FulfillmentWaveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FulfillmentWaveFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FulfillmentWaveCountAggregateInputType | true
    }

  export interface FulfillmentWaveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FulfillmentWave'], meta: { name: 'FulfillmentWave' } }
    /**
     * Find zero or one FulfillmentWave that matches the filter.
     * @param {FulfillmentWaveFindUniqueArgs} args - Arguments to find a FulfillmentWave
     * @example
     * // Get one FulfillmentWave
     * const fulfillmentWave = await prisma.fulfillmentWave.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FulfillmentWaveFindUniqueArgs>(args: SelectSubset<T, FulfillmentWaveFindUniqueArgs<ExtArgs>>): Prisma__FulfillmentWaveClient<$Result.GetResult<Prisma.$FulfillmentWavePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FulfillmentWave that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FulfillmentWaveFindUniqueOrThrowArgs} args - Arguments to find a FulfillmentWave
     * @example
     * // Get one FulfillmentWave
     * const fulfillmentWave = await prisma.fulfillmentWave.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FulfillmentWaveFindUniqueOrThrowArgs>(args: SelectSubset<T, FulfillmentWaveFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FulfillmentWaveClient<$Result.GetResult<Prisma.$FulfillmentWavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FulfillmentWave that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FulfillmentWaveFindFirstArgs} args - Arguments to find a FulfillmentWave
     * @example
     * // Get one FulfillmentWave
     * const fulfillmentWave = await prisma.fulfillmentWave.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FulfillmentWaveFindFirstArgs>(args?: SelectSubset<T, FulfillmentWaveFindFirstArgs<ExtArgs>>): Prisma__FulfillmentWaveClient<$Result.GetResult<Prisma.$FulfillmentWavePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FulfillmentWave that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FulfillmentWaveFindFirstOrThrowArgs} args - Arguments to find a FulfillmentWave
     * @example
     * // Get one FulfillmentWave
     * const fulfillmentWave = await prisma.fulfillmentWave.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FulfillmentWaveFindFirstOrThrowArgs>(args?: SelectSubset<T, FulfillmentWaveFindFirstOrThrowArgs<ExtArgs>>): Prisma__FulfillmentWaveClient<$Result.GetResult<Prisma.$FulfillmentWavePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FulfillmentWaves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FulfillmentWaveFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FulfillmentWaves
     * const fulfillmentWaves = await prisma.fulfillmentWave.findMany()
     * 
     * // Get first 10 FulfillmentWaves
     * const fulfillmentWaves = await prisma.fulfillmentWave.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fulfillmentWaveWithIdOnly = await prisma.fulfillmentWave.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FulfillmentWaveFindManyArgs>(args?: SelectSubset<T, FulfillmentWaveFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FulfillmentWavePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FulfillmentWave.
     * @param {FulfillmentWaveCreateArgs} args - Arguments to create a FulfillmentWave.
     * @example
     * // Create one FulfillmentWave
     * const FulfillmentWave = await prisma.fulfillmentWave.create({
     *   data: {
     *     // ... data to create a FulfillmentWave
     *   }
     * })
     * 
     */
    create<T extends FulfillmentWaveCreateArgs>(args: SelectSubset<T, FulfillmentWaveCreateArgs<ExtArgs>>): Prisma__FulfillmentWaveClient<$Result.GetResult<Prisma.$FulfillmentWavePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FulfillmentWaves.
     * @param {FulfillmentWaveCreateManyArgs} args - Arguments to create many FulfillmentWaves.
     * @example
     * // Create many FulfillmentWaves
     * const fulfillmentWave = await prisma.fulfillmentWave.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FulfillmentWaveCreateManyArgs>(args?: SelectSubset<T, FulfillmentWaveCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FulfillmentWaves and returns the data saved in the database.
     * @param {FulfillmentWaveCreateManyAndReturnArgs} args - Arguments to create many FulfillmentWaves.
     * @example
     * // Create many FulfillmentWaves
     * const fulfillmentWave = await prisma.fulfillmentWave.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FulfillmentWaves and only return the `id`
     * const fulfillmentWaveWithIdOnly = await prisma.fulfillmentWave.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FulfillmentWaveCreateManyAndReturnArgs>(args?: SelectSubset<T, FulfillmentWaveCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FulfillmentWavePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FulfillmentWave.
     * @param {FulfillmentWaveDeleteArgs} args - Arguments to delete one FulfillmentWave.
     * @example
     * // Delete one FulfillmentWave
     * const FulfillmentWave = await prisma.fulfillmentWave.delete({
     *   where: {
     *     // ... filter to delete one FulfillmentWave
     *   }
     * })
     * 
     */
    delete<T extends FulfillmentWaveDeleteArgs>(args: SelectSubset<T, FulfillmentWaveDeleteArgs<ExtArgs>>): Prisma__FulfillmentWaveClient<$Result.GetResult<Prisma.$FulfillmentWavePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FulfillmentWave.
     * @param {FulfillmentWaveUpdateArgs} args - Arguments to update one FulfillmentWave.
     * @example
     * // Update one FulfillmentWave
     * const fulfillmentWave = await prisma.fulfillmentWave.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FulfillmentWaveUpdateArgs>(args: SelectSubset<T, FulfillmentWaveUpdateArgs<ExtArgs>>): Prisma__FulfillmentWaveClient<$Result.GetResult<Prisma.$FulfillmentWavePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FulfillmentWaves.
     * @param {FulfillmentWaveDeleteManyArgs} args - Arguments to filter FulfillmentWaves to delete.
     * @example
     * // Delete a few FulfillmentWaves
     * const { count } = await prisma.fulfillmentWave.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FulfillmentWaveDeleteManyArgs>(args?: SelectSubset<T, FulfillmentWaveDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FulfillmentWaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FulfillmentWaveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FulfillmentWaves
     * const fulfillmentWave = await prisma.fulfillmentWave.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FulfillmentWaveUpdateManyArgs>(args: SelectSubset<T, FulfillmentWaveUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FulfillmentWaves and returns the data updated in the database.
     * @param {FulfillmentWaveUpdateManyAndReturnArgs} args - Arguments to update many FulfillmentWaves.
     * @example
     * // Update many FulfillmentWaves
     * const fulfillmentWave = await prisma.fulfillmentWave.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FulfillmentWaves and only return the `id`
     * const fulfillmentWaveWithIdOnly = await prisma.fulfillmentWave.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FulfillmentWaveUpdateManyAndReturnArgs>(args: SelectSubset<T, FulfillmentWaveUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FulfillmentWavePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FulfillmentWave.
     * @param {FulfillmentWaveUpsertArgs} args - Arguments to update or create a FulfillmentWave.
     * @example
     * // Update or create a FulfillmentWave
     * const fulfillmentWave = await prisma.fulfillmentWave.upsert({
     *   create: {
     *     // ... data to create a FulfillmentWave
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FulfillmentWave we want to update
     *   }
     * })
     */
    upsert<T extends FulfillmentWaveUpsertArgs>(args: SelectSubset<T, FulfillmentWaveUpsertArgs<ExtArgs>>): Prisma__FulfillmentWaveClient<$Result.GetResult<Prisma.$FulfillmentWavePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FulfillmentWaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FulfillmentWaveCountArgs} args - Arguments to filter FulfillmentWaves to count.
     * @example
     * // Count the number of FulfillmentWaves
     * const count = await prisma.fulfillmentWave.count({
     *   where: {
     *     // ... the filter for the FulfillmentWaves we want to count
     *   }
     * })
    **/
    count<T extends FulfillmentWaveCountArgs>(
      args?: Subset<T, FulfillmentWaveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FulfillmentWaveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FulfillmentWave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FulfillmentWaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FulfillmentWaveAggregateArgs>(args: Subset<T, FulfillmentWaveAggregateArgs>): Prisma.PrismaPromise<GetFulfillmentWaveAggregateType<T>>

    /**
     * Group by FulfillmentWave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FulfillmentWaveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FulfillmentWaveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FulfillmentWaveGroupByArgs['orderBy'] }
        : { orderBy?: FulfillmentWaveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FulfillmentWaveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFulfillmentWaveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FulfillmentWave model
   */
  readonly fields: FulfillmentWaveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FulfillmentWave.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FulfillmentWaveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    distributionCenter<T extends DistributionCenterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DistributionCenterDefaultArgs<ExtArgs>>): Prisma__DistributionCenterClient<$Result.GetResult<Prisma.$DistributionCenterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FulfillmentWave model
   */
  interface FulfillmentWaveFieldRefs {
    readonly id: FieldRef<"FulfillmentWave", 'Int'>
    readonly distributionCenterId: FieldRef<"FulfillmentWave", 'Int'>
    readonly waveCode: FieldRef<"FulfillmentWave", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FulfillmentWave findUnique
   */
  export type FulfillmentWaveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveInclude<ExtArgs> | null
    /**
     * Filter, which FulfillmentWave to fetch.
     */
    where: FulfillmentWaveWhereUniqueInput
  }

  /**
   * FulfillmentWave findUniqueOrThrow
   */
  export type FulfillmentWaveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveInclude<ExtArgs> | null
    /**
     * Filter, which FulfillmentWave to fetch.
     */
    where: FulfillmentWaveWhereUniqueInput
  }

  /**
   * FulfillmentWave findFirst
   */
  export type FulfillmentWaveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveInclude<ExtArgs> | null
    /**
     * Filter, which FulfillmentWave to fetch.
     */
    where?: FulfillmentWaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FulfillmentWaves to fetch.
     */
    orderBy?: FulfillmentWaveOrderByWithRelationInput | FulfillmentWaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FulfillmentWaves.
     */
    cursor?: FulfillmentWaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FulfillmentWaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FulfillmentWaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FulfillmentWaves.
     */
    distinct?: FulfillmentWaveScalarFieldEnum | FulfillmentWaveScalarFieldEnum[]
  }

  /**
   * FulfillmentWave findFirstOrThrow
   */
  export type FulfillmentWaveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveInclude<ExtArgs> | null
    /**
     * Filter, which FulfillmentWave to fetch.
     */
    where?: FulfillmentWaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FulfillmentWaves to fetch.
     */
    orderBy?: FulfillmentWaveOrderByWithRelationInput | FulfillmentWaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FulfillmentWaves.
     */
    cursor?: FulfillmentWaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FulfillmentWaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FulfillmentWaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FulfillmentWaves.
     */
    distinct?: FulfillmentWaveScalarFieldEnum | FulfillmentWaveScalarFieldEnum[]
  }

  /**
   * FulfillmentWave findMany
   */
  export type FulfillmentWaveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveInclude<ExtArgs> | null
    /**
     * Filter, which FulfillmentWaves to fetch.
     */
    where?: FulfillmentWaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FulfillmentWaves to fetch.
     */
    orderBy?: FulfillmentWaveOrderByWithRelationInput | FulfillmentWaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FulfillmentWaves.
     */
    cursor?: FulfillmentWaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FulfillmentWaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FulfillmentWaves.
     */
    skip?: number
    distinct?: FulfillmentWaveScalarFieldEnum | FulfillmentWaveScalarFieldEnum[]
  }

  /**
   * FulfillmentWave create
   */
  export type FulfillmentWaveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveInclude<ExtArgs> | null
    /**
     * The data needed to create a FulfillmentWave.
     */
    data: XOR<FulfillmentWaveCreateInput, FulfillmentWaveUncheckedCreateInput>
  }

  /**
   * FulfillmentWave createMany
   */
  export type FulfillmentWaveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FulfillmentWaves.
     */
    data: FulfillmentWaveCreateManyInput | FulfillmentWaveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FulfillmentWave createManyAndReturn
   */
  export type FulfillmentWaveCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * The data used to create many FulfillmentWaves.
     */
    data: FulfillmentWaveCreateManyInput | FulfillmentWaveCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FulfillmentWave update
   */
  export type FulfillmentWaveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveInclude<ExtArgs> | null
    /**
     * The data needed to update a FulfillmentWave.
     */
    data: XOR<FulfillmentWaveUpdateInput, FulfillmentWaveUncheckedUpdateInput>
    /**
     * Choose, which FulfillmentWave to update.
     */
    where: FulfillmentWaveWhereUniqueInput
  }

  /**
   * FulfillmentWave updateMany
   */
  export type FulfillmentWaveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FulfillmentWaves.
     */
    data: XOR<FulfillmentWaveUpdateManyMutationInput, FulfillmentWaveUncheckedUpdateManyInput>
    /**
     * Filter which FulfillmentWaves to update
     */
    where?: FulfillmentWaveWhereInput
    /**
     * Limit how many FulfillmentWaves to update.
     */
    limit?: number
  }

  /**
   * FulfillmentWave updateManyAndReturn
   */
  export type FulfillmentWaveUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * The data used to update FulfillmentWaves.
     */
    data: XOR<FulfillmentWaveUpdateManyMutationInput, FulfillmentWaveUncheckedUpdateManyInput>
    /**
     * Filter which FulfillmentWaves to update
     */
    where?: FulfillmentWaveWhereInput
    /**
     * Limit how many FulfillmentWaves to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FulfillmentWave upsert
   */
  export type FulfillmentWaveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveInclude<ExtArgs> | null
    /**
     * The filter to search for the FulfillmentWave to update in case it exists.
     */
    where: FulfillmentWaveWhereUniqueInput
    /**
     * In case the FulfillmentWave found by the `where` argument doesn't exist, create a new FulfillmentWave with this data.
     */
    create: XOR<FulfillmentWaveCreateInput, FulfillmentWaveUncheckedCreateInput>
    /**
     * In case the FulfillmentWave was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FulfillmentWaveUpdateInput, FulfillmentWaveUncheckedUpdateInput>
  }

  /**
   * FulfillmentWave delete
   */
  export type FulfillmentWaveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveInclude<ExtArgs> | null
    /**
     * Filter which FulfillmentWave to delete.
     */
    where: FulfillmentWaveWhereUniqueInput
  }

  /**
   * FulfillmentWave deleteMany
   */
  export type FulfillmentWaveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FulfillmentWaves to delete
     */
    where?: FulfillmentWaveWhereInput
    /**
     * Limit how many FulfillmentWaves to delete.
     */
    limit?: number
  }

  /**
   * FulfillmentWave without action
   */
  export type FulfillmentWaveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FulfillmentWave
     */
    select?: FulfillmentWaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FulfillmentWave
     */
    omit?: FulfillmentWaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FulfillmentWaveInclude<ExtArgs> | null
  }


  /**
   * Model ProjectEngagement
   */

  export type AggregateProjectEngagement = {
    _count: ProjectEngagementCountAggregateOutputType | null
    _avg: ProjectEngagementAvgAggregateOutputType | null
    _sum: ProjectEngagementSumAggregateOutputType | null
    _min: ProjectEngagementMinAggregateOutputType | null
    _max: ProjectEngagementMaxAggregateOutputType | null
  }

  export type ProjectEngagementAvgAggregateOutputType = {
    id: number | null
  }

  export type ProjectEngagementSumAggregateOutputType = {
    id: number | null
  }

  export type ProjectEngagementMinAggregateOutputType = {
    id: number | null
    code: string | null
    title: string | null
    billMethod: string | null
  }

  export type ProjectEngagementMaxAggregateOutputType = {
    id: number | null
    code: string | null
    title: string | null
    billMethod: string | null
  }

  export type ProjectEngagementCountAggregateOutputType = {
    id: number
    code: number
    title: number
    billMethod: number
    _all: number
  }


  export type ProjectEngagementAvgAggregateInputType = {
    id?: true
  }

  export type ProjectEngagementSumAggregateInputType = {
    id?: true
  }

  export type ProjectEngagementMinAggregateInputType = {
    id?: true
    code?: true
    title?: true
    billMethod?: true
  }

  export type ProjectEngagementMaxAggregateInputType = {
    id?: true
    code?: true
    title?: true
    billMethod?: true
  }

  export type ProjectEngagementCountAggregateInputType = {
    id?: true
    code?: true
    title?: true
    billMethod?: true
    _all?: true
  }

  export type ProjectEngagementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectEngagement to aggregate.
     */
    where?: ProjectEngagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectEngagements to fetch.
     */
    orderBy?: ProjectEngagementOrderByWithRelationInput | ProjectEngagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectEngagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectEngagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectEngagements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectEngagements
    **/
    _count?: true | ProjectEngagementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectEngagementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectEngagementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectEngagementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectEngagementMaxAggregateInputType
  }

  export type GetProjectEngagementAggregateType<T extends ProjectEngagementAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectEngagement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectEngagement[P]>
      : GetScalarType<T[P], AggregateProjectEngagement[P]>
  }




  export type ProjectEngagementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectEngagementWhereInput
    orderBy?: ProjectEngagementOrderByWithAggregationInput | ProjectEngagementOrderByWithAggregationInput[]
    by: ProjectEngagementScalarFieldEnum[] | ProjectEngagementScalarFieldEnum
    having?: ProjectEngagementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectEngagementCountAggregateInputType | true
    _avg?: ProjectEngagementAvgAggregateInputType
    _sum?: ProjectEngagementSumAggregateInputType
    _min?: ProjectEngagementMinAggregateInputType
    _max?: ProjectEngagementMaxAggregateInputType
  }

  export type ProjectEngagementGroupByOutputType = {
    id: number
    code: string
    title: string
    billMethod: string
    _count: ProjectEngagementCountAggregateOutputType | null
    _avg: ProjectEngagementAvgAggregateOutputType | null
    _sum: ProjectEngagementSumAggregateOutputType | null
    _min: ProjectEngagementMinAggregateOutputType | null
    _max: ProjectEngagementMaxAggregateOutputType | null
  }

  type GetProjectEngagementGroupByPayload<T extends ProjectEngagementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectEngagementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectEngagementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectEngagementGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectEngagementGroupByOutputType[P]>
        }
      >
    >


  export type ProjectEngagementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    title?: boolean
    billMethod?: boolean
    timesheets?: boolean | ProjectEngagement$timesheetsArgs<ExtArgs>
    _count?: boolean | ProjectEngagementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectEngagement"]>

  export type ProjectEngagementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    title?: boolean
    billMethod?: boolean
  }, ExtArgs["result"]["projectEngagement"]>

  export type ProjectEngagementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    title?: boolean
    billMethod?: boolean
  }, ExtArgs["result"]["projectEngagement"]>

  export type ProjectEngagementSelectScalar = {
    id?: boolean
    code?: boolean
    title?: boolean
    billMethod?: boolean
  }

  export type ProjectEngagementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "title" | "billMethod", ExtArgs["result"]["projectEngagement"]>
  export type ProjectEngagementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timesheets?: boolean | ProjectEngagement$timesheetsArgs<ExtArgs>
    _count?: boolean | ProjectEngagementCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectEngagementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProjectEngagementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProjectEngagementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectEngagement"
    objects: {
      timesheets: Prisma.$WorkHoursLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      title: string
      billMethod: string
    }, ExtArgs["result"]["projectEngagement"]>
    composites: {}
  }

  type ProjectEngagementGetPayload<S extends boolean | null | undefined | ProjectEngagementDefaultArgs> = $Result.GetResult<Prisma.$ProjectEngagementPayload, S>

  type ProjectEngagementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectEngagementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectEngagementCountAggregateInputType | true
    }

  export interface ProjectEngagementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectEngagement'], meta: { name: 'ProjectEngagement' } }
    /**
     * Find zero or one ProjectEngagement that matches the filter.
     * @param {ProjectEngagementFindUniqueArgs} args - Arguments to find a ProjectEngagement
     * @example
     * // Get one ProjectEngagement
     * const projectEngagement = await prisma.projectEngagement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectEngagementFindUniqueArgs>(args: SelectSubset<T, ProjectEngagementFindUniqueArgs<ExtArgs>>): Prisma__ProjectEngagementClient<$Result.GetResult<Prisma.$ProjectEngagementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProjectEngagement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectEngagementFindUniqueOrThrowArgs} args - Arguments to find a ProjectEngagement
     * @example
     * // Get one ProjectEngagement
     * const projectEngagement = await prisma.projectEngagement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectEngagementFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectEngagementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectEngagementClient<$Result.GetResult<Prisma.$ProjectEngagementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectEngagement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectEngagementFindFirstArgs} args - Arguments to find a ProjectEngagement
     * @example
     * // Get one ProjectEngagement
     * const projectEngagement = await prisma.projectEngagement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectEngagementFindFirstArgs>(args?: SelectSubset<T, ProjectEngagementFindFirstArgs<ExtArgs>>): Prisma__ProjectEngagementClient<$Result.GetResult<Prisma.$ProjectEngagementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectEngagement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectEngagementFindFirstOrThrowArgs} args - Arguments to find a ProjectEngagement
     * @example
     * // Get one ProjectEngagement
     * const projectEngagement = await prisma.projectEngagement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectEngagementFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectEngagementFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectEngagementClient<$Result.GetResult<Prisma.$ProjectEngagementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProjectEngagements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectEngagementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectEngagements
     * const projectEngagements = await prisma.projectEngagement.findMany()
     * 
     * // Get first 10 ProjectEngagements
     * const projectEngagements = await prisma.projectEngagement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectEngagementWithIdOnly = await prisma.projectEngagement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectEngagementFindManyArgs>(args?: SelectSubset<T, ProjectEngagementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectEngagementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProjectEngagement.
     * @param {ProjectEngagementCreateArgs} args - Arguments to create a ProjectEngagement.
     * @example
     * // Create one ProjectEngagement
     * const ProjectEngagement = await prisma.projectEngagement.create({
     *   data: {
     *     // ... data to create a ProjectEngagement
     *   }
     * })
     * 
     */
    create<T extends ProjectEngagementCreateArgs>(args: SelectSubset<T, ProjectEngagementCreateArgs<ExtArgs>>): Prisma__ProjectEngagementClient<$Result.GetResult<Prisma.$ProjectEngagementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProjectEngagements.
     * @param {ProjectEngagementCreateManyArgs} args - Arguments to create many ProjectEngagements.
     * @example
     * // Create many ProjectEngagements
     * const projectEngagement = await prisma.projectEngagement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectEngagementCreateManyArgs>(args?: SelectSubset<T, ProjectEngagementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectEngagements and returns the data saved in the database.
     * @param {ProjectEngagementCreateManyAndReturnArgs} args - Arguments to create many ProjectEngagements.
     * @example
     * // Create many ProjectEngagements
     * const projectEngagement = await prisma.projectEngagement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectEngagements and only return the `id`
     * const projectEngagementWithIdOnly = await prisma.projectEngagement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectEngagementCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectEngagementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectEngagementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProjectEngagement.
     * @param {ProjectEngagementDeleteArgs} args - Arguments to delete one ProjectEngagement.
     * @example
     * // Delete one ProjectEngagement
     * const ProjectEngagement = await prisma.projectEngagement.delete({
     *   where: {
     *     // ... filter to delete one ProjectEngagement
     *   }
     * })
     * 
     */
    delete<T extends ProjectEngagementDeleteArgs>(args: SelectSubset<T, ProjectEngagementDeleteArgs<ExtArgs>>): Prisma__ProjectEngagementClient<$Result.GetResult<Prisma.$ProjectEngagementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProjectEngagement.
     * @param {ProjectEngagementUpdateArgs} args - Arguments to update one ProjectEngagement.
     * @example
     * // Update one ProjectEngagement
     * const projectEngagement = await prisma.projectEngagement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectEngagementUpdateArgs>(args: SelectSubset<T, ProjectEngagementUpdateArgs<ExtArgs>>): Prisma__ProjectEngagementClient<$Result.GetResult<Prisma.$ProjectEngagementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProjectEngagements.
     * @param {ProjectEngagementDeleteManyArgs} args - Arguments to filter ProjectEngagements to delete.
     * @example
     * // Delete a few ProjectEngagements
     * const { count } = await prisma.projectEngagement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectEngagementDeleteManyArgs>(args?: SelectSubset<T, ProjectEngagementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectEngagements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectEngagementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectEngagements
     * const projectEngagement = await prisma.projectEngagement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectEngagementUpdateManyArgs>(args: SelectSubset<T, ProjectEngagementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectEngagements and returns the data updated in the database.
     * @param {ProjectEngagementUpdateManyAndReturnArgs} args - Arguments to update many ProjectEngagements.
     * @example
     * // Update many ProjectEngagements
     * const projectEngagement = await prisma.projectEngagement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProjectEngagements and only return the `id`
     * const projectEngagementWithIdOnly = await prisma.projectEngagement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectEngagementUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectEngagementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectEngagementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProjectEngagement.
     * @param {ProjectEngagementUpsertArgs} args - Arguments to update or create a ProjectEngagement.
     * @example
     * // Update or create a ProjectEngagement
     * const projectEngagement = await prisma.projectEngagement.upsert({
     *   create: {
     *     // ... data to create a ProjectEngagement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectEngagement we want to update
     *   }
     * })
     */
    upsert<T extends ProjectEngagementUpsertArgs>(args: SelectSubset<T, ProjectEngagementUpsertArgs<ExtArgs>>): Prisma__ProjectEngagementClient<$Result.GetResult<Prisma.$ProjectEngagementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProjectEngagements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectEngagementCountArgs} args - Arguments to filter ProjectEngagements to count.
     * @example
     * // Count the number of ProjectEngagements
     * const count = await prisma.projectEngagement.count({
     *   where: {
     *     // ... the filter for the ProjectEngagements we want to count
     *   }
     * })
    **/
    count<T extends ProjectEngagementCountArgs>(
      args?: Subset<T, ProjectEngagementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectEngagementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectEngagement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectEngagementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectEngagementAggregateArgs>(args: Subset<T, ProjectEngagementAggregateArgs>): Prisma.PrismaPromise<GetProjectEngagementAggregateType<T>>

    /**
     * Group by ProjectEngagement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectEngagementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectEngagementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectEngagementGroupByArgs['orderBy'] }
        : { orderBy?: ProjectEngagementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectEngagementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectEngagementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectEngagement model
   */
  readonly fields: ProjectEngagementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectEngagement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectEngagementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    timesheets<T extends ProjectEngagement$timesheetsArgs<ExtArgs> = {}>(args?: Subset<T, ProjectEngagement$timesheetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkHoursLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectEngagement model
   */
  interface ProjectEngagementFieldRefs {
    readonly id: FieldRef<"ProjectEngagement", 'Int'>
    readonly code: FieldRef<"ProjectEngagement", 'String'>
    readonly title: FieldRef<"ProjectEngagement", 'String'>
    readonly billMethod: FieldRef<"ProjectEngagement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProjectEngagement findUnique
   */
  export type ProjectEngagementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagement
     */
    select?: ProjectEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectEngagement
     */
    omit?: ProjectEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectEngagementInclude<ExtArgs> | null
    /**
     * Filter, which ProjectEngagement to fetch.
     */
    where: ProjectEngagementWhereUniqueInput
  }

  /**
   * ProjectEngagement findUniqueOrThrow
   */
  export type ProjectEngagementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagement
     */
    select?: ProjectEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectEngagement
     */
    omit?: ProjectEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectEngagementInclude<ExtArgs> | null
    /**
     * Filter, which ProjectEngagement to fetch.
     */
    where: ProjectEngagementWhereUniqueInput
  }

  /**
   * ProjectEngagement findFirst
   */
  export type ProjectEngagementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagement
     */
    select?: ProjectEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectEngagement
     */
    omit?: ProjectEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectEngagementInclude<ExtArgs> | null
    /**
     * Filter, which ProjectEngagement to fetch.
     */
    where?: ProjectEngagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectEngagements to fetch.
     */
    orderBy?: ProjectEngagementOrderByWithRelationInput | ProjectEngagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectEngagements.
     */
    cursor?: ProjectEngagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectEngagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectEngagements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectEngagements.
     */
    distinct?: ProjectEngagementScalarFieldEnum | ProjectEngagementScalarFieldEnum[]
  }

  /**
   * ProjectEngagement findFirstOrThrow
   */
  export type ProjectEngagementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagement
     */
    select?: ProjectEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectEngagement
     */
    omit?: ProjectEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectEngagementInclude<ExtArgs> | null
    /**
     * Filter, which ProjectEngagement to fetch.
     */
    where?: ProjectEngagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectEngagements to fetch.
     */
    orderBy?: ProjectEngagementOrderByWithRelationInput | ProjectEngagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectEngagements.
     */
    cursor?: ProjectEngagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectEngagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectEngagements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectEngagements.
     */
    distinct?: ProjectEngagementScalarFieldEnum | ProjectEngagementScalarFieldEnum[]
  }

  /**
   * ProjectEngagement findMany
   */
  export type ProjectEngagementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagement
     */
    select?: ProjectEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectEngagement
     */
    omit?: ProjectEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectEngagementInclude<ExtArgs> | null
    /**
     * Filter, which ProjectEngagements to fetch.
     */
    where?: ProjectEngagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectEngagements to fetch.
     */
    orderBy?: ProjectEngagementOrderByWithRelationInput | ProjectEngagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectEngagements.
     */
    cursor?: ProjectEngagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectEngagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectEngagements.
     */
    skip?: number
    distinct?: ProjectEngagementScalarFieldEnum | ProjectEngagementScalarFieldEnum[]
  }

  /**
   * ProjectEngagement create
   */
  export type ProjectEngagementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagement
     */
    select?: ProjectEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectEngagement
     */
    omit?: ProjectEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectEngagementInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectEngagement.
     */
    data: XOR<ProjectEngagementCreateInput, ProjectEngagementUncheckedCreateInput>
  }

  /**
   * ProjectEngagement createMany
   */
  export type ProjectEngagementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectEngagements.
     */
    data: ProjectEngagementCreateManyInput | ProjectEngagementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectEngagement createManyAndReturn
   */
  export type ProjectEngagementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagement
     */
    select?: ProjectEngagementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectEngagement
     */
    omit?: ProjectEngagementOmit<ExtArgs> | null
    /**
     * The data used to create many ProjectEngagements.
     */
    data: ProjectEngagementCreateManyInput | ProjectEngagementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectEngagement update
   */
  export type ProjectEngagementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagement
     */
    select?: ProjectEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectEngagement
     */
    omit?: ProjectEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectEngagementInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectEngagement.
     */
    data: XOR<ProjectEngagementUpdateInput, ProjectEngagementUncheckedUpdateInput>
    /**
     * Choose, which ProjectEngagement to update.
     */
    where: ProjectEngagementWhereUniqueInput
  }

  /**
   * ProjectEngagement updateMany
   */
  export type ProjectEngagementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectEngagements.
     */
    data: XOR<ProjectEngagementUpdateManyMutationInput, ProjectEngagementUncheckedUpdateManyInput>
    /**
     * Filter which ProjectEngagements to update
     */
    where?: ProjectEngagementWhereInput
    /**
     * Limit how many ProjectEngagements to update.
     */
    limit?: number
  }

  /**
   * ProjectEngagement updateManyAndReturn
   */
  export type ProjectEngagementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagement
     */
    select?: ProjectEngagementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectEngagement
     */
    omit?: ProjectEngagementOmit<ExtArgs> | null
    /**
     * The data used to update ProjectEngagements.
     */
    data: XOR<ProjectEngagementUpdateManyMutationInput, ProjectEngagementUncheckedUpdateManyInput>
    /**
     * Filter which ProjectEngagements to update
     */
    where?: ProjectEngagementWhereInput
    /**
     * Limit how many ProjectEngagements to update.
     */
    limit?: number
  }

  /**
   * ProjectEngagement upsert
   */
  export type ProjectEngagementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagement
     */
    select?: ProjectEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectEngagement
     */
    omit?: ProjectEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectEngagementInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectEngagement to update in case it exists.
     */
    where: ProjectEngagementWhereUniqueInput
    /**
     * In case the ProjectEngagement found by the `where` argument doesn't exist, create a new ProjectEngagement with this data.
     */
    create: XOR<ProjectEngagementCreateInput, ProjectEngagementUncheckedCreateInput>
    /**
     * In case the ProjectEngagement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectEngagementUpdateInput, ProjectEngagementUncheckedUpdateInput>
  }

  /**
   * ProjectEngagement delete
   */
  export type ProjectEngagementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagement
     */
    select?: ProjectEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectEngagement
     */
    omit?: ProjectEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectEngagementInclude<ExtArgs> | null
    /**
     * Filter which ProjectEngagement to delete.
     */
    where: ProjectEngagementWhereUniqueInput
  }

  /**
   * ProjectEngagement deleteMany
   */
  export type ProjectEngagementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectEngagements to delete
     */
    where?: ProjectEngagementWhereInput
    /**
     * Limit how many ProjectEngagements to delete.
     */
    limit?: number
  }

  /**
   * ProjectEngagement.timesheets
   */
  export type ProjectEngagement$timesheetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogInclude<ExtArgs> | null
    where?: WorkHoursLogWhereInput
    orderBy?: WorkHoursLogOrderByWithRelationInput | WorkHoursLogOrderByWithRelationInput[]
    cursor?: WorkHoursLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkHoursLogScalarFieldEnum | WorkHoursLogScalarFieldEnum[]
  }

  /**
   * ProjectEngagement without action
   */
  export type ProjectEngagementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectEngagement
     */
    select?: ProjectEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectEngagement
     */
    omit?: ProjectEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectEngagementInclude<ExtArgs> | null
  }


  /**
   * Model WorkHoursLog
   */

  export type AggregateWorkHoursLog = {
    _count: WorkHoursLogCountAggregateOutputType | null
    _avg: WorkHoursLogAvgAggregateOutputType | null
    _sum: WorkHoursLogSumAggregateOutputType | null
    _min: WorkHoursLogMinAggregateOutputType | null
    _max: WorkHoursLogMaxAggregateOutputType | null
  }

  export type WorkHoursLogAvgAggregateOutputType = {
    id: number | null
    projectId: number | null
    hours: number | null
    rate: number | null
  }

  export type WorkHoursLogSumAggregateOutputType = {
    id: number | null
    projectId: number | null
    hours: number | null
    rate: number | null
  }

  export type WorkHoursLogMinAggregateOutputType = {
    id: number | null
    projectId: number | null
    employeeName: string | null
    date: Date | null
    hours: number | null
    rate: number | null
  }

  export type WorkHoursLogMaxAggregateOutputType = {
    id: number | null
    projectId: number | null
    employeeName: string | null
    date: Date | null
    hours: number | null
    rate: number | null
  }

  export type WorkHoursLogCountAggregateOutputType = {
    id: number
    projectId: number
    employeeName: number
    date: number
    hours: number
    rate: number
    _all: number
  }


  export type WorkHoursLogAvgAggregateInputType = {
    id?: true
    projectId?: true
    hours?: true
    rate?: true
  }

  export type WorkHoursLogSumAggregateInputType = {
    id?: true
    projectId?: true
    hours?: true
    rate?: true
  }

  export type WorkHoursLogMinAggregateInputType = {
    id?: true
    projectId?: true
    employeeName?: true
    date?: true
    hours?: true
    rate?: true
  }

  export type WorkHoursLogMaxAggregateInputType = {
    id?: true
    projectId?: true
    employeeName?: true
    date?: true
    hours?: true
    rate?: true
  }

  export type WorkHoursLogCountAggregateInputType = {
    id?: true
    projectId?: true
    employeeName?: true
    date?: true
    hours?: true
    rate?: true
    _all?: true
  }

  export type WorkHoursLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkHoursLog to aggregate.
     */
    where?: WorkHoursLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkHoursLogs to fetch.
     */
    orderBy?: WorkHoursLogOrderByWithRelationInput | WorkHoursLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkHoursLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkHoursLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkHoursLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkHoursLogs
    **/
    _count?: true | WorkHoursLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkHoursLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkHoursLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkHoursLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkHoursLogMaxAggregateInputType
  }

  export type GetWorkHoursLogAggregateType<T extends WorkHoursLogAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkHoursLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkHoursLog[P]>
      : GetScalarType<T[P], AggregateWorkHoursLog[P]>
  }




  export type WorkHoursLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkHoursLogWhereInput
    orderBy?: WorkHoursLogOrderByWithAggregationInput | WorkHoursLogOrderByWithAggregationInput[]
    by: WorkHoursLogScalarFieldEnum[] | WorkHoursLogScalarFieldEnum
    having?: WorkHoursLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkHoursLogCountAggregateInputType | true
    _avg?: WorkHoursLogAvgAggregateInputType
    _sum?: WorkHoursLogSumAggregateInputType
    _min?: WorkHoursLogMinAggregateInputType
    _max?: WorkHoursLogMaxAggregateInputType
  }

  export type WorkHoursLogGroupByOutputType = {
    id: number
    projectId: number
    employeeName: string
    date: Date
    hours: number
    rate: number
    _count: WorkHoursLogCountAggregateOutputType | null
    _avg: WorkHoursLogAvgAggregateOutputType | null
    _sum: WorkHoursLogSumAggregateOutputType | null
    _min: WorkHoursLogMinAggregateOutputType | null
    _max: WorkHoursLogMaxAggregateOutputType | null
  }

  type GetWorkHoursLogGroupByPayload<T extends WorkHoursLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkHoursLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkHoursLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkHoursLogGroupByOutputType[P]>
            : GetScalarType<T[P], WorkHoursLogGroupByOutputType[P]>
        }
      >
    >


  export type WorkHoursLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    employeeName?: boolean
    date?: boolean
    hours?: boolean
    rate?: boolean
    project?: boolean | ProjectEngagementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workHoursLog"]>

  export type WorkHoursLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    employeeName?: boolean
    date?: boolean
    hours?: boolean
    rate?: boolean
    project?: boolean | ProjectEngagementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workHoursLog"]>

  export type WorkHoursLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    employeeName?: boolean
    date?: boolean
    hours?: boolean
    rate?: boolean
    project?: boolean | ProjectEngagementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workHoursLog"]>

  export type WorkHoursLogSelectScalar = {
    id?: boolean
    projectId?: boolean
    employeeName?: boolean
    date?: boolean
    hours?: boolean
    rate?: boolean
  }

  export type WorkHoursLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "employeeName" | "date" | "hours" | "rate", ExtArgs["result"]["workHoursLog"]>
  export type WorkHoursLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectEngagementDefaultArgs<ExtArgs>
  }
  export type WorkHoursLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectEngagementDefaultArgs<ExtArgs>
  }
  export type WorkHoursLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectEngagementDefaultArgs<ExtArgs>
  }

  export type $WorkHoursLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkHoursLog"
    objects: {
      project: Prisma.$ProjectEngagementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      projectId: number
      employeeName: string
      date: Date
      hours: number
      rate: number
    }, ExtArgs["result"]["workHoursLog"]>
    composites: {}
  }

  type WorkHoursLogGetPayload<S extends boolean | null | undefined | WorkHoursLogDefaultArgs> = $Result.GetResult<Prisma.$WorkHoursLogPayload, S>

  type WorkHoursLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkHoursLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkHoursLogCountAggregateInputType | true
    }

  export interface WorkHoursLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkHoursLog'], meta: { name: 'WorkHoursLog' } }
    /**
     * Find zero or one WorkHoursLog that matches the filter.
     * @param {WorkHoursLogFindUniqueArgs} args - Arguments to find a WorkHoursLog
     * @example
     * // Get one WorkHoursLog
     * const workHoursLog = await prisma.workHoursLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkHoursLogFindUniqueArgs>(args: SelectSubset<T, WorkHoursLogFindUniqueArgs<ExtArgs>>): Prisma__WorkHoursLogClient<$Result.GetResult<Prisma.$WorkHoursLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkHoursLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkHoursLogFindUniqueOrThrowArgs} args - Arguments to find a WorkHoursLog
     * @example
     * // Get one WorkHoursLog
     * const workHoursLog = await prisma.workHoursLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkHoursLogFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkHoursLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkHoursLogClient<$Result.GetResult<Prisma.$WorkHoursLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkHoursLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHoursLogFindFirstArgs} args - Arguments to find a WorkHoursLog
     * @example
     * // Get one WorkHoursLog
     * const workHoursLog = await prisma.workHoursLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkHoursLogFindFirstArgs>(args?: SelectSubset<T, WorkHoursLogFindFirstArgs<ExtArgs>>): Prisma__WorkHoursLogClient<$Result.GetResult<Prisma.$WorkHoursLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkHoursLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHoursLogFindFirstOrThrowArgs} args - Arguments to find a WorkHoursLog
     * @example
     * // Get one WorkHoursLog
     * const workHoursLog = await prisma.workHoursLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkHoursLogFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkHoursLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkHoursLogClient<$Result.GetResult<Prisma.$WorkHoursLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkHoursLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHoursLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkHoursLogs
     * const workHoursLogs = await prisma.workHoursLog.findMany()
     * 
     * // Get first 10 WorkHoursLogs
     * const workHoursLogs = await prisma.workHoursLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workHoursLogWithIdOnly = await prisma.workHoursLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkHoursLogFindManyArgs>(args?: SelectSubset<T, WorkHoursLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkHoursLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkHoursLog.
     * @param {WorkHoursLogCreateArgs} args - Arguments to create a WorkHoursLog.
     * @example
     * // Create one WorkHoursLog
     * const WorkHoursLog = await prisma.workHoursLog.create({
     *   data: {
     *     // ... data to create a WorkHoursLog
     *   }
     * })
     * 
     */
    create<T extends WorkHoursLogCreateArgs>(args: SelectSubset<T, WorkHoursLogCreateArgs<ExtArgs>>): Prisma__WorkHoursLogClient<$Result.GetResult<Prisma.$WorkHoursLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkHoursLogs.
     * @param {WorkHoursLogCreateManyArgs} args - Arguments to create many WorkHoursLogs.
     * @example
     * // Create many WorkHoursLogs
     * const workHoursLog = await prisma.workHoursLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkHoursLogCreateManyArgs>(args?: SelectSubset<T, WorkHoursLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkHoursLogs and returns the data saved in the database.
     * @param {WorkHoursLogCreateManyAndReturnArgs} args - Arguments to create many WorkHoursLogs.
     * @example
     * // Create many WorkHoursLogs
     * const workHoursLog = await prisma.workHoursLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkHoursLogs and only return the `id`
     * const workHoursLogWithIdOnly = await prisma.workHoursLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkHoursLogCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkHoursLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkHoursLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkHoursLog.
     * @param {WorkHoursLogDeleteArgs} args - Arguments to delete one WorkHoursLog.
     * @example
     * // Delete one WorkHoursLog
     * const WorkHoursLog = await prisma.workHoursLog.delete({
     *   where: {
     *     // ... filter to delete one WorkHoursLog
     *   }
     * })
     * 
     */
    delete<T extends WorkHoursLogDeleteArgs>(args: SelectSubset<T, WorkHoursLogDeleteArgs<ExtArgs>>): Prisma__WorkHoursLogClient<$Result.GetResult<Prisma.$WorkHoursLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkHoursLog.
     * @param {WorkHoursLogUpdateArgs} args - Arguments to update one WorkHoursLog.
     * @example
     * // Update one WorkHoursLog
     * const workHoursLog = await prisma.workHoursLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkHoursLogUpdateArgs>(args: SelectSubset<T, WorkHoursLogUpdateArgs<ExtArgs>>): Prisma__WorkHoursLogClient<$Result.GetResult<Prisma.$WorkHoursLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkHoursLogs.
     * @param {WorkHoursLogDeleteManyArgs} args - Arguments to filter WorkHoursLogs to delete.
     * @example
     * // Delete a few WorkHoursLogs
     * const { count } = await prisma.workHoursLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkHoursLogDeleteManyArgs>(args?: SelectSubset<T, WorkHoursLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkHoursLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHoursLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkHoursLogs
     * const workHoursLog = await prisma.workHoursLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkHoursLogUpdateManyArgs>(args: SelectSubset<T, WorkHoursLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkHoursLogs and returns the data updated in the database.
     * @param {WorkHoursLogUpdateManyAndReturnArgs} args - Arguments to update many WorkHoursLogs.
     * @example
     * // Update many WorkHoursLogs
     * const workHoursLog = await prisma.workHoursLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkHoursLogs and only return the `id`
     * const workHoursLogWithIdOnly = await prisma.workHoursLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkHoursLogUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkHoursLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkHoursLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkHoursLog.
     * @param {WorkHoursLogUpsertArgs} args - Arguments to update or create a WorkHoursLog.
     * @example
     * // Update or create a WorkHoursLog
     * const workHoursLog = await prisma.workHoursLog.upsert({
     *   create: {
     *     // ... data to create a WorkHoursLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkHoursLog we want to update
     *   }
     * })
     */
    upsert<T extends WorkHoursLogUpsertArgs>(args: SelectSubset<T, WorkHoursLogUpsertArgs<ExtArgs>>): Prisma__WorkHoursLogClient<$Result.GetResult<Prisma.$WorkHoursLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkHoursLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHoursLogCountArgs} args - Arguments to filter WorkHoursLogs to count.
     * @example
     * // Count the number of WorkHoursLogs
     * const count = await prisma.workHoursLog.count({
     *   where: {
     *     // ... the filter for the WorkHoursLogs we want to count
     *   }
     * })
    **/
    count<T extends WorkHoursLogCountArgs>(
      args?: Subset<T, WorkHoursLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkHoursLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkHoursLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHoursLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkHoursLogAggregateArgs>(args: Subset<T, WorkHoursLogAggregateArgs>): Prisma.PrismaPromise<GetWorkHoursLogAggregateType<T>>

    /**
     * Group by WorkHoursLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkHoursLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkHoursLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkHoursLogGroupByArgs['orderBy'] }
        : { orderBy?: WorkHoursLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkHoursLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkHoursLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkHoursLog model
   */
  readonly fields: WorkHoursLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkHoursLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkHoursLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectEngagementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectEngagementDefaultArgs<ExtArgs>>): Prisma__ProjectEngagementClient<$Result.GetResult<Prisma.$ProjectEngagementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkHoursLog model
   */
  interface WorkHoursLogFieldRefs {
    readonly id: FieldRef<"WorkHoursLog", 'Int'>
    readonly projectId: FieldRef<"WorkHoursLog", 'Int'>
    readonly employeeName: FieldRef<"WorkHoursLog", 'String'>
    readonly date: FieldRef<"WorkHoursLog", 'DateTime'>
    readonly hours: FieldRef<"WorkHoursLog", 'Float'>
    readonly rate: FieldRef<"WorkHoursLog", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * WorkHoursLog findUnique
   */
  export type WorkHoursLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkHoursLog to fetch.
     */
    where: WorkHoursLogWhereUniqueInput
  }

  /**
   * WorkHoursLog findUniqueOrThrow
   */
  export type WorkHoursLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkHoursLog to fetch.
     */
    where: WorkHoursLogWhereUniqueInput
  }

  /**
   * WorkHoursLog findFirst
   */
  export type WorkHoursLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkHoursLog to fetch.
     */
    where?: WorkHoursLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkHoursLogs to fetch.
     */
    orderBy?: WorkHoursLogOrderByWithRelationInput | WorkHoursLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkHoursLogs.
     */
    cursor?: WorkHoursLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkHoursLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkHoursLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkHoursLogs.
     */
    distinct?: WorkHoursLogScalarFieldEnum | WorkHoursLogScalarFieldEnum[]
  }

  /**
   * WorkHoursLog findFirstOrThrow
   */
  export type WorkHoursLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkHoursLog to fetch.
     */
    where?: WorkHoursLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkHoursLogs to fetch.
     */
    orderBy?: WorkHoursLogOrderByWithRelationInput | WorkHoursLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkHoursLogs.
     */
    cursor?: WorkHoursLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkHoursLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkHoursLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkHoursLogs.
     */
    distinct?: WorkHoursLogScalarFieldEnum | WorkHoursLogScalarFieldEnum[]
  }

  /**
   * WorkHoursLog findMany
   */
  export type WorkHoursLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogInclude<ExtArgs> | null
    /**
     * Filter, which WorkHoursLogs to fetch.
     */
    where?: WorkHoursLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkHoursLogs to fetch.
     */
    orderBy?: WorkHoursLogOrderByWithRelationInput | WorkHoursLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkHoursLogs.
     */
    cursor?: WorkHoursLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkHoursLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkHoursLogs.
     */
    skip?: number
    distinct?: WorkHoursLogScalarFieldEnum | WorkHoursLogScalarFieldEnum[]
  }

  /**
   * WorkHoursLog create
   */
  export type WorkHoursLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkHoursLog.
     */
    data: XOR<WorkHoursLogCreateInput, WorkHoursLogUncheckedCreateInput>
  }

  /**
   * WorkHoursLog createMany
   */
  export type WorkHoursLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkHoursLogs.
     */
    data: WorkHoursLogCreateManyInput | WorkHoursLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkHoursLog createManyAndReturn
   */
  export type WorkHoursLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * The data used to create many WorkHoursLogs.
     */
    data: WorkHoursLogCreateManyInput | WorkHoursLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkHoursLog update
   */
  export type WorkHoursLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkHoursLog.
     */
    data: XOR<WorkHoursLogUpdateInput, WorkHoursLogUncheckedUpdateInput>
    /**
     * Choose, which WorkHoursLog to update.
     */
    where: WorkHoursLogWhereUniqueInput
  }

  /**
   * WorkHoursLog updateMany
   */
  export type WorkHoursLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkHoursLogs.
     */
    data: XOR<WorkHoursLogUpdateManyMutationInput, WorkHoursLogUncheckedUpdateManyInput>
    /**
     * Filter which WorkHoursLogs to update
     */
    where?: WorkHoursLogWhereInput
    /**
     * Limit how many WorkHoursLogs to update.
     */
    limit?: number
  }

  /**
   * WorkHoursLog updateManyAndReturn
   */
  export type WorkHoursLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * The data used to update WorkHoursLogs.
     */
    data: XOR<WorkHoursLogUpdateManyMutationInput, WorkHoursLogUncheckedUpdateManyInput>
    /**
     * Filter which WorkHoursLogs to update
     */
    where?: WorkHoursLogWhereInput
    /**
     * Limit how many WorkHoursLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkHoursLog upsert
   */
  export type WorkHoursLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkHoursLog to update in case it exists.
     */
    where: WorkHoursLogWhereUniqueInput
    /**
     * In case the WorkHoursLog found by the `where` argument doesn't exist, create a new WorkHoursLog with this data.
     */
    create: XOR<WorkHoursLogCreateInput, WorkHoursLogUncheckedCreateInput>
    /**
     * In case the WorkHoursLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkHoursLogUpdateInput, WorkHoursLogUncheckedUpdateInput>
  }

  /**
   * WorkHoursLog delete
   */
  export type WorkHoursLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogInclude<ExtArgs> | null
    /**
     * Filter which WorkHoursLog to delete.
     */
    where: WorkHoursLogWhereUniqueInput
  }

  /**
   * WorkHoursLog deleteMany
   */
  export type WorkHoursLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkHoursLogs to delete
     */
    where?: WorkHoursLogWhereInput
    /**
     * Limit how many WorkHoursLogs to delete.
     */
    limit?: number
  }

  /**
   * WorkHoursLog without action
   */
  export type WorkHoursLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkHoursLog
     */
    select?: WorkHoursLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkHoursLog
     */
    omit?: WorkHoursLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkHoursLogInclude<ExtArgs> | null
  }


  /**
   * Model StaffMember
   */

  export type AggregateStaffMember = {
    _count: StaffMemberCountAggregateOutputType | null
    _avg: StaffMemberAvgAggregateOutputType | null
    _sum: StaffMemberSumAggregateOutputType | null
    _min: StaffMemberMinAggregateOutputType | null
    _max: StaffMemberMaxAggregateOutputType | null
  }

  export type StaffMemberAvgAggregateOutputType = {
    id: number | null
  }

  export type StaffMemberSumAggregateOutputType = {
    id: number | null
  }

  export type StaffMemberMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    niLetter: string | null
    taxCode: string | null
  }

  export type StaffMemberMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    niLetter: string | null
    taxCode: string | null
  }

  export type StaffMemberCountAggregateOutputType = {
    id: number
    name: number
    email: number
    niLetter: number
    taxCode: number
    _all: number
  }


  export type StaffMemberAvgAggregateInputType = {
    id?: true
  }

  export type StaffMemberSumAggregateInputType = {
    id?: true
  }

  export type StaffMemberMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    niLetter?: true
    taxCode?: true
  }

  export type StaffMemberMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    niLetter?: true
    taxCode?: true
  }

  export type StaffMemberCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    niLetter?: true
    taxCode?: true
    _all?: true
  }

  export type StaffMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffMember to aggregate.
     */
    where?: StaffMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffMembers to fetch.
     */
    orderBy?: StaffMemberOrderByWithRelationInput | StaffMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffMembers
    **/
    _count?: true | StaffMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMemberMaxAggregateInputType
  }

  export type GetStaffMemberAggregateType<T extends StaffMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffMember[P]>
      : GetScalarType<T[P], AggregateStaffMember[P]>
  }




  export type StaffMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffMemberWhereInput
    orderBy?: StaffMemberOrderByWithAggregationInput | StaffMemberOrderByWithAggregationInput[]
    by: StaffMemberScalarFieldEnum[] | StaffMemberScalarFieldEnum
    having?: StaffMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffMemberCountAggregateInputType | true
    _avg?: StaffMemberAvgAggregateInputType
    _sum?: StaffMemberSumAggregateInputType
    _min?: StaffMemberMinAggregateInputType
    _max?: StaffMemberMaxAggregateInputType
  }

  export type StaffMemberGroupByOutputType = {
    id: number
    name: string
    email: string
    niLetter: string
    taxCode: string
    _count: StaffMemberCountAggregateOutputType | null
    _avg: StaffMemberAvgAggregateOutputType | null
    _sum: StaffMemberSumAggregateOutputType | null
    _min: StaffMemberMinAggregateOutputType | null
    _max: StaffMemberMaxAggregateOutputType | null
  }

  type GetStaffMemberGroupByPayload<T extends StaffMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffMemberGroupByOutputType[P]>
            : GetScalarType<T[P], StaffMemberGroupByOutputType[P]>
        }
      >
    >


  export type StaffMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    niLetter?: boolean
    taxCode?: boolean
  }, ExtArgs["result"]["staffMember"]>

  export type StaffMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    niLetter?: boolean
    taxCode?: boolean
  }, ExtArgs["result"]["staffMember"]>

  export type StaffMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    niLetter?: boolean
    taxCode?: boolean
  }, ExtArgs["result"]["staffMember"]>

  export type StaffMemberSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    niLetter?: boolean
    taxCode?: boolean
  }

  export type StaffMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "niLetter" | "taxCode", ExtArgs["result"]["staffMember"]>

  export type $StaffMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffMember"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      niLetter: string
      taxCode: string
    }, ExtArgs["result"]["staffMember"]>
    composites: {}
  }

  type StaffMemberGetPayload<S extends boolean | null | undefined | StaffMemberDefaultArgs> = $Result.GetResult<Prisma.$StaffMemberPayload, S>

  type StaffMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffMemberCountAggregateInputType | true
    }

  export interface StaffMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffMember'], meta: { name: 'StaffMember' } }
    /**
     * Find zero or one StaffMember that matches the filter.
     * @param {StaffMemberFindUniqueArgs} args - Arguments to find a StaffMember
     * @example
     * // Get one StaffMember
     * const staffMember = await prisma.staffMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffMemberFindUniqueArgs>(args: SelectSubset<T, StaffMemberFindUniqueArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StaffMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffMemberFindUniqueOrThrowArgs} args - Arguments to find a StaffMember
     * @example
     * // Get one StaffMember
     * const staffMember = await prisma.staffMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberFindFirstArgs} args - Arguments to find a StaffMember
     * @example
     * // Get one StaffMember
     * const staffMember = await prisma.staffMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffMemberFindFirstArgs>(args?: SelectSubset<T, StaffMemberFindFirstArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberFindFirstOrThrowArgs} args - Arguments to find a StaffMember
     * @example
     * // Get one StaffMember
     * const staffMember = await prisma.staffMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StaffMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffMembers
     * const staffMembers = await prisma.staffMember.findMany()
     * 
     * // Get first 10 StaffMembers
     * const staffMembers = await prisma.staffMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffMemberWithIdOnly = await prisma.staffMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffMemberFindManyArgs>(args?: SelectSubset<T, StaffMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StaffMember.
     * @param {StaffMemberCreateArgs} args - Arguments to create a StaffMember.
     * @example
     * // Create one StaffMember
     * const StaffMember = await prisma.staffMember.create({
     *   data: {
     *     // ... data to create a StaffMember
     *   }
     * })
     * 
     */
    create<T extends StaffMemberCreateArgs>(args: SelectSubset<T, StaffMemberCreateArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StaffMembers.
     * @param {StaffMemberCreateManyArgs} args - Arguments to create many StaffMembers.
     * @example
     * // Create many StaffMembers
     * const staffMember = await prisma.staffMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffMemberCreateManyArgs>(args?: SelectSubset<T, StaffMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StaffMembers and returns the data saved in the database.
     * @param {StaffMemberCreateManyAndReturnArgs} args - Arguments to create many StaffMembers.
     * @example
     * // Create many StaffMembers
     * const staffMember = await prisma.staffMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StaffMembers and only return the `id`
     * const staffMemberWithIdOnly = await prisma.staffMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StaffMember.
     * @param {StaffMemberDeleteArgs} args - Arguments to delete one StaffMember.
     * @example
     * // Delete one StaffMember
     * const StaffMember = await prisma.staffMember.delete({
     *   where: {
     *     // ... filter to delete one StaffMember
     *   }
     * })
     * 
     */
    delete<T extends StaffMemberDeleteArgs>(args: SelectSubset<T, StaffMemberDeleteArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StaffMember.
     * @param {StaffMemberUpdateArgs} args - Arguments to update one StaffMember.
     * @example
     * // Update one StaffMember
     * const staffMember = await prisma.staffMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffMemberUpdateArgs>(args: SelectSubset<T, StaffMemberUpdateArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StaffMembers.
     * @param {StaffMemberDeleteManyArgs} args - Arguments to filter StaffMembers to delete.
     * @example
     * // Delete a few StaffMembers
     * const { count } = await prisma.staffMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffMemberDeleteManyArgs>(args?: SelectSubset<T, StaffMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffMembers
     * const staffMember = await prisma.staffMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffMemberUpdateManyArgs>(args: SelectSubset<T, StaffMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffMembers and returns the data updated in the database.
     * @param {StaffMemberUpdateManyAndReturnArgs} args - Arguments to update many StaffMembers.
     * @example
     * // Update many StaffMembers
     * const staffMember = await prisma.staffMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StaffMembers and only return the `id`
     * const staffMemberWithIdOnly = await prisma.staffMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StaffMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, StaffMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StaffMember.
     * @param {StaffMemberUpsertArgs} args - Arguments to update or create a StaffMember.
     * @example
     * // Update or create a StaffMember
     * const staffMember = await prisma.staffMember.upsert({
     *   create: {
     *     // ... data to create a StaffMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffMember we want to update
     *   }
     * })
     */
    upsert<T extends StaffMemberUpsertArgs>(args: SelectSubset<T, StaffMemberUpsertArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StaffMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberCountArgs} args - Arguments to filter StaffMembers to count.
     * @example
     * // Count the number of StaffMembers
     * const count = await prisma.staffMember.count({
     *   where: {
     *     // ... the filter for the StaffMembers we want to count
     *   }
     * })
    **/
    count<T extends StaffMemberCountArgs>(
      args?: Subset<T, StaffMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffMemberAggregateArgs>(args: Subset<T, StaffMemberAggregateArgs>): Prisma.PrismaPromise<GetStaffMemberAggregateType<T>>

    /**
     * Group by StaffMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffMemberGroupByArgs['orderBy'] }
        : { orderBy?: StaffMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffMember model
   */
  readonly fields: StaffMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffMember model
   */
  interface StaffMemberFieldRefs {
    readonly id: FieldRef<"StaffMember", 'Int'>
    readonly name: FieldRef<"StaffMember", 'String'>
    readonly email: FieldRef<"StaffMember", 'String'>
    readonly niLetter: FieldRef<"StaffMember", 'String'>
    readonly taxCode: FieldRef<"StaffMember", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StaffMember findUnique
   */
  export type StaffMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffMember
     */
    omit?: StaffMemberOmit<ExtArgs> | null
    /**
     * Filter, which StaffMember to fetch.
     */
    where: StaffMemberWhereUniqueInput
  }

  /**
   * StaffMember findUniqueOrThrow
   */
  export type StaffMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffMember
     */
    omit?: StaffMemberOmit<ExtArgs> | null
    /**
     * Filter, which StaffMember to fetch.
     */
    where: StaffMemberWhereUniqueInput
  }

  /**
   * StaffMember findFirst
   */
  export type StaffMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffMember
     */
    omit?: StaffMemberOmit<ExtArgs> | null
    /**
     * Filter, which StaffMember to fetch.
     */
    where?: StaffMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffMembers to fetch.
     */
    orderBy?: StaffMemberOrderByWithRelationInput | StaffMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffMembers.
     */
    cursor?: StaffMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffMembers.
     */
    distinct?: StaffMemberScalarFieldEnum | StaffMemberScalarFieldEnum[]
  }

  /**
   * StaffMember findFirstOrThrow
   */
  export type StaffMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffMember
     */
    omit?: StaffMemberOmit<ExtArgs> | null
    /**
     * Filter, which StaffMember to fetch.
     */
    where?: StaffMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffMembers to fetch.
     */
    orderBy?: StaffMemberOrderByWithRelationInput | StaffMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffMembers.
     */
    cursor?: StaffMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffMembers.
     */
    distinct?: StaffMemberScalarFieldEnum | StaffMemberScalarFieldEnum[]
  }

  /**
   * StaffMember findMany
   */
  export type StaffMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffMember
     */
    omit?: StaffMemberOmit<ExtArgs> | null
    /**
     * Filter, which StaffMembers to fetch.
     */
    where?: StaffMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffMembers to fetch.
     */
    orderBy?: StaffMemberOrderByWithRelationInput | StaffMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffMembers.
     */
    cursor?: StaffMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffMembers.
     */
    skip?: number
    distinct?: StaffMemberScalarFieldEnum | StaffMemberScalarFieldEnum[]
  }

  /**
   * StaffMember create
   */
  export type StaffMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffMember
     */
    omit?: StaffMemberOmit<ExtArgs> | null
    /**
     * The data needed to create a StaffMember.
     */
    data: XOR<StaffMemberCreateInput, StaffMemberUncheckedCreateInput>
  }

  /**
   * StaffMember createMany
   */
  export type StaffMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffMembers.
     */
    data: StaffMemberCreateManyInput | StaffMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffMember createManyAndReturn
   */
  export type StaffMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffMember
     */
    omit?: StaffMemberOmit<ExtArgs> | null
    /**
     * The data used to create many StaffMembers.
     */
    data: StaffMemberCreateManyInput | StaffMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffMember update
   */
  export type StaffMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffMember
     */
    omit?: StaffMemberOmit<ExtArgs> | null
    /**
     * The data needed to update a StaffMember.
     */
    data: XOR<StaffMemberUpdateInput, StaffMemberUncheckedUpdateInput>
    /**
     * Choose, which StaffMember to update.
     */
    where: StaffMemberWhereUniqueInput
  }

  /**
   * StaffMember updateMany
   */
  export type StaffMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffMembers.
     */
    data: XOR<StaffMemberUpdateManyMutationInput, StaffMemberUncheckedUpdateManyInput>
    /**
     * Filter which StaffMembers to update
     */
    where?: StaffMemberWhereInput
    /**
     * Limit how many StaffMembers to update.
     */
    limit?: number
  }

  /**
   * StaffMember updateManyAndReturn
   */
  export type StaffMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffMember
     */
    omit?: StaffMemberOmit<ExtArgs> | null
    /**
     * The data used to update StaffMembers.
     */
    data: XOR<StaffMemberUpdateManyMutationInput, StaffMemberUncheckedUpdateManyInput>
    /**
     * Filter which StaffMembers to update
     */
    where?: StaffMemberWhereInput
    /**
     * Limit how many StaffMembers to update.
     */
    limit?: number
  }

  /**
   * StaffMember upsert
   */
  export type StaffMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffMember
     */
    omit?: StaffMemberOmit<ExtArgs> | null
    /**
     * The filter to search for the StaffMember to update in case it exists.
     */
    where: StaffMemberWhereUniqueInput
    /**
     * In case the StaffMember found by the `where` argument doesn't exist, create a new StaffMember with this data.
     */
    create: XOR<StaffMemberCreateInput, StaffMemberUncheckedCreateInput>
    /**
     * In case the StaffMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffMemberUpdateInput, StaffMemberUncheckedUpdateInput>
  }

  /**
   * StaffMember delete
   */
  export type StaffMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffMember
     */
    omit?: StaffMemberOmit<ExtArgs> | null
    /**
     * Filter which StaffMember to delete.
     */
    where: StaffMemberWhereUniqueInput
  }

  /**
   * StaffMember deleteMany
   */
  export type StaffMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffMembers to delete
     */
    where?: StaffMemberWhereInput
    /**
     * Limit how many StaffMembers to delete.
     */
    limit?: number
  }

  /**
   * StaffMember without action
   */
  export type StaffMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffMember
     */
    omit?: StaffMemberOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const WorkspaceUnitScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkspaceUnitScalarFieldEnum = (typeof WorkspaceUnitScalarFieldEnum)[keyof typeof WorkspaceUnitScalarFieldEnum]


  export const ERPUserScalarFieldEnum: {
    id: 'id',
    tenant_id: 'tenant_id',
    email: 'email',
    role: 'role',
    passwordHash: 'passwordHash',
    immutable: 'immutable',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ERPUserScalarFieldEnum = (typeof ERPUserScalarFieldEnum)[keyof typeof ERPUserScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    key: 'key',
    name: 'name',
    system: 'system'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    userId: 'userId',
    roleId: 'roleId',
    tenantId: 'tenantId'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const SodPolicyScalarFieldEnum: {
    id: 'id',
    key: 'key',
    description: 'description',
    active: 'active'
  };

  export type SodPolicyScalarFieldEnum = (typeof SodPolicyScalarFieldEnum)[keyof typeof SodPolicyScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    actorEmail: 'actorEmail',
    role: 'role',
    action: 'action',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    baseCurrency: 'baseCurrency'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const DistributionCenterScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name'
  };

  export type DistributionCenterScalarFieldEnum = (typeof DistributionCenterScalarFieldEnum)[keyof typeof DistributionCenterScalarFieldEnum]


  export const ProductSKUScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    uom: 'uom'
  };

  export type ProductSKUScalarFieldEnum = (typeof ProductSKUScalarFieldEnum)[keyof typeof ProductSKUScalarFieldEnum]


  export const ClientAccountScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email'
  };

  export type ClientAccountScalarFieldEnum = (typeof ClientAccountScalarFieldEnum)[keyof typeof ClientAccountScalarFieldEnum]


  export const SubscriptionPlanScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    priceMonthly: 'priceMonthly',
    currency: 'currency'
  };

  export type SubscriptionPlanScalarFieldEnum = (typeof SubscriptionPlanScalarFieldEnum)[keyof typeof SubscriptionPlanScalarFieldEnum]


  export const ActiveSubscriptionScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    planId: 'planId',
    status: 'status',
    startDate: 'startDate'
  };

  export type ActiveSubscriptionScalarFieldEnum = (typeof ActiveSubscriptionScalarFieldEnum)[keyof typeof ActiveSubscriptionScalarFieldEnum]


  export const CurrentInventoryScalarFieldEnum: {
    id: 'id',
    distributionCenterId: 'distributionCenterId',
    productSKUId: 'productSKUId',
    quantity: 'quantity'
  };

  export type CurrentInventoryScalarFieldEnum = (typeof CurrentInventoryScalarFieldEnum)[keyof typeof CurrentInventoryScalarFieldEnum]


  export const FulfillmentWaveScalarFieldEnum: {
    id: 'id',
    distributionCenterId: 'distributionCenterId',
    waveCode: 'waveCode'
  };

  export type FulfillmentWaveScalarFieldEnum = (typeof FulfillmentWaveScalarFieldEnum)[keyof typeof FulfillmentWaveScalarFieldEnum]


  export const ProjectEngagementScalarFieldEnum: {
    id: 'id',
    code: 'code',
    title: 'title',
    billMethod: 'billMethod'
  };

  export type ProjectEngagementScalarFieldEnum = (typeof ProjectEngagementScalarFieldEnum)[keyof typeof ProjectEngagementScalarFieldEnum]


  export const WorkHoursLogScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    employeeName: 'employeeName',
    date: 'date',
    hours: 'hours',
    rate: 'rate'
  };

  export type WorkHoursLogScalarFieldEnum = (typeof WorkHoursLogScalarFieldEnum)[keyof typeof WorkHoursLogScalarFieldEnum]


  export const StaffMemberScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    niLetter: 'niLetter',
    taxCode: 'taxCode'
  };

  export type StaffMemberScalarFieldEnum = (typeof StaffMemberScalarFieldEnum)[keyof typeof StaffMemberScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type WorkspaceUnitWhereInput = {
    AND?: WorkspaceUnitWhereInput | WorkspaceUnitWhereInput[]
    OR?: WorkspaceUnitWhereInput[]
    NOT?: WorkspaceUnitWhereInput | WorkspaceUnitWhereInput[]
    id?: StringFilter<"WorkspaceUnit"> | string
    code?: StringFilter<"WorkspaceUnit"> | string
    name?: StringFilter<"WorkspaceUnit"> | string
    createdAt?: DateTimeFilter<"WorkspaceUnit"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceUnit"> | Date | string
  }

  export type WorkspaceUnitOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceUnitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: WorkspaceUnitWhereInput | WorkspaceUnitWhereInput[]
    OR?: WorkspaceUnitWhereInput[]
    NOT?: WorkspaceUnitWhereInput | WorkspaceUnitWhereInput[]
    name?: StringFilter<"WorkspaceUnit"> | string
    createdAt?: DateTimeFilter<"WorkspaceUnit"> | Date | string
    updatedAt?: DateTimeFilter<"WorkspaceUnit"> | Date | string
  }, "id" | "code">

  export type WorkspaceUnitOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkspaceUnitCountOrderByAggregateInput
    _max?: WorkspaceUnitMaxOrderByAggregateInput
    _min?: WorkspaceUnitMinOrderByAggregateInput
  }

  export type WorkspaceUnitScalarWhereWithAggregatesInput = {
    AND?: WorkspaceUnitScalarWhereWithAggregatesInput | WorkspaceUnitScalarWhereWithAggregatesInput[]
    OR?: WorkspaceUnitScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceUnitScalarWhereWithAggregatesInput | WorkspaceUnitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkspaceUnit"> | string
    code?: StringWithAggregatesFilter<"WorkspaceUnit"> | string
    name?: StringWithAggregatesFilter<"WorkspaceUnit"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WorkspaceUnit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkspaceUnit"> | Date | string
  }

  export type ERPUserWhereInput = {
    AND?: ERPUserWhereInput | ERPUserWhereInput[]
    OR?: ERPUserWhereInput[]
    NOT?: ERPUserWhereInput | ERPUserWhereInput[]
    id?: StringFilter<"ERPUser"> | string
    tenant_id?: StringFilter<"ERPUser"> | string
    email?: StringFilter<"ERPUser"> | string
    role?: StringFilter<"ERPUser"> | string
    passwordHash?: StringNullableFilter<"ERPUser"> | string | null
    immutable?: BoolFilter<"ERPUser"> | boolean
    status?: StringFilter<"ERPUser"> | string
    createdAt?: DateTimeFilter<"ERPUser"> | Date | string
    updatedAt?: DateTimeFilter<"ERPUser"> | Date | string
  }

  export type ERPUserOrderByWithRelationInput = {
    id?: SortOrder
    tenant_id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    immutable?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ERPUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: ERPUserWhereInput | ERPUserWhereInput[]
    OR?: ERPUserWhereInput[]
    NOT?: ERPUserWhereInput | ERPUserWhereInput[]
    tenant_id?: StringFilter<"ERPUser"> | string
    role?: StringFilter<"ERPUser"> | string
    passwordHash?: StringNullableFilter<"ERPUser"> | string | null
    immutable?: BoolFilter<"ERPUser"> | boolean
    status?: StringFilter<"ERPUser"> | string
    createdAt?: DateTimeFilter<"ERPUser"> | Date | string
    updatedAt?: DateTimeFilter<"ERPUser"> | Date | string
  }, "id" | "email">

  export type ERPUserOrderByWithAggregationInput = {
    id?: SortOrder
    tenant_id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    immutable?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ERPUserCountOrderByAggregateInput
    _max?: ERPUserMaxOrderByAggregateInput
    _min?: ERPUserMinOrderByAggregateInput
  }

  export type ERPUserScalarWhereWithAggregatesInput = {
    AND?: ERPUserScalarWhereWithAggregatesInput | ERPUserScalarWhereWithAggregatesInput[]
    OR?: ERPUserScalarWhereWithAggregatesInput[]
    NOT?: ERPUserScalarWhereWithAggregatesInput | ERPUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ERPUser"> | string
    tenant_id?: StringWithAggregatesFilter<"ERPUser"> | string
    email?: StringWithAggregatesFilter<"ERPUser"> | string
    role?: StringWithAggregatesFilter<"ERPUser"> | string
    passwordHash?: StringNullableWithAggregatesFilter<"ERPUser"> | string | null
    immutable?: BoolWithAggregatesFilter<"ERPUser"> | boolean
    status?: StringWithAggregatesFilter<"ERPUser"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ERPUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ERPUser"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: IntFilter<"Role"> | number
    key?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    system?: BoolFilter<"Role"> | boolean
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    system?: SortOrder
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    key?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    name?: StringFilter<"Role"> | string
    system?: BoolFilter<"Role"> | boolean
  }, "id" | "key">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    system?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Role"> | number
    key?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    system?: BoolWithAggregatesFilter<"Role"> | boolean
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: IntFilter<"UserRole"> | number
    tenantId?: StringNullableFilter<"UserRole"> | string | null
  }

  export type UserRoleOrderByWithRelationInput = {
    userId?: SortOrder
    roleId?: SortOrder
    tenantId?: SortOrderInput | SortOrder
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    userId_roleId?: UserRoleUserIdRoleIdCompoundUniqueInput
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: IntFilter<"UserRole"> | number
    tenantId?: StringNullableFilter<"UserRole"> | string | null
  }, "userId_roleId">

  export type UserRoleOrderByWithAggregationInput = {
    userId?: SortOrder
    roleId?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _avg?: UserRoleAvgOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
    _sum?: UserRoleSumOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserRole"> | string
    roleId?: IntWithAggregatesFilter<"UserRole"> | number
    tenantId?: StringNullableWithAggregatesFilter<"UserRole"> | string | null
  }

  export type SodPolicyWhereInput = {
    AND?: SodPolicyWhereInput | SodPolicyWhereInput[]
    OR?: SodPolicyWhereInput[]
    NOT?: SodPolicyWhereInput | SodPolicyWhereInput[]
    id?: IntFilter<"SodPolicy"> | number
    key?: StringFilter<"SodPolicy"> | string
    description?: StringNullableFilter<"SodPolicy"> | string | null
    active?: BoolFilter<"SodPolicy"> | boolean
  }

  export type SodPolicyOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    description?: SortOrderInput | SortOrder
    active?: SortOrder
  }

  export type SodPolicyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    key?: string
    AND?: SodPolicyWhereInput | SodPolicyWhereInput[]
    OR?: SodPolicyWhereInput[]
    NOT?: SodPolicyWhereInput | SodPolicyWhereInput[]
    description?: StringNullableFilter<"SodPolicy"> | string | null
    active?: BoolFilter<"SodPolicy"> | boolean
  }, "id" | "key">

  export type SodPolicyOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    description?: SortOrderInput | SortOrder
    active?: SortOrder
    _count?: SodPolicyCountOrderByAggregateInput
    _avg?: SodPolicyAvgOrderByAggregateInput
    _max?: SodPolicyMaxOrderByAggregateInput
    _min?: SodPolicyMinOrderByAggregateInput
    _sum?: SodPolicySumOrderByAggregateInput
  }

  export type SodPolicyScalarWhereWithAggregatesInput = {
    AND?: SodPolicyScalarWhereWithAggregatesInput | SodPolicyScalarWhereWithAggregatesInput[]
    OR?: SodPolicyScalarWhereWithAggregatesInput[]
    NOT?: SodPolicyScalarWhereWithAggregatesInput | SodPolicyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SodPolicy"> | number
    key?: StringWithAggregatesFilter<"SodPolicy"> | string
    description?: StringNullableWithAggregatesFilter<"SodPolicy"> | string | null
    active?: BoolWithAggregatesFilter<"SodPolicy"> | boolean
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    actorEmail?: StringFilter<"AuditLog"> | string
    role?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    details?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    actorEmail?: SortOrder
    role?: SortOrderInput | SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    actorEmail?: StringFilter<"AuditLog"> | string
    role?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    details?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    actorEmail?: SortOrder
    role?: SortOrderInput | SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _avg?: AuditLogAvgOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
    _sum?: AuditLogSumOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AuditLog"> | number
    actorEmail?: StringWithAggregatesFilter<"AuditLog"> | string
    role?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    details?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: IntFilter<"Organization"> | number
    code?: StringFilter<"Organization"> | string
    name?: StringFilter<"Organization"> | string
    baseCurrency?: StringFilter<"Organization"> | string
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    baseCurrency?: SortOrder
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    baseCurrency?: StringFilter<"Organization"> | string
  }, "id" | "code">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    baseCurrency?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _avg?: OrganizationAvgOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
    _sum?: OrganizationSumOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Organization"> | number
    code?: StringWithAggregatesFilter<"Organization"> | string
    name?: StringWithAggregatesFilter<"Organization"> | string
    baseCurrency?: StringWithAggregatesFilter<"Organization"> | string
  }

  export type DistributionCenterWhereInput = {
    AND?: DistributionCenterWhereInput | DistributionCenterWhereInput[]
    OR?: DistributionCenterWhereInput[]
    NOT?: DistributionCenterWhereInput | DistributionCenterWhereInput[]
    id?: IntFilter<"DistributionCenter"> | number
    code?: StringFilter<"DistributionCenter"> | string
    name?: StringFilter<"DistributionCenter"> | string
    inventory?: CurrentInventoryListRelationFilter
    pickWaves?: FulfillmentWaveListRelationFilter
  }

  export type DistributionCenterOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    inventory?: CurrentInventoryOrderByRelationAggregateInput
    pickWaves?: FulfillmentWaveOrderByRelationAggregateInput
  }

  export type DistributionCenterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: DistributionCenterWhereInput | DistributionCenterWhereInput[]
    OR?: DistributionCenterWhereInput[]
    NOT?: DistributionCenterWhereInput | DistributionCenterWhereInput[]
    name?: StringFilter<"DistributionCenter"> | string
    inventory?: CurrentInventoryListRelationFilter
    pickWaves?: FulfillmentWaveListRelationFilter
  }, "id" | "code">

  export type DistributionCenterOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    _count?: DistributionCenterCountOrderByAggregateInput
    _avg?: DistributionCenterAvgOrderByAggregateInput
    _max?: DistributionCenterMaxOrderByAggregateInput
    _min?: DistributionCenterMinOrderByAggregateInput
    _sum?: DistributionCenterSumOrderByAggregateInput
  }

  export type DistributionCenterScalarWhereWithAggregatesInput = {
    AND?: DistributionCenterScalarWhereWithAggregatesInput | DistributionCenterScalarWhereWithAggregatesInput[]
    OR?: DistributionCenterScalarWhereWithAggregatesInput[]
    NOT?: DistributionCenterScalarWhereWithAggregatesInput | DistributionCenterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DistributionCenter"> | number
    code?: StringWithAggregatesFilter<"DistributionCenter"> | string
    name?: StringWithAggregatesFilter<"DistributionCenter"> | string
  }

  export type ProductSKUWhereInput = {
    AND?: ProductSKUWhereInput | ProductSKUWhereInput[]
    OR?: ProductSKUWhereInput[]
    NOT?: ProductSKUWhereInput | ProductSKUWhereInput[]
    id?: IntFilter<"ProductSKU"> | number
    code?: StringFilter<"ProductSKU"> | string
    name?: StringFilter<"ProductSKU"> | string
    uom?: StringFilter<"ProductSKU"> | string
    inventory?: CurrentInventoryListRelationFilter
  }

  export type ProductSKUOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    uom?: SortOrder
    inventory?: CurrentInventoryOrderByRelationAggregateInput
  }

  export type ProductSKUWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductSKUWhereInput | ProductSKUWhereInput[]
    OR?: ProductSKUWhereInput[]
    NOT?: ProductSKUWhereInput | ProductSKUWhereInput[]
    code?: StringFilter<"ProductSKU"> | string
    name?: StringFilter<"ProductSKU"> | string
    uom?: StringFilter<"ProductSKU"> | string
    inventory?: CurrentInventoryListRelationFilter
  }, "id">

  export type ProductSKUOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    uom?: SortOrder
    _count?: ProductSKUCountOrderByAggregateInput
    _avg?: ProductSKUAvgOrderByAggregateInput
    _max?: ProductSKUMaxOrderByAggregateInput
    _min?: ProductSKUMinOrderByAggregateInput
    _sum?: ProductSKUSumOrderByAggregateInput
  }

  export type ProductSKUScalarWhereWithAggregatesInput = {
    AND?: ProductSKUScalarWhereWithAggregatesInput | ProductSKUScalarWhereWithAggregatesInput[]
    OR?: ProductSKUScalarWhereWithAggregatesInput[]
    NOT?: ProductSKUScalarWhereWithAggregatesInput | ProductSKUScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductSKU"> | number
    code?: StringWithAggregatesFilter<"ProductSKU"> | string
    name?: StringWithAggregatesFilter<"ProductSKU"> | string
    uom?: StringWithAggregatesFilter<"ProductSKU"> | string
  }

  export type ClientAccountWhereInput = {
    AND?: ClientAccountWhereInput | ClientAccountWhereInput[]
    OR?: ClientAccountWhereInput[]
    NOT?: ClientAccountWhereInput | ClientAccountWhereInput[]
    id?: IntFilter<"ClientAccount"> | number
    name?: StringFilter<"ClientAccount"> | string
    email?: StringFilter<"ClientAccount"> | string
    subscriptions?: ActiveSubscriptionListRelationFilter
  }

  export type ClientAccountOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subscriptions?: ActiveSubscriptionOrderByRelationAggregateInput
  }

  export type ClientAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: ClientAccountWhereInput | ClientAccountWhereInput[]
    OR?: ClientAccountWhereInput[]
    NOT?: ClientAccountWhereInput | ClientAccountWhereInput[]
    name?: StringFilter<"ClientAccount"> | string
    subscriptions?: ActiveSubscriptionListRelationFilter
  }, "id" | "email">

  export type ClientAccountOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    _count?: ClientAccountCountOrderByAggregateInput
    _avg?: ClientAccountAvgOrderByAggregateInput
    _max?: ClientAccountMaxOrderByAggregateInput
    _min?: ClientAccountMinOrderByAggregateInput
    _sum?: ClientAccountSumOrderByAggregateInput
  }

  export type ClientAccountScalarWhereWithAggregatesInput = {
    AND?: ClientAccountScalarWhereWithAggregatesInput | ClientAccountScalarWhereWithAggregatesInput[]
    OR?: ClientAccountScalarWhereWithAggregatesInput[]
    NOT?: ClientAccountScalarWhereWithAggregatesInput | ClientAccountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClientAccount"> | number
    name?: StringWithAggregatesFilter<"ClientAccount"> | string
    email?: StringWithAggregatesFilter<"ClientAccount"> | string
  }

  export type SubscriptionPlanWhereInput = {
    AND?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    OR?: SubscriptionPlanWhereInput[]
    NOT?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    id?: IntFilter<"SubscriptionPlan"> | number
    code?: StringFilter<"SubscriptionPlan"> | string
    name?: StringFilter<"SubscriptionPlan"> | string
    priceMonthly?: IntFilter<"SubscriptionPlan"> | number
    currency?: StringFilter<"SubscriptionPlan"> | string
    subscriptions?: ActiveSubscriptionListRelationFilter
  }

  export type SubscriptionPlanOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    priceMonthly?: SortOrder
    currency?: SortOrder
    subscriptions?: ActiveSubscriptionOrderByRelationAggregateInput
  }

  export type SubscriptionPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    OR?: SubscriptionPlanWhereInput[]
    NOT?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    name?: StringFilter<"SubscriptionPlan"> | string
    priceMonthly?: IntFilter<"SubscriptionPlan"> | number
    currency?: StringFilter<"SubscriptionPlan"> | string
    subscriptions?: ActiveSubscriptionListRelationFilter
  }, "id" | "code">

  export type SubscriptionPlanOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    priceMonthly?: SortOrder
    currency?: SortOrder
    _count?: SubscriptionPlanCountOrderByAggregateInput
    _avg?: SubscriptionPlanAvgOrderByAggregateInput
    _max?: SubscriptionPlanMaxOrderByAggregateInput
    _min?: SubscriptionPlanMinOrderByAggregateInput
    _sum?: SubscriptionPlanSumOrderByAggregateInput
  }

  export type SubscriptionPlanScalarWhereWithAggregatesInput = {
    AND?: SubscriptionPlanScalarWhereWithAggregatesInput | SubscriptionPlanScalarWhereWithAggregatesInput[]
    OR?: SubscriptionPlanScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionPlanScalarWhereWithAggregatesInput | SubscriptionPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SubscriptionPlan"> | number
    code?: StringWithAggregatesFilter<"SubscriptionPlan"> | string
    name?: StringWithAggregatesFilter<"SubscriptionPlan"> | string
    priceMonthly?: IntWithAggregatesFilter<"SubscriptionPlan"> | number
    currency?: StringWithAggregatesFilter<"SubscriptionPlan"> | string
  }

  export type ActiveSubscriptionWhereInput = {
    AND?: ActiveSubscriptionWhereInput | ActiveSubscriptionWhereInput[]
    OR?: ActiveSubscriptionWhereInput[]
    NOT?: ActiveSubscriptionWhereInput | ActiveSubscriptionWhereInput[]
    id?: IntFilter<"ActiveSubscription"> | number
    customerId?: IntFilter<"ActiveSubscription"> | number
    planId?: IntFilter<"ActiveSubscription"> | number
    status?: StringFilter<"ActiveSubscription"> | string
    startDate?: DateTimeFilter<"ActiveSubscription"> | Date | string
    customer?: XOR<ClientAccountScalarRelationFilter, ClientAccountWhereInput>
    plan?: XOR<SubscriptionPlanScalarRelationFilter, SubscriptionPlanWhereInput>
  }

  export type ActiveSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    customer?: ClientAccountOrderByWithRelationInput
    plan?: SubscriptionPlanOrderByWithRelationInput
  }

  export type ActiveSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    customerId_planId?: ActiveSubscriptionCustomerId_planIdCompoundUniqueInput
    AND?: ActiveSubscriptionWhereInput | ActiveSubscriptionWhereInput[]
    OR?: ActiveSubscriptionWhereInput[]
    NOT?: ActiveSubscriptionWhereInput | ActiveSubscriptionWhereInput[]
    customerId?: IntFilter<"ActiveSubscription"> | number
    planId?: IntFilter<"ActiveSubscription"> | number
    status?: StringFilter<"ActiveSubscription"> | string
    startDate?: DateTimeFilter<"ActiveSubscription"> | Date | string
    customer?: XOR<ClientAccountScalarRelationFilter, ClientAccountWhereInput>
    plan?: XOR<SubscriptionPlanScalarRelationFilter, SubscriptionPlanWhereInput>
  }, "id" | "customerId_planId">

  export type ActiveSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    _count?: ActiveSubscriptionCountOrderByAggregateInput
    _avg?: ActiveSubscriptionAvgOrderByAggregateInput
    _max?: ActiveSubscriptionMaxOrderByAggregateInput
    _min?: ActiveSubscriptionMinOrderByAggregateInput
    _sum?: ActiveSubscriptionSumOrderByAggregateInput
  }

  export type ActiveSubscriptionScalarWhereWithAggregatesInput = {
    AND?: ActiveSubscriptionScalarWhereWithAggregatesInput | ActiveSubscriptionScalarWhereWithAggregatesInput[]
    OR?: ActiveSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: ActiveSubscriptionScalarWhereWithAggregatesInput | ActiveSubscriptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ActiveSubscription"> | number
    customerId?: IntWithAggregatesFilter<"ActiveSubscription"> | number
    planId?: IntWithAggregatesFilter<"ActiveSubscription"> | number
    status?: StringWithAggregatesFilter<"ActiveSubscription"> | string
    startDate?: DateTimeWithAggregatesFilter<"ActiveSubscription"> | Date | string
  }

  export type CurrentInventoryWhereInput = {
    AND?: CurrentInventoryWhereInput | CurrentInventoryWhereInput[]
    OR?: CurrentInventoryWhereInput[]
    NOT?: CurrentInventoryWhereInput | CurrentInventoryWhereInput[]
    id?: IntFilter<"CurrentInventory"> | number
    distributionCenterId?: IntFilter<"CurrentInventory"> | number
    productSKUId?: IntFilter<"CurrentInventory"> | number
    quantity?: IntFilter<"CurrentInventory"> | number
    distributionCenter?: XOR<DistributionCenterScalarRelationFilter, DistributionCenterWhereInput>
    productSKU?: XOR<ProductSKUScalarRelationFilter, ProductSKUWhereInput>
  }

  export type CurrentInventoryOrderByWithRelationInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
    productSKUId?: SortOrder
    quantity?: SortOrder
    distributionCenter?: DistributionCenterOrderByWithRelationInput
    productSKU?: ProductSKUOrderByWithRelationInput
  }

  export type CurrentInventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    warehouseId_itemId?: CurrentInventoryWarehouseId_itemIdCompoundUniqueInput
    AND?: CurrentInventoryWhereInput | CurrentInventoryWhereInput[]
    OR?: CurrentInventoryWhereInput[]
    NOT?: CurrentInventoryWhereInput | CurrentInventoryWhereInput[]
    distributionCenterId?: IntFilter<"CurrentInventory"> | number
    productSKUId?: IntFilter<"CurrentInventory"> | number
    quantity?: IntFilter<"CurrentInventory"> | number
    distributionCenter?: XOR<DistributionCenterScalarRelationFilter, DistributionCenterWhereInput>
    productSKU?: XOR<ProductSKUScalarRelationFilter, ProductSKUWhereInput>
  }, "id" | "warehouseId_itemId">

  export type CurrentInventoryOrderByWithAggregationInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
    productSKUId?: SortOrder
    quantity?: SortOrder
    _count?: CurrentInventoryCountOrderByAggregateInput
    _avg?: CurrentInventoryAvgOrderByAggregateInput
    _max?: CurrentInventoryMaxOrderByAggregateInput
    _min?: CurrentInventoryMinOrderByAggregateInput
    _sum?: CurrentInventorySumOrderByAggregateInput
  }

  export type CurrentInventoryScalarWhereWithAggregatesInput = {
    AND?: CurrentInventoryScalarWhereWithAggregatesInput | CurrentInventoryScalarWhereWithAggregatesInput[]
    OR?: CurrentInventoryScalarWhereWithAggregatesInput[]
    NOT?: CurrentInventoryScalarWhereWithAggregatesInput | CurrentInventoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CurrentInventory"> | number
    distributionCenterId?: IntWithAggregatesFilter<"CurrentInventory"> | number
    productSKUId?: IntWithAggregatesFilter<"CurrentInventory"> | number
    quantity?: IntWithAggregatesFilter<"CurrentInventory"> | number
  }

  export type FulfillmentWaveWhereInput = {
    AND?: FulfillmentWaveWhereInput | FulfillmentWaveWhereInput[]
    OR?: FulfillmentWaveWhereInput[]
    NOT?: FulfillmentWaveWhereInput | FulfillmentWaveWhereInput[]
    id?: IntFilter<"FulfillmentWave"> | number
    distributionCenterId?: IntFilter<"FulfillmentWave"> | number
    waveCode?: StringFilter<"FulfillmentWave"> | string
    distributionCenter?: XOR<DistributionCenterScalarRelationFilter, DistributionCenterWhereInput>
  }

  export type FulfillmentWaveOrderByWithRelationInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
    waveCode?: SortOrder
    distributionCenter?: DistributionCenterOrderByWithRelationInput
  }

  export type FulfillmentWaveWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FulfillmentWaveWhereInput | FulfillmentWaveWhereInput[]
    OR?: FulfillmentWaveWhereInput[]
    NOT?: FulfillmentWaveWhereInput | FulfillmentWaveWhereInput[]
    distributionCenterId?: IntFilter<"FulfillmentWave"> | number
    waveCode?: StringFilter<"FulfillmentWave"> | string
    distributionCenter?: XOR<DistributionCenterScalarRelationFilter, DistributionCenterWhereInput>
  }, "id">

  export type FulfillmentWaveOrderByWithAggregationInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
    waveCode?: SortOrder
    _count?: FulfillmentWaveCountOrderByAggregateInput
    _avg?: FulfillmentWaveAvgOrderByAggregateInput
    _max?: FulfillmentWaveMaxOrderByAggregateInput
    _min?: FulfillmentWaveMinOrderByAggregateInput
    _sum?: FulfillmentWaveSumOrderByAggregateInput
  }

  export type FulfillmentWaveScalarWhereWithAggregatesInput = {
    AND?: FulfillmentWaveScalarWhereWithAggregatesInput | FulfillmentWaveScalarWhereWithAggregatesInput[]
    OR?: FulfillmentWaveScalarWhereWithAggregatesInput[]
    NOT?: FulfillmentWaveScalarWhereWithAggregatesInput | FulfillmentWaveScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FulfillmentWave"> | number
    distributionCenterId?: IntWithAggregatesFilter<"FulfillmentWave"> | number
    waveCode?: StringWithAggregatesFilter<"FulfillmentWave"> | string
  }

  export type ProjectEngagementWhereInput = {
    AND?: ProjectEngagementWhereInput | ProjectEngagementWhereInput[]
    OR?: ProjectEngagementWhereInput[]
    NOT?: ProjectEngagementWhereInput | ProjectEngagementWhereInput[]
    id?: IntFilter<"ProjectEngagement"> | number
    code?: StringFilter<"ProjectEngagement"> | string
    title?: StringFilter<"ProjectEngagement"> | string
    billMethod?: StringFilter<"ProjectEngagement"> | string
    timesheets?: WorkHoursLogListRelationFilter
  }

  export type ProjectEngagementOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    billMethod?: SortOrder
    timesheets?: WorkHoursLogOrderByRelationAggregateInput
  }

  export type ProjectEngagementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: ProjectEngagementWhereInput | ProjectEngagementWhereInput[]
    OR?: ProjectEngagementWhereInput[]
    NOT?: ProjectEngagementWhereInput | ProjectEngagementWhereInput[]
    title?: StringFilter<"ProjectEngagement"> | string
    billMethod?: StringFilter<"ProjectEngagement"> | string
    timesheets?: WorkHoursLogListRelationFilter
  }, "id" | "code">

  export type ProjectEngagementOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    billMethod?: SortOrder
    _count?: ProjectEngagementCountOrderByAggregateInput
    _avg?: ProjectEngagementAvgOrderByAggregateInput
    _max?: ProjectEngagementMaxOrderByAggregateInput
    _min?: ProjectEngagementMinOrderByAggregateInput
    _sum?: ProjectEngagementSumOrderByAggregateInput
  }

  export type ProjectEngagementScalarWhereWithAggregatesInput = {
    AND?: ProjectEngagementScalarWhereWithAggregatesInput | ProjectEngagementScalarWhereWithAggregatesInput[]
    OR?: ProjectEngagementScalarWhereWithAggregatesInput[]
    NOT?: ProjectEngagementScalarWhereWithAggregatesInput | ProjectEngagementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProjectEngagement"> | number
    code?: StringWithAggregatesFilter<"ProjectEngagement"> | string
    title?: StringWithAggregatesFilter<"ProjectEngagement"> | string
    billMethod?: StringWithAggregatesFilter<"ProjectEngagement"> | string
  }

  export type WorkHoursLogWhereInput = {
    AND?: WorkHoursLogWhereInput | WorkHoursLogWhereInput[]
    OR?: WorkHoursLogWhereInput[]
    NOT?: WorkHoursLogWhereInput | WorkHoursLogWhereInput[]
    id?: IntFilter<"WorkHoursLog"> | number
    projectId?: IntFilter<"WorkHoursLog"> | number
    employeeName?: StringFilter<"WorkHoursLog"> | string
    date?: DateTimeFilter<"WorkHoursLog"> | Date | string
    hours?: FloatFilter<"WorkHoursLog"> | number
    rate?: FloatFilter<"WorkHoursLog"> | number
    project?: XOR<ProjectEngagementScalarRelationFilter, ProjectEngagementWhereInput>
  }

  export type WorkHoursLogOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    employeeName?: SortOrder
    date?: SortOrder
    hours?: SortOrder
    rate?: SortOrder
    project?: ProjectEngagementOrderByWithRelationInput
  }

  export type WorkHoursLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkHoursLogWhereInput | WorkHoursLogWhereInput[]
    OR?: WorkHoursLogWhereInput[]
    NOT?: WorkHoursLogWhereInput | WorkHoursLogWhereInput[]
    projectId?: IntFilter<"WorkHoursLog"> | number
    employeeName?: StringFilter<"WorkHoursLog"> | string
    date?: DateTimeFilter<"WorkHoursLog"> | Date | string
    hours?: FloatFilter<"WorkHoursLog"> | number
    rate?: FloatFilter<"WorkHoursLog"> | number
    project?: XOR<ProjectEngagementScalarRelationFilter, ProjectEngagementWhereInput>
  }, "id">

  export type WorkHoursLogOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    employeeName?: SortOrder
    date?: SortOrder
    hours?: SortOrder
    rate?: SortOrder
    _count?: WorkHoursLogCountOrderByAggregateInput
    _avg?: WorkHoursLogAvgOrderByAggregateInput
    _max?: WorkHoursLogMaxOrderByAggregateInput
    _min?: WorkHoursLogMinOrderByAggregateInput
    _sum?: WorkHoursLogSumOrderByAggregateInput
  }

  export type WorkHoursLogScalarWhereWithAggregatesInput = {
    AND?: WorkHoursLogScalarWhereWithAggregatesInput | WorkHoursLogScalarWhereWithAggregatesInput[]
    OR?: WorkHoursLogScalarWhereWithAggregatesInput[]
    NOT?: WorkHoursLogScalarWhereWithAggregatesInput | WorkHoursLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkHoursLog"> | number
    projectId?: IntWithAggregatesFilter<"WorkHoursLog"> | number
    employeeName?: StringWithAggregatesFilter<"WorkHoursLog"> | string
    date?: DateTimeWithAggregatesFilter<"WorkHoursLog"> | Date | string
    hours?: FloatWithAggregatesFilter<"WorkHoursLog"> | number
    rate?: FloatWithAggregatesFilter<"WorkHoursLog"> | number
  }

  export type StaffMemberWhereInput = {
    AND?: StaffMemberWhereInput | StaffMemberWhereInput[]
    OR?: StaffMemberWhereInput[]
    NOT?: StaffMemberWhereInput | StaffMemberWhereInput[]
    id?: IntFilter<"StaffMember"> | number
    name?: StringFilter<"StaffMember"> | string
    email?: StringFilter<"StaffMember"> | string
    niLetter?: StringFilter<"StaffMember"> | string
    taxCode?: StringFilter<"StaffMember"> | string
  }

  export type StaffMemberOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    niLetter?: SortOrder
    taxCode?: SortOrder
  }

  export type StaffMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: StaffMemberWhereInput | StaffMemberWhereInput[]
    OR?: StaffMemberWhereInput[]
    NOT?: StaffMemberWhereInput | StaffMemberWhereInput[]
    name?: StringFilter<"StaffMember"> | string
    niLetter?: StringFilter<"StaffMember"> | string
    taxCode?: StringFilter<"StaffMember"> | string
  }, "id" | "email">

  export type StaffMemberOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    niLetter?: SortOrder
    taxCode?: SortOrder
    _count?: StaffMemberCountOrderByAggregateInput
    _avg?: StaffMemberAvgOrderByAggregateInput
    _max?: StaffMemberMaxOrderByAggregateInput
    _min?: StaffMemberMinOrderByAggregateInput
    _sum?: StaffMemberSumOrderByAggregateInput
  }

  export type StaffMemberScalarWhereWithAggregatesInput = {
    AND?: StaffMemberScalarWhereWithAggregatesInput | StaffMemberScalarWhereWithAggregatesInput[]
    OR?: StaffMemberScalarWhereWithAggregatesInput[]
    NOT?: StaffMemberScalarWhereWithAggregatesInput | StaffMemberScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StaffMember"> | number
    name?: StringWithAggregatesFilter<"StaffMember"> | string
    email?: StringWithAggregatesFilter<"StaffMember"> | string
    niLetter?: StringWithAggregatesFilter<"StaffMember"> | string
    taxCode?: StringWithAggregatesFilter<"StaffMember"> | string
  }

  export type WorkspaceUnitCreateInput = {
    id?: string
    code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceUnitUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceUnitUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceUnitUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceUnitCreateManyInput = {
    id?: string
    code: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkspaceUnitUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceUnitUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ERPUserCreateInput = {
    id?: string
    tenant_id: string
    email: string
    role: string
    passwordHash?: string | null
    immutable?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ERPUserUncheckedCreateInput = {
    id?: string
    tenant_id: string
    email: string
    role: string
    passwordHash?: string | null
    immutable?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ERPUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenant_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    immutable?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ERPUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenant_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    immutable?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ERPUserCreateManyInput = {
    id?: string
    tenant_id: string
    email: string
    role: string
    passwordHash?: string | null
    immutable?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ERPUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenant_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    immutable?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ERPUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenant_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    immutable?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    key: string
    name: string
    system?: boolean
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    key: string
    name: string
    system?: boolean
  }

  export type RoleUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    system?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    system?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoleCreateManyInput = {
    id?: number
    key: string
    name: string
    system?: boolean
  }

  export type RoleUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    system?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    system?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRoleCreateInput = {
    userId: string
    roleId: number
    tenantId?: string | null
  }

  export type UserRoleUncheckedCreateInput = {
    userId: string
    roleId: number
    tenantId?: string | null
  }

  export type UserRoleUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserRoleUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserRoleCreateManyInput = {
    userId: string
    roleId: number
    tenantId?: string | null
  }

  export type UserRoleUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserRoleUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SodPolicyCreateInput = {
    key: string
    description?: string | null
    active?: boolean
  }

  export type SodPolicyUncheckedCreateInput = {
    id?: number
    key: string
    description?: string | null
    active?: boolean
  }

  export type SodPolicyUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SodPolicyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SodPolicyCreateManyInput = {
    id?: number
    key: string
    description?: string | null
    active?: boolean
  }

  export type SodPolicyUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SodPolicyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AuditLogCreateInput = {
    actorEmail: string
    role?: string | null
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateInput = {
    id?: number
    actorEmail: string
    role?: string | null
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    actorEmail?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    actorEmail?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: number
    actorEmail: string
    role?: string | null
    action: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    actorEmail?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    actorEmail?: StringFieldUpdateOperationsInput | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationCreateInput = {
    code: string
    name: string
    baseCurrency: string
  }

  export type OrganizationUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    baseCurrency: string
  }

  export type OrganizationUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    baseCurrency?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    baseCurrency?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationCreateManyInput = {
    id?: number
    code: string
    name: string
    baseCurrency: string
  }

  export type OrganizationUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    baseCurrency?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    baseCurrency?: StringFieldUpdateOperationsInput | string
  }

  export type DistributionCenterCreateInput = {
    code: string
    name: string
    inventory?: CurrentInventoryCreateNestedManyWithoutDistributionCenterInput
    pickWaves?: FulfillmentWaveCreateNestedManyWithoutDistributionCenterInput
  }

  export type DistributionCenterUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    inventory?: CurrentInventoryUncheckedCreateNestedManyWithoutDistributionCenterInput
    pickWaves?: FulfillmentWaveUncheckedCreateNestedManyWithoutDistributionCenterInput
  }

  export type DistributionCenterUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    inventory?: CurrentInventoryUpdateManyWithoutDistributionCenterNestedInput
    pickWaves?: FulfillmentWaveUpdateManyWithoutDistributionCenterNestedInput
  }

  export type DistributionCenterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    inventory?: CurrentInventoryUncheckedUpdateManyWithoutDistributionCenterNestedInput
    pickWaves?: FulfillmentWaveUncheckedUpdateManyWithoutDistributionCenterNestedInput
  }

  export type DistributionCenterCreateManyInput = {
    id?: number
    code: string
    name: string
  }

  export type DistributionCenterUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DistributionCenterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSKUCreateInput = {
    code: string
    name: string
    uom: string
    inventory?: CurrentInventoryCreateNestedManyWithoutProductSKUInput
  }

  export type ProductSKUUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    uom: string
    inventory?: CurrentInventoryUncheckedCreateNestedManyWithoutProductSKUInput
  }

  export type ProductSKUUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    uom?: StringFieldUpdateOperationsInput | string
    inventory?: CurrentInventoryUpdateManyWithoutProductSKUNestedInput
  }

  export type ProductSKUUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    uom?: StringFieldUpdateOperationsInput | string
    inventory?: CurrentInventoryUncheckedUpdateManyWithoutProductSKUNestedInput
  }

  export type ProductSKUCreateManyInput = {
    id?: number
    code: string
    name: string
    uom: string
  }

  export type ProductSKUUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    uom?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSKUUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    uom?: StringFieldUpdateOperationsInput | string
  }

  export type ClientAccountCreateInput = {
    name: string
    email: string
    subscriptions?: ActiveSubscriptionCreateNestedManyWithoutCustomerInput
  }

  export type ClientAccountUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    subscriptions?: ActiveSubscriptionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type ClientAccountUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subscriptions?: ActiveSubscriptionUpdateManyWithoutCustomerNestedInput
  }

  export type ClientAccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subscriptions?: ActiveSubscriptionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type ClientAccountCreateManyInput = {
    id?: number
    name: string
    email: string
  }

  export type ClientAccountUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ClientAccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionPlanCreateInput = {
    code: string
    name: string
    priceMonthly: number
    currency: string
    subscriptions?: ActiveSubscriptionCreateNestedManyWithoutPlanInput
  }

  export type SubscriptionPlanUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    priceMonthly: number
    currency: string
    subscriptions?: ActiveSubscriptionUncheckedCreateNestedManyWithoutPlanInput
  }

  export type SubscriptionPlanUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    subscriptions?: ActiveSubscriptionUpdateManyWithoutPlanNestedInput
  }

  export type SubscriptionPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    subscriptions?: ActiveSubscriptionUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type SubscriptionPlanCreateManyInput = {
    id?: number
    code: string
    name: string
    priceMonthly: number
    currency: string
  }

  export type SubscriptionPlanUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
  }

  export type ActiveSubscriptionCreateInput = {
    status: string
    startDate: Date | string
    customer: ClientAccountCreateNestedOneWithoutSubscriptionsInput
    plan: SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput
  }

  export type ActiveSubscriptionUncheckedCreateInput = {
    id?: number
    customerId: number
    planId: number
    status: string
    startDate: Date | string
  }

  export type ActiveSubscriptionUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: ClientAccountUpdateOneRequiredWithoutSubscriptionsNestedInput
    plan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type ActiveSubscriptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActiveSubscriptionCreateManyInput = {
    id?: number
    customerId: number
    planId: number
    status: string
    startDate: Date | string
  }

  export type ActiveSubscriptionUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActiveSubscriptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CurrentInventoryCreateInput = {
    quantity: number
    distributionCenter: DistributionCenterCreateNestedOneWithoutInventoryInput
    productSKU: ProductSKUCreateNestedOneWithoutInventoryInput
  }

  export type CurrentInventoryUncheckedCreateInput = {
    id?: number
    distributionCenterId: number
    productSKUId: number
    quantity: number
  }

  export type CurrentInventoryUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    distributionCenter?: DistributionCenterUpdateOneRequiredWithoutInventoryNestedInput
    productSKU?: ProductSKUUpdateOneRequiredWithoutInventoryNestedInput
  }

  export type CurrentInventoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    distributionCenterId?: IntFieldUpdateOperationsInput | number
    productSKUId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CurrentInventoryCreateManyInput = {
    id?: number
    distributionCenterId: number
    productSKUId: number
    quantity: number
  }

  export type CurrentInventoryUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CurrentInventoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    distributionCenterId?: IntFieldUpdateOperationsInput | number
    productSKUId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type FulfillmentWaveCreateInput = {
    waveCode: string
    distributionCenter: DistributionCenterCreateNestedOneWithoutPickWavesInput
  }

  export type FulfillmentWaveUncheckedCreateInput = {
    id?: number
    distributionCenterId: number
    waveCode: string
  }

  export type FulfillmentWaveUpdateInput = {
    waveCode?: StringFieldUpdateOperationsInput | string
    distributionCenter?: DistributionCenterUpdateOneRequiredWithoutPickWavesNestedInput
  }

  export type FulfillmentWaveUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    distributionCenterId?: IntFieldUpdateOperationsInput | number
    waveCode?: StringFieldUpdateOperationsInput | string
  }

  export type FulfillmentWaveCreateManyInput = {
    id?: number
    distributionCenterId: number
    waveCode: string
  }

  export type FulfillmentWaveUpdateManyMutationInput = {
    waveCode?: StringFieldUpdateOperationsInput | string
  }

  export type FulfillmentWaveUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    distributionCenterId?: IntFieldUpdateOperationsInput | number
    waveCode?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectEngagementCreateInput = {
    code: string
    title: string
    billMethod: string
    timesheets?: WorkHoursLogCreateNestedManyWithoutProjectInput
  }

  export type ProjectEngagementUncheckedCreateInput = {
    id?: number
    code: string
    title: string
    billMethod: string
    timesheets?: WorkHoursLogUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectEngagementUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    billMethod?: StringFieldUpdateOperationsInput | string
    timesheets?: WorkHoursLogUpdateManyWithoutProjectNestedInput
  }

  export type ProjectEngagementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    billMethod?: StringFieldUpdateOperationsInput | string
    timesheets?: WorkHoursLogUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectEngagementCreateManyInput = {
    id?: number
    code: string
    title: string
    billMethod: string
  }

  export type ProjectEngagementUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    billMethod?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectEngagementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    billMethod?: StringFieldUpdateOperationsInput | string
  }

  export type WorkHoursLogCreateInput = {
    employeeName: string
    date: Date | string
    hours: number
    rate: number
    project: ProjectEngagementCreateNestedOneWithoutTimesheetsInput
  }

  export type WorkHoursLogUncheckedCreateInput = {
    id?: number
    projectId: number
    employeeName: string
    date: Date | string
    hours: number
    rate: number
  }

  export type WorkHoursLogUpdateInput = {
    employeeName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
    project?: ProjectEngagementUpdateOneRequiredWithoutTimesheetsNestedInput
  }

  export type WorkHoursLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    employeeName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
  }

  export type WorkHoursLogCreateManyInput = {
    id?: number
    projectId: number
    employeeName: string
    date: Date | string
    hours: number
    rate: number
  }

  export type WorkHoursLogUpdateManyMutationInput = {
    employeeName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
  }

  export type WorkHoursLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    employeeName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
  }

  export type StaffMemberCreateInput = {
    name: string
    email: string
    niLetter: string
    taxCode: string
  }

  export type StaffMemberUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    niLetter: string
    taxCode: string
  }

  export type StaffMemberUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    niLetter?: StringFieldUpdateOperationsInput | string
    taxCode?: StringFieldUpdateOperationsInput | string
  }

  export type StaffMemberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    niLetter?: StringFieldUpdateOperationsInput | string
    taxCode?: StringFieldUpdateOperationsInput | string
  }

  export type StaffMemberCreateManyInput = {
    id?: number
    name: string
    email: string
    niLetter: string
    taxCode: string
  }

  export type StaffMemberUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    niLetter?: StringFieldUpdateOperationsInput | string
    taxCode?: StringFieldUpdateOperationsInput | string
  }

  export type StaffMemberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    niLetter?: StringFieldUpdateOperationsInput | string
    taxCode?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type WorkspaceUnitCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceUnitMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkspaceUnitMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ERPUserCountOrderByAggregateInput = {
    id?: SortOrder
    tenant_id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    passwordHash?: SortOrder
    immutable?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ERPUserMaxOrderByAggregateInput = {
    id?: SortOrder
    tenant_id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    passwordHash?: SortOrder
    immutable?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ERPUserMinOrderByAggregateInput = {
    id?: SortOrder
    tenant_id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    passwordHash?: SortOrder
    immutable?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    system?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    system?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    system?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UserRoleUserIdRoleIdCompoundUniqueInput = {
    userId: string
    roleId: number
  }

  export type UserRoleCountOrderByAggregateInput = {
    userId?: SortOrder
    roleId?: SortOrder
    tenantId?: SortOrder
  }

  export type UserRoleAvgOrderByAggregateInput = {
    roleId?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    userId?: SortOrder
    roleId?: SortOrder
    tenantId?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    userId?: SortOrder
    roleId?: SortOrder
    tenantId?: SortOrder
  }

  export type UserRoleSumOrderByAggregateInput = {
    roleId?: SortOrder
  }

  export type SodPolicyCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    description?: SortOrder
    active?: SortOrder
  }

  export type SodPolicyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SodPolicyMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    description?: SortOrder
    active?: SortOrder
  }

  export type SodPolicyMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    description?: SortOrder
    active?: SortOrder
  }

  export type SodPolicySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    actorEmail?: SortOrder
    role?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    actorEmail?: SortOrder
    role?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    actorEmail?: SortOrder
    role?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    baseCurrency?: SortOrder
  }

  export type OrganizationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    baseCurrency?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    baseCurrency?: SortOrder
  }

  export type OrganizationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CurrentInventoryListRelationFilter = {
    every?: CurrentInventoryWhereInput
    some?: CurrentInventoryWhereInput
    none?: CurrentInventoryWhereInput
  }

  export type FulfillmentWaveListRelationFilter = {
    every?: FulfillmentWaveWhereInput
    some?: FulfillmentWaveWhereInput
    none?: FulfillmentWaveWhereInput
  }

  export type CurrentInventoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FulfillmentWaveOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DistributionCenterCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
  }

  export type DistributionCenterAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DistributionCenterMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
  }

  export type DistributionCenterMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
  }

  export type DistributionCenterSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProductSKUCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    uom?: SortOrder
  }

  export type ProductSKUAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProductSKUMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    uom?: SortOrder
  }

  export type ProductSKUMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    uom?: SortOrder
  }

  export type ProductSKUSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ActiveSubscriptionListRelationFilter = {
    every?: ActiveSubscriptionWhereInput
    some?: ActiveSubscriptionWhereInput
    none?: ActiveSubscriptionWhereInput
  }

  export type ActiveSubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientAccountCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type ClientAccountAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClientAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type ClientAccountMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type ClientAccountSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubscriptionPlanCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    priceMonthly?: SortOrder
    currency?: SortOrder
  }

  export type SubscriptionPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    priceMonthly?: SortOrder
  }

  export type SubscriptionPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    priceMonthly?: SortOrder
    currency?: SortOrder
  }

  export type SubscriptionPlanMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    priceMonthly?: SortOrder
    currency?: SortOrder
  }

  export type SubscriptionPlanSumOrderByAggregateInput = {
    id?: SortOrder
    priceMonthly?: SortOrder
  }

  export type ClientAccountScalarRelationFilter = {
    is?: ClientAccountWhereInput
    isNot?: ClientAccountWhereInput
  }

  export type SubscriptionPlanScalarRelationFilter = {
    is?: SubscriptionPlanWhereInput
    isNot?: SubscriptionPlanWhereInput
  }

  export type ActiveSubscriptionCustomerId_planIdCompoundUniqueInput = {
    customerId: number
    planId: number
  }

  export type ActiveSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
  }

  export type ActiveSubscriptionAvgOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    planId?: SortOrder
  }

  export type ActiveSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
  }

  export type ActiveSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
  }

  export type ActiveSubscriptionSumOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    planId?: SortOrder
  }

  export type DistributionCenterScalarRelationFilter = {
    is?: DistributionCenterWhereInput
    isNot?: DistributionCenterWhereInput
  }

  export type ProductSKUScalarRelationFilter = {
    is?: ProductSKUWhereInput
    isNot?: ProductSKUWhereInput
  }

  export type CurrentInventoryWarehouseId_itemIdCompoundUniqueInput = {
    distributionCenterId: number
    productSKUId: number
  }

  export type CurrentInventoryCountOrderByAggregateInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
    productSKUId?: SortOrder
    quantity?: SortOrder
  }

  export type CurrentInventoryAvgOrderByAggregateInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
    productSKUId?: SortOrder
    quantity?: SortOrder
  }

  export type CurrentInventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
    productSKUId?: SortOrder
    quantity?: SortOrder
  }

  export type CurrentInventoryMinOrderByAggregateInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
    productSKUId?: SortOrder
    quantity?: SortOrder
  }

  export type CurrentInventorySumOrderByAggregateInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
    productSKUId?: SortOrder
    quantity?: SortOrder
  }

  export type FulfillmentWaveCountOrderByAggregateInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
    waveCode?: SortOrder
  }

  export type FulfillmentWaveAvgOrderByAggregateInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
  }

  export type FulfillmentWaveMaxOrderByAggregateInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
    waveCode?: SortOrder
  }

  export type FulfillmentWaveMinOrderByAggregateInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
    waveCode?: SortOrder
  }

  export type FulfillmentWaveSumOrderByAggregateInput = {
    id?: SortOrder
    distributionCenterId?: SortOrder
  }

  export type WorkHoursLogListRelationFilter = {
    every?: WorkHoursLogWhereInput
    some?: WorkHoursLogWhereInput
    none?: WorkHoursLogWhereInput
  }

  export type WorkHoursLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectEngagementCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    billMethod?: SortOrder
  }

  export type ProjectEngagementAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProjectEngagementMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    billMethod?: SortOrder
  }

  export type ProjectEngagementMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    title?: SortOrder
    billMethod?: SortOrder
  }

  export type ProjectEngagementSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ProjectEngagementScalarRelationFilter = {
    is?: ProjectEngagementWhereInput
    isNot?: ProjectEngagementWhereInput
  }

  export type WorkHoursLogCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    employeeName?: SortOrder
    date?: SortOrder
    hours?: SortOrder
    rate?: SortOrder
  }

  export type WorkHoursLogAvgOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    hours?: SortOrder
    rate?: SortOrder
  }

  export type WorkHoursLogMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    employeeName?: SortOrder
    date?: SortOrder
    hours?: SortOrder
    rate?: SortOrder
  }

  export type WorkHoursLogMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    employeeName?: SortOrder
    date?: SortOrder
    hours?: SortOrder
    rate?: SortOrder
  }

  export type WorkHoursLogSumOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    hours?: SortOrder
    rate?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StaffMemberCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    niLetter?: SortOrder
    taxCode?: SortOrder
  }

  export type StaffMemberAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StaffMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    niLetter?: SortOrder
    taxCode?: SortOrder
  }

  export type StaffMemberMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    niLetter?: SortOrder
    taxCode?: SortOrder
  }

  export type StaffMemberSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CurrentInventoryCreateNestedManyWithoutDistributionCenterInput = {
    create?: XOR<CurrentInventoryCreateWithoutDistributionCenterInput, CurrentInventoryUncheckedCreateWithoutDistributionCenterInput> | CurrentInventoryCreateWithoutDistributionCenterInput[] | CurrentInventoryUncheckedCreateWithoutDistributionCenterInput[]
    connectOrCreate?: CurrentInventoryCreateOrConnectWithoutDistributionCenterInput | CurrentInventoryCreateOrConnectWithoutDistributionCenterInput[]
    createMany?: CurrentInventoryCreateManyDistributionCenterInputEnvelope
    connect?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
  }

  export type FulfillmentWaveCreateNestedManyWithoutDistributionCenterInput = {
    create?: XOR<FulfillmentWaveCreateWithoutDistributionCenterInput, FulfillmentWaveUncheckedCreateWithoutDistributionCenterInput> | FulfillmentWaveCreateWithoutDistributionCenterInput[] | FulfillmentWaveUncheckedCreateWithoutDistributionCenterInput[]
    connectOrCreate?: FulfillmentWaveCreateOrConnectWithoutDistributionCenterInput | FulfillmentWaveCreateOrConnectWithoutDistributionCenterInput[]
    createMany?: FulfillmentWaveCreateManyDistributionCenterInputEnvelope
    connect?: FulfillmentWaveWhereUniqueInput | FulfillmentWaveWhereUniqueInput[]
  }

  export type CurrentInventoryUncheckedCreateNestedManyWithoutDistributionCenterInput = {
    create?: XOR<CurrentInventoryCreateWithoutDistributionCenterInput, CurrentInventoryUncheckedCreateWithoutDistributionCenterInput> | CurrentInventoryCreateWithoutDistributionCenterInput[] | CurrentInventoryUncheckedCreateWithoutDistributionCenterInput[]
    connectOrCreate?: CurrentInventoryCreateOrConnectWithoutDistributionCenterInput | CurrentInventoryCreateOrConnectWithoutDistributionCenterInput[]
    createMany?: CurrentInventoryCreateManyDistributionCenterInputEnvelope
    connect?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
  }

  export type FulfillmentWaveUncheckedCreateNestedManyWithoutDistributionCenterInput = {
    create?: XOR<FulfillmentWaveCreateWithoutDistributionCenterInput, FulfillmentWaveUncheckedCreateWithoutDistributionCenterInput> | FulfillmentWaveCreateWithoutDistributionCenterInput[] | FulfillmentWaveUncheckedCreateWithoutDistributionCenterInput[]
    connectOrCreate?: FulfillmentWaveCreateOrConnectWithoutDistributionCenterInput | FulfillmentWaveCreateOrConnectWithoutDistributionCenterInput[]
    createMany?: FulfillmentWaveCreateManyDistributionCenterInputEnvelope
    connect?: FulfillmentWaveWhereUniqueInput | FulfillmentWaveWhereUniqueInput[]
  }

  export type CurrentInventoryUpdateManyWithoutDistributionCenterNestedInput = {
    create?: XOR<CurrentInventoryCreateWithoutDistributionCenterInput, CurrentInventoryUncheckedCreateWithoutDistributionCenterInput> | CurrentInventoryCreateWithoutDistributionCenterInput[] | CurrentInventoryUncheckedCreateWithoutDistributionCenterInput[]
    connectOrCreate?: CurrentInventoryCreateOrConnectWithoutDistributionCenterInput | CurrentInventoryCreateOrConnectWithoutDistributionCenterInput[]
    upsert?: CurrentInventoryUpsertWithWhereUniqueWithoutDistributionCenterInput | CurrentInventoryUpsertWithWhereUniqueWithoutDistributionCenterInput[]
    createMany?: CurrentInventoryCreateManyDistributionCenterInputEnvelope
    set?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    disconnect?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    delete?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    connect?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    update?: CurrentInventoryUpdateWithWhereUniqueWithoutDistributionCenterInput | CurrentInventoryUpdateWithWhereUniqueWithoutDistributionCenterInput[]
    updateMany?: CurrentInventoryUpdateManyWithWhereWithoutDistributionCenterInput | CurrentInventoryUpdateManyWithWhereWithoutDistributionCenterInput[]
    deleteMany?: CurrentInventoryScalarWhereInput | CurrentInventoryScalarWhereInput[]
  }

  export type FulfillmentWaveUpdateManyWithoutDistributionCenterNestedInput = {
    create?: XOR<FulfillmentWaveCreateWithoutDistributionCenterInput, FulfillmentWaveUncheckedCreateWithoutDistributionCenterInput> | FulfillmentWaveCreateWithoutDistributionCenterInput[] | FulfillmentWaveUncheckedCreateWithoutDistributionCenterInput[]
    connectOrCreate?: FulfillmentWaveCreateOrConnectWithoutDistributionCenterInput | FulfillmentWaveCreateOrConnectWithoutDistributionCenterInput[]
    upsert?: FulfillmentWaveUpsertWithWhereUniqueWithoutDistributionCenterInput | FulfillmentWaveUpsertWithWhereUniqueWithoutDistributionCenterInput[]
    createMany?: FulfillmentWaveCreateManyDistributionCenterInputEnvelope
    set?: FulfillmentWaveWhereUniqueInput | FulfillmentWaveWhereUniqueInput[]
    disconnect?: FulfillmentWaveWhereUniqueInput | FulfillmentWaveWhereUniqueInput[]
    delete?: FulfillmentWaveWhereUniqueInput | FulfillmentWaveWhereUniqueInput[]
    connect?: FulfillmentWaveWhereUniqueInput | FulfillmentWaveWhereUniqueInput[]
    update?: FulfillmentWaveUpdateWithWhereUniqueWithoutDistributionCenterInput | FulfillmentWaveUpdateWithWhereUniqueWithoutDistributionCenterInput[]
    updateMany?: FulfillmentWaveUpdateManyWithWhereWithoutDistributionCenterInput | FulfillmentWaveUpdateManyWithWhereWithoutDistributionCenterInput[]
    deleteMany?: FulfillmentWaveScalarWhereInput | FulfillmentWaveScalarWhereInput[]
  }

  export type CurrentInventoryUncheckedUpdateManyWithoutDistributionCenterNestedInput = {
    create?: XOR<CurrentInventoryCreateWithoutDistributionCenterInput, CurrentInventoryUncheckedCreateWithoutDistributionCenterInput> | CurrentInventoryCreateWithoutDistributionCenterInput[] | CurrentInventoryUncheckedCreateWithoutDistributionCenterInput[]
    connectOrCreate?: CurrentInventoryCreateOrConnectWithoutDistributionCenterInput | CurrentInventoryCreateOrConnectWithoutDistributionCenterInput[]
    upsert?: CurrentInventoryUpsertWithWhereUniqueWithoutDistributionCenterInput | CurrentInventoryUpsertWithWhereUniqueWithoutDistributionCenterInput[]
    createMany?: CurrentInventoryCreateManyDistributionCenterInputEnvelope
    set?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    disconnect?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    delete?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    connect?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    update?: CurrentInventoryUpdateWithWhereUniqueWithoutDistributionCenterInput | CurrentInventoryUpdateWithWhereUniqueWithoutDistributionCenterInput[]
    updateMany?: CurrentInventoryUpdateManyWithWhereWithoutDistributionCenterInput | CurrentInventoryUpdateManyWithWhereWithoutDistributionCenterInput[]
    deleteMany?: CurrentInventoryScalarWhereInput | CurrentInventoryScalarWhereInput[]
  }

  export type FulfillmentWaveUncheckedUpdateManyWithoutDistributionCenterNestedInput = {
    create?: XOR<FulfillmentWaveCreateWithoutDistributionCenterInput, FulfillmentWaveUncheckedCreateWithoutDistributionCenterInput> | FulfillmentWaveCreateWithoutDistributionCenterInput[] | FulfillmentWaveUncheckedCreateWithoutDistributionCenterInput[]
    connectOrCreate?: FulfillmentWaveCreateOrConnectWithoutDistributionCenterInput | FulfillmentWaveCreateOrConnectWithoutDistributionCenterInput[]
    upsert?: FulfillmentWaveUpsertWithWhereUniqueWithoutDistributionCenterInput | FulfillmentWaveUpsertWithWhereUniqueWithoutDistributionCenterInput[]
    createMany?: FulfillmentWaveCreateManyDistributionCenterInputEnvelope
    set?: FulfillmentWaveWhereUniqueInput | FulfillmentWaveWhereUniqueInput[]
    disconnect?: FulfillmentWaveWhereUniqueInput | FulfillmentWaveWhereUniqueInput[]
    delete?: FulfillmentWaveWhereUniqueInput | FulfillmentWaveWhereUniqueInput[]
    connect?: FulfillmentWaveWhereUniqueInput | FulfillmentWaveWhereUniqueInput[]
    update?: FulfillmentWaveUpdateWithWhereUniqueWithoutDistributionCenterInput | FulfillmentWaveUpdateWithWhereUniqueWithoutDistributionCenterInput[]
    updateMany?: FulfillmentWaveUpdateManyWithWhereWithoutDistributionCenterInput | FulfillmentWaveUpdateManyWithWhereWithoutDistributionCenterInput[]
    deleteMany?: FulfillmentWaveScalarWhereInput | FulfillmentWaveScalarWhereInput[]
  }

  export type CurrentInventoryCreateNestedManyWithoutProductSKUInput = {
    create?: XOR<CurrentInventoryCreateWithoutProductSKUInput, CurrentInventoryUncheckedCreateWithoutProductSKUInput> | CurrentInventoryCreateWithoutProductSKUInput[] | CurrentInventoryUncheckedCreateWithoutProductSKUInput[]
    connectOrCreate?: CurrentInventoryCreateOrConnectWithoutProductSKUInput | CurrentInventoryCreateOrConnectWithoutProductSKUInput[]
    createMany?: CurrentInventoryCreateManyProductSKUInputEnvelope
    connect?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
  }

  export type CurrentInventoryUncheckedCreateNestedManyWithoutProductSKUInput = {
    create?: XOR<CurrentInventoryCreateWithoutProductSKUInput, CurrentInventoryUncheckedCreateWithoutProductSKUInput> | CurrentInventoryCreateWithoutProductSKUInput[] | CurrentInventoryUncheckedCreateWithoutProductSKUInput[]
    connectOrCreate?: CurrentInventoryCreateOrConnectWithoutProductSKUInput | CurrentInventoryCreateOrConnectWithoutProductSKUInput[]
    createMany?: CurrentInventoryCreateManyProductSKUInputEnvelope
    connect?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
  }

  export type CurrentInventoryUpdateManyWithoutProductSKUNestedInput = {
    create?: XOR<CurrentInventoryCreateWithoutProductSKUInput, CurrentInventoryUncheckedCreateWithoutProductSKUInput> | CurrentInventoryCreateWithoutProductSKUInput[] | CurrentInventoryUncheckedCreateWithoutProductSKUInput[]
    connectOrCreate?: CurrentInventoryCreateOrConnectWithoutProductSKUInput | CurrentInventoryCreateOrConnectWithoutProductSKUInput[]
    upsert?: CurrentInventoryUpsertWithWhereUniqueWithoutProductSKUInput | CurrentInventoryUpsertWithWhereUniqueWithoutProductSKUInput[]
    createMany?: CurrentInventoryCreateManyProductSKUInputEnvelope
    set?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    disconnect?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    delete?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    connect?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    update?: CurrentInventoryUpdateWithWhereUniqueWithoutProductSKUInput | CurrentInventoryUpdateWithWhereUniqueWithoutProductSKUInput[]
    updateMany?: CurrentInventoryUpdateManyWithWhereWithoutProductSKUInput | CurrentInventoryUpdateManyWithWhereWithoutProductSKUInput[]
    deleteMany?: CurrentInventoryScalarWhereInput | CurrentInventoryScalarWhereInput[]
  }

  export type CurrentInventoryUncheckedUpdateManyWithoutProductSKUNestedInput = {
    create?: XOR<CurrentInventoryCreateWithoutProductSKUInput, CurrentInventoryUncheckedCreateWithoutProductSKUInput> | CurrentInventoryCreateWithoutProductSKUInput[] | CurrentInventoryUncheckedCreateWithoutProductSKUInput[]
    connectOrCreate?: CurrentInventoryCreateOrConnectWithoutProductSKUInput | CurrentInventoryCreateOrConnectWithoutProductSKUInput[]
    upsert?: CurrentInventoryUpsertWithWhereUniqueWithoutProductSKUInput | CurrentInventoryUpsertWithWhereUniqueWithoutProductSKUInput[]
    createMany?: CurrentInventoryCreateManyProductSKUInputEnvelope
    set?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    disconnect?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    delete?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    connect?: CurrentInventoryWhereUniqueInput | CurrentInventoryWhereUniqueInput[]
    update?: CurrentInventoryUpdateWithWhereUniqueWithoutProductSKUInput | CurrentInventoryUpdateWithWhereUniqueWithoutProductSKUInput[]
    updateMany?: CurrentInventoryUpdateManyWithWhereWithoutProductSKUInput | CurrentInventoryUpdateManyWithWhereWithoutProductSKUInput[]
    deleteMany?: CurrentInventoryScalarWhereInput | CurrentInventoryScalarWhereInput[]
  }

  export type ActiveSubscriptionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<ActiveSubscriptionCreateWithoutCustomerInput, ActiveSubscriptionUncheckedCreateWithoutCustomerInput> | ActiveSubscriptionCreateWithoutCustomerInput[] | ActiveSubscriptionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ActiveSubscriptionCreateOrConnectWithoutCustomerInput | ActiveSubscriptionCreateOrConnectWithoutCustomerInput[]
    createMany?: ActiveSubscriptionCreateManyCustomerInputEnvelope
    connect?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
  }

  export type ActiveSubscriptionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<ActiveSubscriptionCreateWithoutCustomerInput, ActiveSubscriptionUncheckedCreateWithoutCustomerInput> | ActiveSubscriptionCreateWithoutCustomerInput[] | ActiveSubscriptionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ActiveSubscriptionCreateOrConnectWithoutCustomerInput | ActiveSubscriptionCreateOrConnectWithoutCustomerInput[]
    createMany?: ActiveSubscriptionCreateManyCustomerInputEnvelope
    connect?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
  }

  export type ActiveSubscriptionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<ActiveSubscriptionCreateWithoutCustomerInput, ActiveSubscriptionUncheckedCreateWithoutCustomerInput> | ActiveSubscriptionCreateWithoutCustomerInput[] | ActiveSubscriptionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ActiveSubscriptionCreateOrConnectWithoutCustomerInput | ActiveSubscriptionCreateOrConnectWithoutCustomerInput[]
    upsert?: ActiveSubscriptionUpsertWithWhereUniqueWithoutCustomerInput | ActiveSubscriptionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: ActiveSubscriptionCreateManyCustomerInputEnvelope
    set?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    disconnect?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    delete?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    connect?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    update?: ActiveSubscriptionUpdateWithWhereUniqueWithoutCustomerInput | ActiveSubscriptionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: ActiveSubscriptionUpdateManyWithWhereWithoutCustomerInput | ActiveSubscriptionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: ActiveSubscriptionScalarWhereInput | ActiveSubscriptionScalarWhereInput[]
  }

  export type ActiveSubscriptionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<ActiveSubscriptionCreateWithoutCustomerInput, ActiveSubscriptionUncheckedCreateWithoutCustomerInput> | ActiveSubscriptionCreateWithoutCustomerInput[] | ActiveSubscriptionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: ActiveSubscriptionCreateOrConnectWithoutCustomerInput | ActiveSubscriptionCreateOrConnectWithoutCustomerInput[]
    upsert?: ActiveSubscriptionUpsertWithWhereUniqueWithoutCustomerInput | ActiveSubscriptionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: ActiveSubscriptionCreateManyCustomerInputEnvelope
    set?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    disconnect?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    delete?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    connect?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    update?: ActiveSubscriptionUpdateWithWhereUniqueWithoutCustomerInput | ActiveSubscriptionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: ActiveSubscriptionUpdateManyWithWhereWithoutCustomerInput | ActiveSubscriptionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: ActiveSubscriptionScalarWhereInput | ActiveSubscriptionScalarWhereInput[]
  }

  export type ActiveSubscriptionCreateNestedManyWithoutPlanInput = {
    create?: XOR<ActiveSubscriptionCreateWithoutPlanInput, ActiveSubscriptionUncheckedCreateWithoutPlanInput> | ActiveSubscriptionCreateWithoutPlanInput[] | ActiveSubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: ActiveSubscriptionCreateOrConnectWithoutPlanInput | ActiveSubscriptionCreateOrConnectWithoutPlanInput[]
    createMany?: ActiveSubscriptionCreateManyPlanInputEnvelope
    connect?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
  }

  export type ActiveSubscriptionUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<ActiveSubscriptionCreateWithoutPlanInput, ActiveSubscriptionUncheckedCreateWithoutPlanInput> | ActiveSubscriptionCreateWithoutPlanInput[] | ActiveSubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: ActiveSubscriptionCreateOrConnectWithoutPlanInput | ActiveSubscriptionCreateOrConnectWithoutPlanInput[]
    createMany?: ActiveSubscriptionCreateManyPlanInputEnvelope
    connect?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
  }

  export type ActiveSubscriptionUpdateManyWithoutPlanNestedInput = {
    create?: XOR<ActiveSubscriptionCreateWithoutPlanInput, ActiveSubscriptionUncheckedCreateWithoutPlanInput> | ActiveSubscriptionCreateWithoutPlanInput[] | ActiveSubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: ActiveSubscriptionCreateOrConnectWithoutPlanInput | ActiveSubscriptionCreateOrConnectWithoutPlanInput[]
    upsert?: ActiveSubscriptionUpsertWithWhereUniqueWithoutPlanInput | ActiveSubscriptionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: ActiveSubscriptionCreateManyPlanInputEnvelope
    set?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    disconnect?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    delete?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    connect?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    update?: ActiveSubscriptionUpdateWithWhereUniqueWithoutPlanInput | ActiveSubscriptionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: ActiveSubscriptionUpdateManyWithWhereWithoutPlanInput | ActiveSubscriptionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: ActiveSubscriptionScalarWhereInput | ActiveSubscriptionScalarWhereInput[]
  }

  export type ActiveSubscriptionUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<ActiveSubscriptionCreateWithoutPlanInput, ActiveSubscriptionUncheckedCreateWithoutPlanInput> | ActiveSubscriptionCreateWithoutPlanInput[] | ActiveSubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: ActiveSubscriptionCreateOrConnectWithoutPlanInput | ActiveSubscriptionCreateOrConnectWithoutPlanInput[]
    upsert?: ActiveSubscriptionUpsertWithWhereUniqueWithoutPlanInput | ActiveSubscriptionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: ActiveSubscriptionCreateManyPlanInputEnvelope
    set?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    disconnect?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    delete?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    connect?: ActiveSubscriptionWhereUniqueInput | ActiveSubscriptionWhereUniqueInput[]
    update?: ActiveSubscriptionUpdateWithWhereUniqueWithoutPlanInput | ActiveSubscriptionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: ActiveSubscriptionUpdateManyWithWhereWithoutPlanInput | ActiveSubscriptionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: ActiveSubscriptionScalarWhereInput | ActiveSubscriptionScalarWhereInput[]
  }

  export type ClientAccountCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<ClientAccountCreateWithoutSubscriptionsInput, ClientAccountUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: ClientAccountCreateOrConnectWithoutSubscriptionsInput
    connect?: ClientAccountWhereUniqueInput
  }

  export type SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: SubscriptionPlanCreateOrConnectWithoutSubscriptionsInput
    connect?: SubscriptionPlanWhereUniqueInput
  }

  export type ClientAccountUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<ClientAccountCreateWithoutSubscriptionsInput, ClientAccountUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: ClientAccountCreateOrConnectWithoutSubscriptionsInput
    upsert?: ClientAccountUpsertWithoutSubscriptionsInput
    connect?: ClientAccountWhereUniqueInput
    update?: XOR<XOR<ClientAccountUpdateToOneWithWhereWithoutSubscriptionsInput, ClientAccountUpdateWithoutSubscriptionsInput>, ClientAccountUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: SubscriptionPlanCreateOrConnectWithoutSubscriptionsInput
    upsert?: SubscriptionPlanUpsertWithoutSubscriptionsInput
    connect?: SubscriptionPlanWhereUniqueInput
    update?: XOR<XOR<SubscriptionPlanUpdateToOneWithWhereWithoutSubscriptionsInput, SubscriptionPlanUpdateWithoutSubscriptionsInput>, SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type DistributionCenterCreateNestedOneWithoutInventoryInput = {
    create?: XOR<DistributionCenterCreateWithoutInventoryInput, DistributionCenterUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: DistributionCenterCreateOrConnectWithoutInventoryInput
    connect?: DistributionCenterWhereUniqueInput
  }

  export type ProductSKUCreateNestedOneWithoutInventoryInput = {
    create?: XOR<ProductSKUCreateWithoutInventoryInput, ProductSKUUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: ProductSKUCreateOrConnectWithoutInventoryInput
    connect?: ProductSKUWhereUniqueInput
  }

  export type DistributionCenterUpdateOneRequiredWithoutInventoryNestedInput = {
    create?: XOR<DistributionCenterCreateWithoutInventoryInput, DistributionCenterUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: DistributionCenterCreateOrConnectWithoutInventoryInput
    upsert?: DistributionCenterUpsertWithoutInventoryInput
    connect?: DistributionCenterWhereUniqueInput
    update?: XOR<XOR<DistributionCenterUpdateToOneWithWhereWithoutInventoryInput, DistributionCenterUpdateWithoutInventoryInput>, DistributionCenterUncheckedUpdateWithoutInventoryInput>
  }

  export type ProductSKUUpdateOneRequiredWithoutInventoryNestedInput = {
    create?: XOR<ProductSKUCreateWithoutInventoryInput, ProductSKUUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: ProductSKUCreateOrConnectWithoutInventoryInput
    upsert?: ProductSKUUpsertWithoutInventoryInput
    connect?: ProductSKUWhereUniqueInput
    update?: XOR<XOR<ProductSKUUpdateToOneWithWhereWithoutInventoryInput, ProductSKUUpdateWithoutInventoryInput>, ProductSKUUncheckedUpdateWithoutInventoryInput>
  }

  export type DistributionCenterCreateNestedOneWithoutPickWavesInput = {
    create?: XOR<DistributionCenterCreateWithoutPickWavesInput, DistributionCenterUncheckedCreateWithoutPickWavesInput>
    connectOrCreate?: DistributionCenterCreateOrConnectWithoutPickWavesInput
    connect?: DistributionCenterWhereUniqueInput
  }

  export type DistributionCenterUpdateOneRequiredWithoutPickWavesNestedInput = {
    create?: XOR<DistributionCenterCreateWithoutPickWavesInput, DistributionCenterUncheckedCreateWithoutPickWavesInput>
    connectOrCreate?: DistributionCenterCreateOrConnectWithoutPickWavesInput
    upsert?: DistributionCenterUpsertWithoutPickWavesInput
    connect?: DistributionCenterWhereUniqueInput
    update?: XOR<XOR<DistributionCenterUpdateToOneWithWhereWithoutPickWavesInput, DistributionCenterUpdateWithoutPickWavesInput>, DistributionCenterUncheckedUpdateWithoutPickWavesInput>
  }

  export type WorkHoursLogCreateNestedManyWithoutProjectInput = {
    create?: XOR<WorkHoursLogCreateWithoutProjectInput, WorkHoursLogUncheckedCreateWithoutProjectInput> | WorkHoursLogCreateWithoutProjectInput[] | WorkHoursLogUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: WorkHoursLogCreateOrConnectWithoutProjectInput | WorkHoursLogCreateOrConnectWithoutProjectInput[]
    createMany?: WorkHoursLogCreateManyProjectInputEnvelope
    connect?: WorkHoursLogWhereUniqueInput | WorkHoursLogWhereUniqueInput[]
  }

  export type WorkHoursLogUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<WorkHoursLogCreateWithoutProjectInput, WorkHoursLogUncheckedCreateWithoutProjectInput> | WorkHoursLogCreateWithoutProjectInput[] | WorkHoursLogUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: WorkHoursLogCreateOrConnectWithoutProjectInput | WorkHoursLogCreateOrConnectWithoutProjectInput[]
    createMany?: WorkHoursLogCreateManyProjectInputEnvelope
    connect?: WorkHoursLogWhereUniqueInput | WorkHoursLogWhereUniqueInput[]
  }

  export type WorkHoursLogUpdateManyWithoutProjectNestedInput = {
    create?: XOR<WorkHoursLogCreateWithoutProjectInput, WorkHoursLogUncheckedCreateWithoutProjectInput> | WorkHoursLogCreateWithoutProjectInput[] | WorkHoursLogUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: WorkHoursLogCreateOrConnectWithoutProjectInput | WorkHoursLogCreateOrConnectWithoutProjectInput[]
    upsert?: WorkHoursLogUpsertWithWhereUniqueWithoutProjectInput | WorkHoursLogUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: WorkHoursLogCreateManyProjectInputEnvelope
    set?: WorkHoursLogWhereUniqueInput | WorkHoursLogWhereUniqueInput[]
    disconnect?: WorkHoursLogWhereUniqueInput | WorkHoursLogWhereUniqueInput[]
    delete?: WorkHoursLogWhereUniqueInput | WorkHoursLogWhereUniqueInput[]
    connect?: WorkHoursLogWhereUniqueInput | WorkHoursLogWhereUniqueInput[]
    update?: WorkHoursLogUpdateWithWhereUniqueWithoutProjectInput | WorkHoursLogUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: WorkHoursLogUpdateManyWithWhereWithoutProjectInput | WorkHoursLogUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: WorkHoursLogScalarWhereInput | WorkHoursLogScalarWhereInput[]
  }

  export type WorkHoursLogUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<WorkHoursLogCreateWithoutProjectInput, WorkHoursLogUncheckedCreateWithoutProjectInput> | WorkHoursLogCreateWithoutProjectInput[] | WorkHoursLogUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: WorkHoursLogCreateOrConnectWithoutProjectInput | WorkHoursLogCreateOrConnectWithoutProjectInput[]
    upsert?: WorkHoursLogUpsertWithWhereUniqueWithoutProjectInput | WorkHoursLogUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: WorkHoursLogCreateManyProjectInputEnvelope
    set?: WorkHoursLogWhereUniqueInput | WorkHoursLogWhereUniqueInput[]
    disconnect?: WorkHoursLogWhereUniqueInput | WorkHoursLogWhereUniqueInput[]
    delete?: WorkHoursLogWhereUniqueInput | WorkHoursLogWhereUniqueInput[]
    connect?: WorkHoursLogWhereUniqueInput | WorkHoursLogWhereUniqueInput[]
    update?: WorkHoursLogUpdateWithWhereUniqueWithoutProjectInput | WorkHoursLogUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: WorkHoursLogUpdateManyWithWhereWithoutProjectInput | WorkHoursLogUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: WorkHoursLogScalarWhereInput | WorkHoursLogScalarWhereInput[]
  }

  export type ProjectEngagementCreateNestedOneWithoutTimesheetsInput = {
    create?: XOR<ProjectEngagementCreateWithoutTimesheetsInput, ProjectEngagementUncheckedCreateWithoutTimesheetsInput>
    connectOrCreate?: ProjectEngagementCreateOrConnectWithoutTimesheetsInput
    connect?: ProjectEngagementWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectEngagementUpdateOneRequiredWithoutTimesheetsNestedInput = {
    create?: XOR<ProjectEngagementCreateWithoutTimesheetsInput, ProjectEngagementUncheckedCreateWithoutTimesheetsInput>
    connectOrCreate?: ProjectEngagementCreateOrConnectWithoutTimesheetsInput
    upsert?: ProjectEngagementUpsertWithoutTimesheetsInput
    connect?: ProjectEngagementWhereUniqueInput
    update?: XOR<XOR<ProjectEngagementUpdateToOneWithWhereWithoutTimesheetsInput, ProjectEngagementUpdateWithoutTimesheetsInput>, ProjectEngagementUncheckedUpdateWithoutTimesheetsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CurrentInventoryCreateWithoutDistributionCenterInput = {
    quantity: number
    productSKU: ProductSKUCreateNestedOneWithoutInventoryInput
  }

  export type CurrentInventoryUncheckedCreateWithoutDistributionCenterInput = {
    id?: number
    productSKUId: number
    quantity: number
  }

  export type CurrentInventoryCreateOrConnectWithoutDistributionCenterInput = {
    where: CurrentInventoryWhereUniqueInput
    create: XOR<CurrentInventoryCreateWithoutDistributionCenterInput, CurrentInventoryUncheckedCreateWithoutDistributionCenterInput>
  }

  export type CurrentInventoryCreateManyDistributionCenterInputEnvelope = {
    data: CurrentInventoryCreateManyDistributionCenterInput | CurrentInventoryCreateManyDistributionCenterInput[]
    skipDuplicates?: boolean
  }

  export type FulfillmentWaveCreateWithoutDistributionCenterInput = {
    waveCode: string
  }

  export type FulfillmentWaveUncheckedCreateWithoutDistributionCenterInput = {
    id?: number
    waveCode: string
  }

  export type FulfillmentWaveCreateOrConnectWithoutDistributionCenterInput = {
    where: FulfillmentWaveWhereUniqueInput
    create: XOR<FulfillmentWaveCreateWithoutDistributionCenterInput, FulfillmentWaveUncheckedCreateWithoutDistributionCenterInput>
  }

  export type FulfillmentWaveCreateManyDistributionCenterInputEnvelope = {
    data: FulfillmentWaveCreateManyDistributionCenterInput | FulfillmentWaveCreateManyDistributionCenterInput[]
    skipDuplicates?: boolean
  }

  export type CurrentInventoryUpsertWithWhereUniqueWithoutDistributionCenterInput = {
    where: CurrentInventoryWhereUniqueInput
    update: XOR<CurrentInventoryUpdateWithoutDistributionCenterInput, CurrentInventoryUncheckedUpdateWithoutDistributionCenterInput>
    create: XOR<CurrentInventoryCreateWithoutDistributionCenterInput, CurrentInventoryUncheckedCreateWithoutDistributionCenterInput>
  }

  export type CurrentInventoryUpdateWithWhereUniqueWithoutDistributionCenterInput = {
    where: CurrentInventoryWhereUniqueInput
    data: XOR<CurrentInventoryUpdateWithoutDistributionCenterInput, CurrentInventoryUncheckedUpdateWithoutDistributionCenterInput>
  }

  export type CurrentInventoryUpdateManyWithWhereWithoutDistributionCenterInput = {
    where: CurrentInventoryScalarWhereInput
    data: XOR<CurrentInventoryUpdateManyMutationInput, CurrentInventoryUncheckedUpdateManyWithoutDistributionCenterInput>
  }

  export type CurrentInventoryScalarWhereInput = {
    AND?: CurrentInventoryScalarWhereInput | CurrentInventoryScalarWhereInput[]
    OR?: CurrentInventoryScalarWhereInput[]
    NOT?: CurrentInventoryScalarWhereInput | CurrentInventoryScalarWhereInput[]
    id?: IntFilter<"CurrentInventory"> | number
    distributionCenterId?: IntFilter<"CurrentInventory"> | number
    productSKUId?: IntFilter<"CurrentInventory"> | number
    quantity?: IntFilter<"CurrentInventory"> | number
  }

  export type FulfillmentWaveUpsertWithWhereUniqueWithoutDistributionCenterInput = {
    where: FulfillmentWaveWhereUniqueInput
    update: XOR<FulfillmentWaveUpdateWithoutDistributionCenterInput, FulfillmentWaveUncheckedUpdateWithoutDistributionCenterInput>
    create: XOR<FulfillmentWaveCreateWithoutDistributionCenterInput, FulfillmentWaveUncheckedCreateWithoutDistributionCenterInput>
  }

  export type FulfillmentWaveUpdateWithWhereUniqueWithoutDistributionCenterInput = {
    where: FulfillmentWaveWhereUniqueInput
    data: XOR<FulfillmentWaveUpdateWithoutDistributionCenterInput, FulfillmentWaveUncheckedUpdateWithoutDistributionCenterInput>
  }

  export type FulfillmentWaveUpdateManyWithWhereWithoutDistributionCenterInput = {
    where: FulfillmentWaveScalarWhereInput
    data: XOR<FulfillmentWaveUpdateManyMutationInput, FulfillmentWaveUncheckedUpdateManyWithoutDistributionCenterInput>
  }

  export type FulfillmentWaveScalarWhereInput = {
    AND?: FulfillmentWaveScalarWhereInput | FulfillmentWaveScalarWhereInput[]
    OR?: FulfillmentWaveScalarWhereInput[]
    NOT?: FulfillmentWaveScalarWhereInput | FulfillmentWaveScalarWhereInput[]
    id?: IntFilter<"FulfillmentWave"> | number
    distributionCenterId?: IntFilter<"FulfillmentWave"> | number
    waveCode?: StringFilter<"FulfillmentWave"> | string
  }

  export type CurrentInventoryCreateWithoutProductSKUInput = {
    quantity: number
    distributionCenter: DistributionCenterCreateNestedOneWithoutInventoryInput
  }

  export type CurrentInventoryUncheckedCreateWithoutProductSKUInput = {
    id?: number
    distributionCenterId: number
    quantity: number
  }

  export type CurrentInventoryCreateOrConnectWithoutProductSKUInput = {
    where: CurrentInventoryWhereUniqueInput
    create: XOR<CurrentInventoryCreateWithoutProductSKUInput, CurrentInventoryUncheckedCreateWithoutProductSKUInput>
  }

  export type CurrentInventoryCreateManyProductSKUInputEnvelope = {
    data: CurrentInventoryCreateManyProductSKUInput | CurrentInventoryCreateManyProductSKUInput[]
    skipDuplicates?: boolean
  }

  export type CurrentInventoryUpsertWithWhereUniqueWithoutProductSKUInput = {
    where: CurrentInventoryWhereUniqueInput
    update: XOR<CurrentInventoryUpdateWithoutProductSKUInput, CurrentInventoryUncheckedUpdateWithoutProductSKUInput>
    create: XOR<CurrentInventoryCreateWithoutProductSKUInput, CurrentInventoryUncheckedCreateWithoutProductSKUInput>
  }

  export type CurrentInventoryUpdateWithWhereUniqueWithoutProductSKUInput = {
    where: CurrentInventoryWhereUniqueInput
    data: XOR<CurrentInventoryUpdateWithoutProductSKUInput, CurrentInventoryUncheckedUpdateWithoutProductSKUInput>
  }

  export type CurrentInventoryUpdateManyWithWhereWithoutProductSKUInput = {
    where: CurrentInventoryScalarWhereInput
    data: XOR<CurrentInventoryUpdateManyMutationInput, CurrentInventoryUncheckedUpdateManyWithoutProductSKUInput>
  }

  export type ActiveSubscriptionCreateWithoutCustomerInput = {
    status: string
    startDate: Date | string
    plan: SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput
  }

  export type ActiveSubscriptionUncheckedCreateWithoutCustomerInput = {
    id?: number
    planId: number
    status: string
    startDate: Date | string
  }

  export type ActiveSubscriptionCreateOrConnectWithoutCustomerInput = {
    where: ActiveSubscriptionWhereUniqueInput
    create: XOR<ActiveSubscriptionCreateWithoutCustomerInput, ActiveSubscriptionUncheckedCreateWithoutCustomerInput>
  }

  export type ActiveSubscriptionCreateManyCustomerInputEnvelope = {
    data: ActiveSubscriptionCreateManyCustomerInput | ActiveSubscriptionCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type ActiveSubscriptionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: ActiveSubscriptionWhereUniqueInput
    update: XOR<ActiveSubscriptionUpdateWithoutCustomerInput, ActiveSubscriptionUncheckedUpdateWithoutCustomerInput>
    create: XOR<ActiveSubscriptionCreateWithoutCustomerInput, ActiveSubscriptionUncheckedCreateWithoutCustomerInput>
  }

  export type ActiveSubscriptionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: ActiveSubscriptionWhereUniqueInput
    data: XOR<ActiveSubscriptionUpdateWithoutCustomerInput, ActiveSubscriptionUncheckedUpdateWithoutCustomerInput>
  }

  export type ActiveSubscriptionUpdateManyWithWhereWithoutCustomerInput = {
    where: ActiveSubscriptionScalarWhereInput
    data: XOR<ActiveSubscriptionUpdateManyMutationInput, ActiveSubscriptionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type ActiveSubscriptionScalarWhereInput = {
    AND?: ActiveSubscriptionScalarWhereInput | ActiveSubscriptionScalarWhereInput[]
    OR?: ActiveSubscriptionScalarWhereInput[]
    NOT?: ActiveSubscriptionScalarWhereInput | ActiveSubscriptionScalarWhereInput[]
    id?: IntFilter<"ActiveSubscription"> | number
    customerId?: IntFilter<"ActiveSubscription"> | number
    planId?: IntFilter<"ActiveSubscription"> | number
    status?: StringFilter<"ActiveSubscription"> | string
    startDate?: DateTimeFilter<"ActiveSubscription"> | Date | string
  }

  export type ActiveSubscriptionCreateWithoutPlanInput = {
    status: string
    startDate: Date | string
    customer: ClientAccountCreateNestedOneWithoutSubscriptionsInput
  }

  export type ActiveSubscriptionUncheckedCreateWithoutPlanInput = {
    id?: number
    customerId: number
    status: string
    startDate: Date | string
  }

  export type ActiveSubscriptionCreateOrConnectWithoutPlanInput = {
    where: ActiveSubscriptionWhereUniqueInput
    create: XOR<ActiveSubscriptionCreateWithoutPlanInput, ActiveSubscriptionUncheckedCreateWithoutPlanInput>
  }

  export type ActiveSubscriptionCreateManyPlanInputEnvelope = {
    data: ActiveSubscriptionCreateManyPlanInput | ActiveSubscriptionCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type ActiveSubscriptionUpsertWithWhereUniqueWithoutPlanInput = {
    where: ActiveSubscriptionWhereUniqueInput
    update: XOR<ActiveSubscriptionUpdateWithoutPlanInput, ActiveSubscriptionUncheckedUpdateWithoutPlanInput>
    create: XOR<ActiveSubscriptionCreateWithoutPlanInput, ActiveSubscriptionUncheckedCreateWithoutPlanInput>
  }

  export type ActiveSubscriptionUpdateWithWhereUniqueWithoutPlanInput = {
    where: ActiveSubscriptionWhereUniqueInput
    data: XOR<ActiveSubscriptionUpdateWithoutPlanInput, ActiveSubscriptionUncheckedUpdateWithoutPlanInput>
  }

  export type ActiveSubscriptionUpdateManyWithWhereWithoutPlanInput = {
    where: ActiveSubscriptionScalarWhereInput
    data: XOR<ActiveSubscriptionUpdateManyMutationInput, ActiveSubscriptionUncheckedUpdateManyWithoutPlanInput>
  }

  export type ClientAccountCreateWithoutSubscriptionsInput = {
    name: string
    email: string
  }

  export type ClientAccountUncheckedCreateWithoutSubscriptionsInput = {
    id?: number
    name: string
    email: string
  }

  export type ClientAccountCreateOrConnectWithoutSubscriptionsInput = {
    where: ClientAccountWhereUniqueInput
    create: XOR<ClientAccountCreateWithoutSubscriptionsInput, ClientAccountUncheckedCreateWithoutSubscriptionsInput>
  }

  export type SubscriptionPlanCreateWithoutSubscriptionsInput = {
    code: string
    name: string
    priceMonthly: number
    currency: string
  }

  export type SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput = {
    id?: number
    code: string
    name: string
    priceMonthly: number
    currency: string
  }

  export type SubscriptionPlanCreateOrConnectWithoutSubscriptionsInput = {
    where: SubscriptionPlanWhereUniqueInput
    create: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
  }

  export type ClientAccountUpsertWithoutSubscriptionsInput = {
    update: XOR<ClientAccountUpdateWithoutSubscriptionsInput, ClientAccountUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<ClientAccountCreateWithoutSubscriptionsInput, ClientAccountUncheckedCreateWithoutSubscriptionsInput>
    where?: ClientAccountWhereInput
  }

  export type ClientAccountUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: ClientAccountWhereInput
    data: XOR<ClientAccountUpdateWithoutSubscriptionsInput, ClientAccountUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type ClientAccountUpdateWithoutSubscriptionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ClientAccountUncheckedUpdateWithoutSubscriptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionPlanUpsertWithoutSubscriptionsInput = {
    update: XOR<SubscriptionPlanUpdateWithoutSubscriptionsInput, SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
    where?: SubscriptionPlanWhereInput
  }

  export type SubscriptionPlanUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: SubscriptionPlanWhereInput
    data: XOR<SubscriptionPlanUpdateWithoutSubscriptionsInput, SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type SubscriptionPlanUpdateWithoutSubscriptionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
  }

  export type SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
  }

  export type DistributionCenterCreateWithoutInventoryInput = {
    code: string
    name: string
    pickWaves?: FulfillmentWaveCreateNestedManyWithoutDistributionCenterInput
  }

  export type DistributionCenterUncheckedCreateWithoutInventoryInput = {
    id?: number
    code: string
    name: string
    pickWaves?: FulfillmentWaveUncheckedCreateNestedManyWithoutDistributionCenterInput
  }

  export type DistributionCenterCreateOrConnectWithoutInventoryInput = {
    where: DistributionCenterWhereUniqueInput
    create: XOR<DistributionCenterCreateWithoutInventoryInput, DistributionCenterUncheckedCreateWithoutInventoryInput>
  }

  export type ProductSKUCreateWithoutInventoryInput = {
    code: string
    name: string
    uom: string
  }

  export type ProductSKUUncheckedCreateWithoutInventoryInput = {
    id?: number
    code: string
    name: string
    uom: string
  }

  export type ProductSKUCreateOrConnectWithoutInventoryInput = {
    where: ProductSKUWhereUniqueInput
    create: XOR<ProductSKUCreateWithoutInventoryInput, ProductSKUUncheckedCreateWithoutInventoryInput>
  }

  export type DistributionCenterUpsertWithoutInventoryInput = {
    update: XOR<DistributionCenterUpdateWithoutInventoryInput, DistributionCenterUncheckedUpdateWithoutInventoryInput>
    create: XOR<DistributionCenterCreateWithoutInventoryInput, DistributionCenterUncheckedCreateWithoutInventoryInput>
    where?: DistributionCenterWhereInput
  }

  export type DistributionCenterUpdateToOneWithWhereWithoutInventoryInput = {
    where?: DistributionCenterWhereInput
    data: XOR<DistributionCenterUpdateWithoutInventoryInput, DistributionCenterUncheckedUpdateWithoutInventoryInput>
  }

  export type DistributionCenterUpdateWithoutInventoryInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pickWaves?: FulfillmentWaveUpdateManyWithoutDistributionCenterNestedInput
  }

  export type DistributionCenterUncheckedUpdateWithoutInventoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pickWaves?: FulfillmentWaveUncheckedUpdateManyWithoutDistributionCenterNestedInput
  }

  export type ProductSKUUpsertWithoutInventoryInput = {
    update: XOR<ProductSKUUpdateWithoutInventoryInput, ProductSKUUncheckedUpdateWithoutInventoryInput>
    create: XOR<ProductSKUCreateWithoutInventoryInput, ProductSKUUncheckedCreateWithoutInventoryInput>
    where?: ProductSKUWhereInput
  }

  export type ProductSKUUpdateToOneWithWhereWithoutInventoryInput = {
    where?: ProductSKUWhereInput
    data: XOR<ProductSKUUpdateWithoutInventoryInput, ProductSKUUncheckedUpdateWithoutInventoryInput>
  }

  export type ProductSKUUpdateWithoutInventoryInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    uom?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSKUUncheckedUpdateWithoutInventoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    uom?: StringFieldUpdateOperationsInput | string
  }

  export type DistributionCenterCreateWithoutPickWavesInput = {
    code: string
    name: string
    inventory?: CurrentInventoryCreateNestedManyWithoutDistributionCenterInput
  }

  export type DistributionCenterUncheckedCreateWithoutPickWavesInput = {
    id?: number
    code: string
    name: string
    inventory?: CurrentInventoryUncheckedCreateNestedManyWithoutDistributionCenterInput
  }

  export type DistributionCenterCreateOrConnectWithoutPickWavesInput = {
    where: DistributionCenterWhereUniqueInput
    create: XOR<DistributionCenterCreateWithoutPickWavesInput, DistributionCenterUncheckedCreateWithoutPickWavesInput>
  }

  export type DistributionCenterUpsertWithoutPickWavesInput = {
    update: XOR<DistributionCenterUpdateWithoutPickWavesInput, DistributionCenterUncheckedUpdateWithoutPickWavesInput>
    create: XOR<DistributionCenterCreateWithoutPickWavesInput, DistributionCenterUncheckedCreateWithoutPickWavesInput>
    where?: DistributionCenterWhereInput
  }

  export type DistributionCenterUpdateToOneWithWhereWithoutPickWavesInput = {
    where?: DistributionCenterWhereInput
    data: XOR<DistributionCenterUpdateWithoutPickWavesInput, DistributionCenterUncheckedUpdateWithoutPickWavesInput>
  }

  export type DistributionCenterUpdateWithoutPickWavesInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    inventory?: CurrentInventoryUpdateManyWithoutDistributionCenterNestedInput
  }

  export type DistributionCenterUncheckedUpdateWithoutPickWavesInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    inventory?: CurrentInventoryUncheckedUpdateManyWithoutDistributionCenterNestedInput
  }

  export type WorkHoursLogCreateWithoutProjectInput = {
    employeeName: string
    date: Date | string
    hours: number
    rate: number
  }

  export type WorkHoursLogUncheckedCreateWithoutProjectInput = {
    id?: number
    employeeName: string
    date: Date | string
    hours: number
    rate: number
  }

  export type WorkHoursLogCreateOrConnectWithoutProjectInput = {
    where: WorkHoursLogWhereUniqueInput
    create: XOR<WorkHoursLogCreateWithoutProjectInput, WorkHoursLogUncheckedCreateWithoutProjectInput>
  }

  export type WorkHoursLogCreateManyProjectInputEnvelope = {
    data: WorkHoursLogCreateManyProjectInput | WorkHoursLogCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type WorkHoursLogUpsertWithWhereUniqueWithoutProjectInput = {
    where: WorkHoursLogWhereUniqueInput
    update: XOR<WorkHoursLogUpdateWithoutProjectInput, WorkHoursLogUncheckedUpdateWithoutProjectInput>
    create: XOR<WorkHoursLogCreateWithoutProjectInput, WorkHoursLogUncheckedCreateWithoutProjectInput>
  }

  export type WorkHoursLogUpdateWithWhereUniqueWithoutProjectInput = {
    where: WorkHoursLogWhereUniqueInput
    data: XOR<WorkHoursLogUpdateWithoutProjectInput, WorkHoursLogUncheckedUpdateWithoutProjectInput>
  }

  export type WorkHoursLogUpdateManyWithWhereWithoutProjectInput = {
    where: WorkHoursLogScalarWhereInput
    data: XOR<WorkHoursLogUpdateManyMutationInput, WorkHoursLogUncheckedUpdateManyWithoutProjectInput>
  }

  export type WorkHoursLogScalarWhereInput = {
    AND?: WorkHoursLogScalarWhereInput | WorkHoursLogScalarWhereInput[]
    OR?: WorkHoursLogScalarWhereInput[]
    NOT?: WorkHoursLogScalarWhereInput | WorkHoursLogScalarWhereInput[]
    id?: IntFilter<"WorkHoursLog"> | number
    projectId?: IntFilter<"WorkHoursLog"> | number
    employeeName?: StringFilter<"WorkHoursLog"> | string
    date?: DateTimeFilter<"WorkHoursLog"> | Date | string
    hours?: FloatFilter<"WorkHoursLog"> | number
    rate?: FloatFilter<"WorkHoursLog"> | number
  }

  export type ProjectEngagementCreateWithoutTimesheetsInput = {
    code: string
    title: string
    billMethod: string
  }

  export type ProjectEngagementUncheckedCreateWithoutTimesheetsInput = {
    id?: number
    code: string
    title: string
    billMethod: string
  }

  export type ProjectEngagementCreateOrConnectWithoutTimesheetsInput = {
    where: ProjectEngagementWhereUniqueInput
    create: XOR<ProjectEngagementCreateWithoutTimesheetsInput, ProjectEngagementUncheckedCreateWithoutTimesheetsInput>
  }

  export type ProjectEngagementUpsertWithoutTimesheetsInput = {
    update: XOR<ProjectEngagementUpdateWithoutTimesheetsInput, ProjectEngagementUncheckedUpdateWithoutTimesheetsInput>
    create: XOR<ProjectEngagementCreateWithoutTimesheetsInput, ProjectEngagementUncheckedCreateWithoutTimesheetsInput>
    where?: ProjectEngagementWhereInput
  }

  export type ProjectEngagementUpdateToOneWithWhereWithoutTimesheetsInput = {
    where?: ProjectEngagementWhereInput
    data: XOR<ProjectEngagementUpdateWithoutTimesheetsInput, ProjectEngagementUncheckedUpdateWithoutTimesheetsInput>
  }

  export type ProjectEngagementUpdateWithoutTimesheetsInput = {
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    billMethod?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectEngagementUncheckedUpdateWithoutTimesheetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    billMethod?: StringFieldUpdateOperationsInput | string
  }

  export type CurrentInventoryCreateManyDistributionCenterInput = {
    id?: number
    productSKUId: number
    quantity: number
  }

  export type FulfillmentWaveCreateManyDistributionCenterInput = {
    id?: number
    waveCode: string
  }

  export type CurrentInventoryUpdateWithoutDistributionCenterInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    productSKU?: ProductSKUUpdateOneRequiredWithoutInventoryNestedInput
  }

  export type CurrentInventoryUncheckedUpdateWithoutDistributionCenterInput = {
    id?: IntFieldUpdateOperationsInput | number
    productSKUId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CurrentInventoryUncheckedUpdateManyWithoutDistributionCenterInput = {
    id?: IntFieldUpdateOperationsInput | number
    productSKUId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type FulfillmentWaveUpdateWithoutDistributionCenterInput = {
    waveCode?: StringFieldUpdateOperationsInput | string
  }

  export type FulfillmentWaveUncheckedUpdateWithoutDistributionCenterInput = {
    id?: IntFieldUpdateOperationsInput | number
    waveCode?: StringFieldUpdateOperationsInput | string
  }

  export type FulfillmentWaveUncheckedUpdateManyWithoutDistributionCenterInput = {
    id?: IntFieldUpdateOperationsInput | number
    waveCode?: StringFieldUpdateOperationsInput | string
  }

  export type CurrentInventoryCreateManyProductSKUInput = {
    id?: number
    distributionCenterId: number
    quantity: number
  }

  export type CurrentInventoryUpdateWithoutProductSKUInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    distributionCenter?: DistributionCenterUpdateOneRequiredWithoutInventoryNestedInput
  }

  export type CurrentInventoryUncheckedUpdateWithoutProductSKUInput = {
    id?: IntFieldUpdateOperationsInput | number
    distributionCenterId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CurrentInventoryUncheckedUpdateManyWithoutProductSKUInput = {
    id?: IntFieldUpdateOperationsInput | number
    distributionCenterId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ActiveSubscriptionCreateManyCustomerInput = {
    id?: number
    planId: number
    status: string
    startDate: Date | string
  }

  export type ActiveSubscriptionUpdateWithoutCustomerInput = {
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type ActiveSubscriptionUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActiveSubscriptionUncheckedUpdateManyWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActiveSubscriptionCreateManyPlanInput = {
    id?: number
    customerId: number
    status: string
    startDate: Date | string
  }

  export type ActiveSubscriptionUpdateWithoutPlanInput = {
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: ClientAccountUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type ActiveSubscriptionUncheckedUpdateWithoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActiveSubscriptionUncheckedUpdateManyWithoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkHoursLogCreateManyProjectInput = {
    id?: number
    employeeName: string
    date: Date | string
    hours: number
    rate: number
  }

  export type WorkHoursLogUpdateWithoutProjectInput = {
    employeeName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
  }

  export type WorkHoursLogUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
  }

  export type WorkHoursLogUncheckedUpdateManyWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeName?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}