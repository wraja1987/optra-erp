
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.WorkspaceUnitScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ERPUserScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  email: 'email',
  role: 'role',
  passwordHash: 'passwordHash',
  immutable: 'immutable',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  key: 'key',
  name: 'name',
  system: 'system'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  userId: 'userId',
  roleId: 'roleId',
  tenantId: 'tenantId'
};

exports.Prisma.SodPolicyScalarFieldEnum = {
  id: 'id',
  key: 'key',
  description: 'description',
  active: 'active'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  actorEmail: 'actorEmail',
  role: 'role',
  action: 'action',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  email: 'email',
  tokenHash: 'tokenHash',
  expiresAt: 'expiresAt',
  used: 'used',
  ip: 'ip',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  baseCurrency: 'baseCurrency'
};

exports.Prisma.DistributionCenterScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name'
};

exports.Prisma.ProductSKUScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  uom: 'uom'
};

exports.Prisma.ClientAccountScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  customerNumber: 'customerNumber',
  type: 'type',
  segment: 'segment',
  status: 'status',
  owner: 'owner',
  primaryContact: 'primaryContact',
  phone: 'phone',
  balance: 'balance',
  creditLimit: 'creditLimit',
  creditRisk: 'creditRisk',
  paymentTerms: 'paymentTerms',
  lastOrderDate: 'lastOrderDate',
  totalOrders: 'totalOrders',
  countryRegion: 'countryRegion',
  tags: 'tags',
  defaultCurrency: 'defaultCurrency',
  priceList: 'priceList',
  vatNumber: 'vatNumber',
  daysPastDue: 'daysPastDue',
  lastPaymentDate: 'lastPaymentDate',
  statementAgeBucket: 'statementAgeBucket',
  preferredContactMethod: 'preferredContactMethod',
  marketingConsent: 'marketingConsent',
  creditHoldReason: 'creditHoldReason'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  priceMonthly: 'priceMonthly',
  currency: 'currency'
};

exports.Prisma.ActiveSubscriptionScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  planId: 'planId',
  status: 'status',
  startDate: 'startDate'
};

exports.Prisma.CurrentInventoryScalarFieldEnum = {
  id: 'id',
  distributionCenterId: 'distributionCenterId',
  productSKUId: 'productSKUId',
  quantity: 'quantity'
};

exports.Prisma.FulfillmentWaveScalarFieldEnum = {
  id: 'id',
  distributionCenterId: 'distributionCenterId',
  waveCode: 'waveCode'
};

exports.Prisma.ProjectEngagementScalarFieldEnum = {
  id: 'id',
  code: 'code',
  title: 'title',
  billMethod: 'billMethod'
};

exports.Prisma.WorkHoursLogScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  employeeName: 'employeeName',
  date: 'date',
  hours: 'hours',
  rate: 'rate'
};

exports.Prisma.StaffMemberScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  niLetter: 'niLetter',
  taxCode: 'taxCode'
};

exports.Prisma.HelpGuideScalarFieldEnum = {
  id: 'id',
  role: 'role',
  title: 'title',
  body: 'body'
};

exports.Prisma.HelpFAQScalarFieldEnum = {
  id: 'id',
  question: 'question',
  answer: 'answer'
};

exports.Prisma.HelpGlossaryScalarFieldEnum = {
  id: 'id',
  term: 'term',
  definition: 'definition'
};

exports.Prisma.HelpReleaseNoteScalarFieldEnum = {
  id: 'id',
  version: 'version',
  notes: 'notes',
  date: 'date'
};

exports.Prisma.HelpVideoStubScalarFieldEnum = {
  id: 'id',
  title: 'title',
  url: 'url'
};

exports.Prisma.SupportMessageScalarFieldEnum = {
  id: 'id',
  email: 'email',
  role: 'role',
  subject: 'subject',
  message: 'message',
  createdAt: 'createdAt',
  status: 'status'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  period: 'period',
  account: 'account',
  amount: 'amount'
};

exports.Prisma.FXRateScalarFieldEnum = {
  id: 'id',
  date: 'date',
  base: 'base',
  ccy: 'ccy',
  rate: 'rate'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  WorkspaceUnit: 'WorkspaceUnit',
  ERPUser: 'ERPUser',
  Role: 'Role',
  UserRole: 'UserRole',
  SodPolicy: 'SodPolicy',
  AuditLog: 'AuditLog',
  PasswordReset: 'PasswordReset',
  Organization: 'Organization',
  DistributionCenter: 'DistributionCenter',
  ProductSKU: 'ProductSKU',
  ClientAccount: 'ClientAccount',
  SubscriptionPlan: 'SubscriptionPlan',
  ActiveSubscription: 'ActiveSubscription',
  CurrentInventory: 'CurrentInventory',
  FulfillmentWave: 'FulfillmentWave',
  ProjectEngagement: 'ProjectEngagement',
  WorkHoursLog: 'WorkHoursLog',
  StaffMember: 'StaffMember',
  HelpGuide: 'HelpGuide',
  HelpFAQ: 'HelpFAQ',
  HelpGlossary: 'HelpGlossary',
  HelpReleaseNote: 'HelpReleaseNote',
  HelpVideoStub: 'HelpVideoStub',
  SupportMessage: 'SupportMessage',
  Budget: 'Budget',
  FXRate: 'FXRate'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
