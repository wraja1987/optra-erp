{
  "name": "nexa-erp",
  "private": true,
  "packageManager": "pnpm@9.0.0",
  "workspaces": [
    "apps/*",
    "packages/*",
    "packages/registry",
    "packages/jobs"
  ],
  "scripts": {
    "dev:fast": "pnpm --filter web dev",
    "smoke:web": "pnpm --filter web build && node -e \"console.log('web build ok')\"",
    "smoke:mobile": "pnpm --filter mobile test || echo 'mobile smoke placeholder ok'",
    "smoke:all": "bash -lc \"set -euo pipefail; mkdir -p reports; pkill -f 'apps/web.*next' >/dev/null 2>&1 || true; echo '== Nexa ERP Smoke Test Suite =='; pnpm --filter web dev >/tmp/nexa-dev.log 2>&1 & DEV_PID=$!; sleep 8; echo '-- Running healthz check --'; curl -s http://localhost:3000/api/healthz || true; echo; echo '-- Running masking check --'; node scripts/ci/mask_check.cjs > reports/mask-check-$(date +%Y%m%d%H%M%S).log || true; echo; echo '-- Running provider smoke mocks --'; curl -s 'http://localhost:3000/api/auth/callback/google?code=fake' || true; echo; curl -s 'http://localhost:3000/api/auth/callback/azure-ad?code=fake' || true; echo; curl -s http://localhost:3000/api/ai/audit/logs || true; echo; curl -s http://localhost:3000/api/twilio/ping || true; echo; curl -s http://localhost:3000/api/stripe/webhook || true; echo; curl -s http://localhost:3000/api/hmrc/vat/ping || true; echo; echo '== Nexa ERP Smoke Suite Finished =='; kill $DEV_PID >/dev/null 2>&1 || true\"",
    "lint": "eslint . --ext .js,.ts,.tsx --max-warnings=0",
    "typecheck": "tsc -p tsconfig.base.json --noEmit",
    "test": "vitest run --reporter=dot",
    "cov": "vitest run --coverage --reporter=dot",
    "a11y": "echo 'axe-core placeholder'",
    "ui:a11y": "bash scripts/ui/a11y.sh light",
    "ui:a11y:dark": "bash scripts/ui/a11y.sh dark",
    "ui:perf": "bash scripts/ui/perf.sh",
    "ui:nav:lint": "node scripts/ui/nav-lint.js",
    "ui:visual": "bash scripts/ui/visual.sh",
    "test:security": "bash scripts/security/test-security.sh",
    "sbom": "npx --yes cyclonedx-bom -o sbom.xml || echo 'sbom stub'",
    "gate:phase0": "node scripts/gate-phase0.cjs",
    "prisma:generate": "npx prisma generate",
    "prisma:validate": "npx prisma validate",
    "db:up": "docker compose up -d",
    "db:down": "docker compose down -v",
    "health": "node -r dotenv/config scripts/healthcheck.cjs",
    "gate:phase1": "node scripts/gate-phase1.cjs",
    "gate:phase2": "node scripts/gates/phase2.cjs",
    "gate:phase3": "node scripts/gates/phase3.cjs",
    "gate:phase4": "bash scripts/ci/gate-phase4.sh",
    "gate:phase5": "node scripts/gates/phase5.cjs",
    "report:phase5": "bash scripts/ci/phase5-summary.sh",
    "gates:phase4": "bash scripts/ci/gate-phase4.sh",
    "gates:all": "npm run gate:phase0 && npm run gate:phase1 && npm run gate:phase2 && npm run gate:phase3 && npm run gate:phase4 && npm run gate:phase5",
    "web": "npm --workspace apps/web run dev",
    "check": "npm run health && npm run gates:all",
    "build": "pnpm -r run build",
    "dev:web": "pnpm --filter web dev",
    "openapi:generate": "node scripts/docs/publish-openapi.js",
    "sdk:build": "pnpm -C packages/sdk-nexa build",
    "rename:audit": "node scripts/rename-audit.cjs",
    "rename:gaps": "node scripts/rename-gap-scan.cjs",
    "phase5to6:audit": "node scripts/phase5-to-6-audit.cjs",
    "golden:invoice": "node scripts/tests/golden-invoice.js",
    "golden:siem": "node scripts/tests/golden-siem.js",
    "golden:all": "pnpm -w golden:invoice && pnpm -w golden:siem",
    "seed:phase4": "tsx scripts/seeds/seed-phase4.ts",
    "seed:phase6": "tsx scripts/seeds/seed-phase6.ts",
    "seed:stubs": "tsx scripts/seeds/seed-stubs.ts",
    "report:stubs": "tsx scripts/reports/stubs-ai-audit-summary.ts",
    "seed:phase4:demo-off": "tsx scripts/seeds/seed-phase4.ts --disableDemo",
    "test:cov": "vitest run --coverage --reporter=dot",
    "gate:phase6": "node scripts/gates/phase6.cjs",
    "report:phase6": "node scripts/reports/phase6-audit-summary.cjs",
    "build:registry": "tsc -p packages/registry/tsconfig.json",
    "seed:phaseA": "tsx scripts/seeds/seed-phaseA.ts",
    "jobs:run:once": "pnpm -C packages/jobs build && pnpm -C packages/jobs run:once",
    "backup:run": "tsx packages/jobs/backup.ts",
    "dr:drill": "tsx packages/jobs/restore-check.ts"
  },
  "devDependencies": {
    "@react-native-async-storage/async-storage": "^2.2.0",
    "@types/node": "^20.14.11",
    "@vitest/coverage-v8": "^3.2.4",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-jsdoc": "^48.3.0",
    "eslint-plugin-n": "^17.9.0",
    "eslint-plugin-promise": "^6.4.0",
    "prettier": "^3.3.3",
    "prisma": "^6.14.0",
    "start-server-and-test": "^2.0.3",
    "tsx": "4.20.4",
    "typescript": "^5.5.4",
    "vitest": "3.2.4",
    "wait-on": "^7.0.1",
    "zod": "^3.23.8"
  },
  "eslintConfig": {
    "env": {
      "es2021": true,
      "node": true
    },
    "extends": [
      "eslint:recommended",
      "plugin:promise/recommended",
      "plugin:n/recommended",
      "prettier"
    ],
    "parserOptions": {
      "ecmaVersion": "latest",
      "sourceType": "script"
    },
    "ignorePatterns": [
      "node_modules/",
      "dist/",
      "sbom.xml",
      "apps/**",
      "packages/**",
      "scripts/**",
      "vitest.config.ts"
    ],
    "overrides": [
      {
        "files": [
          "**/*.test.js"
        ],
        "parserOptions": {
          "sourceType": "module"
        }
      }
    ]
  },
  "dependencies": {
    "@prisma/client": "^6.14.0",
    "pg": "^8.16.3",
    "redis": "^5.8.1"
  }
}
